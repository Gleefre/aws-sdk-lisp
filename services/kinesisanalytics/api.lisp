;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kinesisanalytics/api
  (:use)
  (:nicknames #:aws/kinesisanalytics)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request))
(common-lisp:in-package #:aws-sdk/services/kinesisanalytics/api)
(common-lisp:progn
 (common-lisp:defclass kinesisanalytics-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "kinesisanalytics"))
 (common-lisp:export 'kinesisanalytics-request))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-cloud-watch-logging-option-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-cloud-watch-logging-option-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (cloud-watch-logging-option
    (common-lisp:error ":cloud-watch-logging-option is required") :type
    (common-lisp:or cloud-watch-logging-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-cloud-watch-logging-option-request
                    'make-add-application-cloud-watch-logging-option-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-cloud-watch-logging-option-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-cloud-watch-logging-option-response-")))
 (common-lisp:export
  (common-lisp:list 'add-application-cloud-watch-logging-option-response
                    'make-add-application-cloud-watch-logging-option-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-cloud-watch-logging-option-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-input-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (input (common-lisp:error ":input is required") :type
    (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-input-request
                    'make-add-application-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-input-response-")))
 (common-lisp:export
  (common-lisp:list 'add-application-input-response
                    'make-add-application-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-output-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-output-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (output (common-lisp:error ":output is required") :type
    (common-lisp:or output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-output-request
                    'make-add-application-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-output-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-application-output-response-")))
 (common-lisp:export
  (common-lisp:list 'add-application-output-response
                    'make-add-application-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-reference-data-source-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-reference-data-source-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (reference-data-source
    (common-lisp:error ":reference-data-source is required") :type
    (common-lisp:or reference-data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-application-reference-data-source-request
                    'make-add-application-reference-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-application-reference-data-source-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-application-reference-data-source-response-")))
 (common-lisp:export
  (common-lisp:list 'add-application-reference-data-source-response
                    'make-add-application-reference-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-application-reference-data-source-response))
   common-lisp:nil))
(common-lisp:deftype application-code () 'common-lisp:string)
(common-lisp:deftype application-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-detail-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-description common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null))
   (application-arn (common-lisp:error ":application-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-status (common-lisp:error ":application-status is required")
    :type (common-lisp:or application-status common-lisp:null))
   (create-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (input-descriptions common-lisp:nil :type
    (common-lisp:or input-descriptions common-lisp:null))
   (output-descriptions common-lisp:nil :type
    (common-lisp:or output-descriptions common-lisp:null))
   (reference-data-source-descriptions common-lisp:nil :type
    (common-lisp:or reference-data-source-descriptions common-lisp:null))
   (cloud-watch-logging-option-descriptions common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-option-descriptions common-lisp:null))
   (application-code common-lisp:nil :type
    (common-lisp:or application-code common-lisp:null))
   (application-version-id
    (common-lisp:error ":application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-detail 'make-application-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-descriptions))
      (common-lisp:list
       (common-lisp:cons "InputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-descriptions))
      (common-lisp:list
       (common-lisp:cons "OutputDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-descriptions))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-descriptions))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-code))
      (common-lisp:list
       (common-lisp:cons "ApplicationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-version-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-detail))
   common-lisp:nil))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-summaries ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun |make-application-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-summary-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-arn (common-lisp:error ":application-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (application-status (common-lisp:error ":application-status is required")
    :type (common-lisp:or application-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-status))
      (common-lisp:list
       (common-lisp:cons "ApplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-update-"))
   (input-updates common-lisp:nil :type
    (common-lisp:or input-updates common-lisp:null))
   (application-code-update common-lisp:nil :type
    (common-lisp:or application-code common-lisp:null))
   (output-updates common-lisp:nil :type
    (common-lisp:or output-updates common-lisp:null))
   (reference-data-source-updates common-lisp:nil :type
    (common-lisp:or reference-data-source-updates common-lisp:null))
   (cloud-watch-logging-option-updates common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-option-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-update 'make-application-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-updates))
      (common-lisp:list
       (common-lisp:cons "InputUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-code-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationCodeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-updates))
      (common-lisp:list
       (common-lisp:cons "OutputUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-data-source-updates))
      (common-lisp:list
       (common-lisp:cons "ReferenceDataSourceUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-updates))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-update))
   common-lisp:nil))
(common-lisp:deftype application-version-id () 'common-lisp:integer)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:deftype bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (csvmapping-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-csvmapping-parameters-"))
   (record-row-delimiter
    (common-lisp:error ":record-row-delimiter is required") :type
    (common-lisp:or record-row-delimiter common-lisp:null))
   (record-column-delimiter
    (common-lisp:error ":record-column-delimiter is required") :type
    (common-lisp:or record-column-delimiter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'csvmapping-parameters 'make-csvmapping-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-row-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordRowDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-column-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordColumnDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          csvmapping-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-option-"))
   (log-stream-arn (common-lisp:error ":log-stream-arn is required") :type
    (common-lisp:or log-stream-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option
                    'make-cloud-watch-logging-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LogStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-option-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-option-description-"))
   (cloud-watch-logging-option-id common-lisp:nil :type
    (common-lisp:or id common-lisp:null))
   (log-stream-arn (common-lisp:error ":log-stream-arn is required") :type
    (common-lisp:or log-stream-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option-description
                    'make-cloud-watch-logging-option-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LogStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-option-descriptions ()
   '(trivial-types:proper-list cloud-watch-logging-option-description))
 (common-lisp:defun |make-cloud-watch-logging-option-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-logging-option-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-logging-option-update-"))
   (cloud-watch-logging-option-id
    (common-lisp:error ":cloud-watch-logging-option-id is required") :type
    (common-lisp:or id common-lisp:null))
   (log-stream-arnupdate common-lisp:nil :type
    (common-lisp:or log-stream-arn common-lisp:null))
   (role-arnupdate common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logging-option-update
                    'make-cloud-watch-logging-option-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-arnupdate))
      (common-lisp:list
       (common-lisp:cons "LogStreamARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logging-option-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-option-updates ()
   '(trivial-types:proper-list cloud-watch-logging-option-update))
 (common-lisp:defun |make-cloud-watch-logging-option-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logging-options ()
   '(trivial-types:proper-list cloud-watch-logging-option))
 (common-lisp:defun |make-cloud-watch-logging-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logging-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-validation-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-validation-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-validation-exception
                    'make-code-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-validation-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-validation-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-validation-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (concurrent-modification-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-concurrent-modification-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'make-concurrent-modification-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          concurrent-modification-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          concurrent-modification-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          concurrent-modification-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (application-description common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null))
   (inputs common-lisp:nil :type (common-lisp:or inputs common-lisp:null))
   (outputs common-lisp:nil :type (common-lisp:or outputs common-lisp:null))
   (cloud-watch-logging-options common-lisp:nil :type
    (common-lisp:or cloud-watch-logging-options common-lisp:null))
   (application-code common-lisp:nil :type
    (common-lisp:or application-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-description))
      (common-lisp:list
       (common-lisp:cons "ApplicationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-options))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-code))
      (common-lisp:list
       (common-lisp:cons "ApplicationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (application-summary (common-lisp:error ":application-summary is required")
    :type (common-lisp:or application-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-summary))
      (common-lisp:list
       (common-lisp:cons "ApplicationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-cloud-watch-logging-option-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-cloud-watch-logging-option-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (cloud-watch-logging-option-id
    (common-lisp:error ":cloud-watch-logging-option-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-cloud-watch-logging-option-request
                    'make-delete-application-cloud-watch-logging-option-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logging-option-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLoggingOptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-cloud-watch-logging-option-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-cloud-watch-logging-option-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-cloud-watch-logging-option-response
                    'make-delete-application-cloud-watch-logging-option-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-cloud-watch-logging-option-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-output-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-output-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (output-id (common-lisp:error ":output-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-output-request
                    'make-delete-application-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-output-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-output-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-output-response
                    'make-delete-application-output-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-reference-data-source-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-reference-data-source-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-reference-data-source-request
                    'make-delete-application-reference-data-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-reference-data-source-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-application-reference-data-source-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-reference-data-source-response
                    'make-delete-application-reference-data-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-reference-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (create-timestamp (common-lisp:error ":create-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-request
                    'make-describe-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-response-"))
   (application-detail (common-lisp:error ":application-detail is required")
    :type (common-lisp:or application-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-response
                    'make-describe-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-detail))
      (common-lisp:list
       (common-lisp:cons "ApplicationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-schema-"))
   (record-format-type common-lisp:nil :type
    (common-lisp:or record-format-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-schema 'make-destination-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format-type))
      (common-lisp:list
       (common-lisp:cons "RecordFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-input-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-input-schema-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (input-starting-position-configuration
    (common-lisp:error ":input-starting-position-configuration is required")
    :type
    (common-lisp:or input-starting-position-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-input-schema-request
                    'make-discover-input-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-input-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-input-schema-response-"))
   (input-schema common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null))
   (parsed-input-records common-lisp:nil :type
    (common-lisp:or parsed-input-records common-lisp:null))
   (raw-input-records common-lisp:nil :type
    (common-lisp:or raw-input-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-input-schema-response
                    'make-discover-input-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parsed-input-records))
      (common-lisp:list
       (common-lisp:cons "ParsedInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-input-records))
      (common-lisp:list
       (common-lisp:cons "RawInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-input-schema-response))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype file-key () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype in-app-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype in-app-stream-names ()
   '(trivial-types:proper-list in-app-stream-name))
 (common-lisp:defun |make-in-app-stream-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list in-app-stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype in-app-table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input (:copier common-lisp:nil) (:conc-name "struct-shape-input-"))
   (name-prefix (common-lisp:error ":name-prefix is required") :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-input common-lisp:nil :type
    (common-lisp:or kinesis-streams-input common-lisp:null))
   (kinesis-firehose-input common-lisp:nil :type
    (common-lisp:or kinesis-firehose-input common-lisp:null))
   (input-parallelism common-lisp:nil :type
    (common-lisp:or input-parallelism common-lisp:null))
   (input-schema (common-lisp:error ":input-schema is required") :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parallelism))
      (common-lisp:list
       (common-lisp:cons "InputParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-configuration-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (input-starting-position-configuration
    (common-lisp:error ":input-starting-position-configuration is required")
    :type
    (common-lisp:or input-starting-position-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-configuration 'make-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-configurations ()
   '(trivial-types:proper-list input-configuration))
 (common-lisp:defun |make-input-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (input-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-description-"))
   (input-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name-prefix common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (in-app-stream-names common-lisp:nil :type
    (common-lisp:or in-app-stream-names common-lisp:null))
   (kinesis-streams-input-description common-lisp:nil :type
    (common-lisp:or kinesis-streams-input-description common-lisp:null))
   (kinesis-firehose-input-description common-lisp:nil :type
    (common-lisp:or kinesis-firehose-input-description common-lisp:null))
   (input-schema common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null))
   (input-parallelism common-lisp:nil :type
    (common-lisp:or input-parallelism common-lisp:null))
   (input-starting-position-configuration common-lisp:nil :type
    (common-lisp:or input-starting-position-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-description 'make-input-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-app-stream-names))
      (common-lisp:list
       (common-lisp:cons "InAppStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input-description))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input-description))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema))
      (common-lisp:list
       (common-lisp:cons "InputSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parallelism))
      (common-lisp:list
       (common-lisp:cons "InputParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position-configuration))
      (common-lisp:list
       (common-lisp:cons "InputStartingPositionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-descriptions ()
   '(trivial-types:proper-list input-description))
 (common-lisp:defun |make-input-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (input-parallelism (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-parallelism-"))
   (count common-lisp:nil :type
    (common-lisp:or input-parallelism-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-parallelism 'make-input-parallelism))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-parallelism))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-parallelism))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-parallelism))
   common-lisp:nil))
(common-lisp:deftype input-parallelism-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (input-parallelism-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-parallelism-update-"))
   (count-update common-lisp:nil :type
    (common-lisp:or input-parallelism-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-parallelism-update 'make-input-parallelism-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-update))
      (common-lisp:list
       (common-lisp:cons "CountUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-parallelism-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-schema-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-schema-update-"))
   (record-format-update common-lisp:nil :type
    (common-lisp:or record-format common-lisp:null))
   (record-encoding-update common-lisp:nil :type
    (common-lisp:or record-encoding common-lisp:null))
   (record-column-updates common-lisp:nil :type
    (common-lisp:or record-columns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-schema-update 'make-input-schema-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-schema-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-schema-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-format-update))
      (common-lisp:list
       (common-lisp:cons "RecordFormatUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-encoding-update))
      (common-lisp:list
       (common-lisp:cons "RecordEncodingUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-column-updates))
      (common-lisp:list
       (common-lisp:cons "RecordColumnUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-schema-update))
   common-lisp:nil))
(common-lisp:deftype input-starting-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-starting-position-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-starting-position-configuration-"))
   (input-starting-position common-lisp:nil :type
    (common-lisp:or input-starting-position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-starting-position-configuration
                    'make-input-starting-position-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-starting-position))
      (common-lisp:list
       (common-lisp:cons "InputStartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-starting-position-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-update-"))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or id common-lisp:null))
   (name-prefix-update common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-input-update common-lisp:nil :type
    (common-lisp:or kinesis-streams-input-update common-lisp:null))
   (kinesis-firehose-input-update common-lisp:nil :type
    (common-lisp:or kinesis-firehose-input-update common-lisp:null))
   (input-schema-update common-lisp:nil :type
    (common-lisp:or input-schema-update common-lisp:null))
   (input-parallelism-update common-lisp:nil :type
    (common-lisp:or input-parallelism-update common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-update 'make-input-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix-update))
      (common-lisp:list
       (common-lisp:cons "NamePrefixUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-input-update))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsInputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-input-update))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseInputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-schema-update))
      (common-lisp:list
       (common-lisp:cons "InputSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-parallelism-update))
      (common-lisp:list
       (common-lisp:cons "InputParallelismUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-updates ()
   '(trivial-types:proper-list input-update))
 (common-lisp:defun |make-input-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inputs () '(trivial-types:proper-list input))
 (common-lisp:defun |make-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-application-configuration-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-application-configuration-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-application-configuration-exception
                    'make-invalid-application-configuration-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-application-configuration-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-application-configuration-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-application-configuration-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-argument-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-argument-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'make-invalid-argument-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-argument-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-argument-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-argument-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (jsonmapping-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-jsonmapping-parameters-"))
   (record-row-path (common-lisp:error ":record-row-path is required") :type
    (common-lisp:or record-row-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jsonmapping-parameters 'make-jsonmapping-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-row-path))
      (common-lisp:list
       (common-lisp:cons "RecordRowPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jsonmapping-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input 'make-kinesis-firehose-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-input-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-input-description-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input-description
                    'make-kinesis-firehose-input-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-input-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-input-update-"))
   (resource-arnupdate common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arnupdate common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-input-update
                    'make-kinesis-firehose-input-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-output-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output 'make-kinesis-firehose-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-output-description-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output-description
                    'make-kinesis-firehose-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-firehose-output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-firehose-output-update-"))
   (resource-arnupdate common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arnupdate common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-output-update
                    'make-kinesis-firehose-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input 'make-kinesis-streams-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-input-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-input-description-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input-description
                    'make-kinesis-streams-input-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-input-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-input-update-"))
   (resource-arnupdate common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arnupdate common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-input-update
                    'make-kinesis-streams-input-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-input-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-output-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output 'make-kinesis-streams-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-output-description-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output-description
                    'make-kinesis-streams-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streams-output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streams-output-update-"))
   (resource-arnupdate common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (role-arnupdate common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streams-output-update
                    'make-kinesis-streams-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ResourceARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "RoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streams-output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:deftype list-applications-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-request-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-applications-input-limit common-lisp:null))
   (exclusive-start-application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-application-name))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-response-"))
   (application-summaries
    (common-lisp:error ":application-summaries is required") :type
    (common-lisp:or application-summaries common-lisp:null))
   (has-more-applications
    (common-lisp:error ":has-more-applications is required") :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-summaries))
      (common-lisp:list
       (common-lisp:cons "ApplicationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-more-applications))
      (common-lisp:list
       (common-lisp:cons "HasMoreApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:deftype log-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mapping-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-mapping-parameters-"))
   (jsonmapping-parameters common-lisp:nil :type
    (common-lisp:or jsonmapping-parameters common-lisp:null))
   (csvmapping-parameters common-lisp:nil :type
    (common-lisp:or csvmapping-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mapping-parameters 'make-mapping-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jsonmapping-parameters))
      (common-lisp:list
       (common-lisp:cons "JSONMappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'csvmapping-parameters))
      (common-lisp:list
       (common-lisp:cons "CSVMappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output (:copier common-lisp:nil) (:conc-name "struct-shape-output-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-output common-lisp:nil :type
    (common-lisp:or kinesis-streams-output common-lisp:null))
   (kinesis-firehose-output common-lisp:nil :type
    (common-lisp:or kinesis-firehose-output common-lisp:null))
   (destination-schema (common-lisp:error ":destination-schema is required")
    :type (common-lisp:or destination-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-schema))
      (common-lisp:list
       (common-lisp:cons "DestinationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-description-"))
   (output-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-output-description common-lisp:nil :type
    (common-lisp:or kinesis-streams-output-description common-lisp:null))
   (kinesis-firehose-output-description common-lisp:nil :type
    (common-lisp:or kinesis-firehose-output-description common-lisp:null))
   (destination-schema common-lisp:nil :type
    (common-lisp:or destination-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-description 'make-output-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output-description))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output-description))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutputDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-schema))
      (common-lisp:list
       (common-lisp:cons "DestinationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-descriptions ()
   '(trivial-types:proper-list output-description))
 (common-lisp:defun |make-output-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (output-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-update-"))
   (output-id (common-lisp:error ":output-id is required") :type
    (common-lisp:or id common-lisp:null))
   (name-update common-lisp:nil :type
    (common-lisp:or in-app-stream-name common-lisp:null))
   (kinesis-streams-output-update common-lisp:nil :type
    (common-lisp:or kinesis-streams-output-update common-lisp:null))
   (kinesis-firehose-output-update common-lisp:nil :type
    (common-lisp:or kinesis-firehose-output-update common-lisp:null))
   (destination-schema-update common-lisp:nil :type
    (common-lisp:or destination-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-update 'make-output-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-id))
      (common-lisp:list
       (common-lisp:cons "OutputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-update))
      (common-lisp:list
       (common-lisp:cons "NameUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-streams-output-update))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamsOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-output-update))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseOutputUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-schema-update))
      (common-lisp:list
       (common-lisp:cons "DestinationSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-updates ()
   '(trivial-types:proper-list output-update))
 (common-lisp:defun |make-output-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype outputs () '(trivial-types:proper-list output))
 (common-lisp:defun |make-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parsed-input-record ()
   '(trivial-types:proper-list parsed-input-record-field))
 (common-lisp:defun |make-parsed-input-record|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parsed-input-record-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parsed-input-record-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parsed-input-records ()
   '(trivial-types:proper-list parsed-input-record))
 (common-lisp:defun |make-parsed-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parsed-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype raw-input-record () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype raw-input-records ()
   '(trivial-types:proper-list raw-input-record))
 (common-lisp:defun |make-raw-input-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list raw-input-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (record-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-column-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or record-column-name common-lisp:null))
   (mapping common-lisp:nil :type
    (common-lisp:or record-column-mapping common-lisp:null))
   (sql-type (common-lisp:error ":sql-type is required") :type
    (common-lisp:or record-column-sql-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record-column 'make-record-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-type))
      (common-lisp:list
       (common-lisp:cons "SqlType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-column))
   common-lisp:nil))
(common-lisp:deftype record-column-delimiter () 'common-lisp:string)
(common-lisp:deftype record-column-mapping () 'common-lisp:string)
(common-lisp:deftype record-column-name () 'common-lisp:string)
(common-lisp:deftype record-column-sql-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-columns ()
   '(trivial-types:proper-list record-column))
 (common-lisp:defun |make-record-columns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (record-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-record-format-"))
   (record-format-type (common-lisp:error ":record-format-type is required")
    :type (common-lisp:or record-format-type common-lisp:null))
   (mapping-parameters common-lisp:nil :type
    (common-lisp:or mapping-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record-format 'make-record-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format-type))
      (common-lisp:list
       (common-lisp:cons "RecordFormatType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping-parameters))
      (common-lisp:list
       (common-lisp:cons "MappingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-format))
   common-lisp:nil))
(common-lisp:deftype record-format-type () 'common-lisp:string)
(common-lisp:deftype record-row-delimiter () 'common-lisp:string)
(common-lisp:deftype record-row-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reference-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-data-source-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or in-app-table-name common-lisp:null))
   (s3reference-data-source common-lisp:nil :type
    (common-lisp:or s3reference-data-source common-lisp:null))
   (reference-schema (common-lisp:error ":reference-schema is required") :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-data-source 'make-reference-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-schema))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-data-source-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-data-source-description-"))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or id common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or in-app-table-name common-lisp:null))
   (s3reference-data-source-description
    (common-lisp:error ":s3reference-data-source-description is required")
    :type
    (common-lisp:or s3reference-data-source-description common-lisp:null))
   (reference-schema common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-data-source-description
                    'make-reference-data-source-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source-description))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSourceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-schema))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-data-source-descriptions ()
   '(trivial-types:proper-list reference-data-source-description))
 (common-lisp:defun |make-reference-data-source-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reference-data-source-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reference-data-source-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-reference-data-source-update-"))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or id common-lisp:null))
   (table-name-update common-lisp:nil :type
    (common-lisp:or in-app-table-name common-lisp:null))
   (s3reference-data-source-update common-lisp:nil :type
    (common-lisp:or s3reference-data-source-update common-lisp:null))
   (reference-schema-update common-lisp:nil :type
    (common-lisp:or source-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reference-data-source-update
                    'make-reference-data-source-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name-update))
      (common-lisp:list
       (common-lisp:cons "TableNameUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3reference-data-source-update))
      (common-lisp:list
       (common-lisp:cons "S3ReferenceDataSourceUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-schema-update))
      (common-lisp:list
       (common-lisp:cons "ReferenceSchemaUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-data-source-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reference-data-source-updates ()
   '(trivial-types:proper-list reference-data-source-update))
 (common-lisp:defun |make-reference-data-source-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reference-data-source-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-in-use-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-in-use-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'make-resource-in-use-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-in-use-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-in-use-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-in-use-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-not-found-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-not-found-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'make-resource-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-not-found-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-not-found-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-not-found-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-provisioned-throughput-exceeded-exception
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resource-provisioned-throughput-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-provisioned-throughput-exceeded-exception
                    'make-resource-provisioned-throughput-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-provisioned-throughput-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-provisioned-throughput-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-provisioned-throughput-exceeded-exception))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3reference-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3reference-data-source-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key (common-lisp:error ":file-key is required") :type
    (common-lisp:or file-key common-lisp:null))
   (reference-role-arn (common-lisp:error ":reference-role-arn is required")
    :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source 'make-s3reference-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-role-arn))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3reference-data-source-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3reference-data-source-description-"))
   (bucket-arn (common-lisp:error ":bucket-arn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key (common-lisp:error ":file-key is required") :type
    (common-lisp:or file-key common-lisp:null))
   (reference-role-arn (common-lisp:error ":reference-role-arn is required")
    :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source-description
                    'make-s3reference-data-source-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key))
      (common-lisp:list
       (common-lisp:cons "FileKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-role-arn))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3reference-data-source-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3reference-data-source-update-"))
   (bucket-arnupdate common-lisp:nil :type
    (common-lisp:or bucket-arn common-lisp:null))
   (file-key-update common-lisp:nil :type
    (common-lisp:or file-key common-lisp:null))
   (reference-role-arnupdate common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3reference-data-source-update
                    'make-s3reference-data-source-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arnupdate))
      (common-lisp:list
       (common-lisp:cons "BucketARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-key-update))
      (common-lisp:list
       (common-lisp:cons "FileKeyUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-role-arnupdate))
      (common-lisp:list
       (common-lisp:cons "ReferenceRoleARNUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3reference-data-source-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-unavailable-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-unavailable-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'make-service-unavailable-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-unavailable-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-unavailable-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-unavailable-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-schema-"))
   (record-format (common-lisp:error ":record-format is required") :type
    (common-lisp:or record-format common-lisp:null))
   (record-encoding common-lisp:nil :type
    (common-lisp:or record-encoding common-lisp:null))
   (record-columns (common-lisp:error ":record-columns is required") :type
    (common-lisp:or record-columns common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-schema 'make-source-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-format))
      (common-lisp:list
       (common-lisp:cons "RecordFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-encoding))
      (common-lisp:list
       (common-lisp:cons "RecordEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-columns))
      (common-lisp:list
       (common-lisp:cons "RecordColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (input-configurations
    (common-lisp:error ":input-configurations is required") :type
    (common-lisp:or input-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-application-request
                    'make-start-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-configurations))
      (common-lisp:list
       (common-lisp:cons "InputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-application-response-")))
 (common-lisp:export
  (common-lisp:list 'start-application-response
                    'make-start-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-application-request 'make-stop-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-application-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-application-response
                    'make-stop-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-application-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unable-to-detect-schema-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-unable-to-detect-schema-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (raw-input-records common-lisp:nil :type
    (common-lisp:or raw-input-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unable-to-detect-schema-exception
                    'make-unable-to-detect-schema-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unable-to-detect-schema-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unable-to-detect-schema-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-input-records))
      (common-lisp:list
       (common-lisp:cons "RawInputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unable-to-detect-schema-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (application-name (common-lisp:error ":application-name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-application-version-id
    (common-lisp:error ":current-application-version-id is required") :type
    (common-lisp:or application-version-id common-lisp:null))
   (application-update (common-lisp:error ":application-update is required")
    :type (common-lisp:or application-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-application-version-id))
      (common-lisp:list
       (common-lisp:cons "CurrentApplicationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-update))
      (common-lisp:list
       (common-lisp:cons "ApplicationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-")))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun add-application-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id cloud-watch-logging-option)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     cloud-watch-logging-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-cloud-watch-logging-option-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "AddApplicationCloudWatchLoggingOption" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-application-cloud-watch-logging-option))
(common-lisp:progn
 (common-lisp:defun add-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id input)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-application-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "AddApplicationInput" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-application-input))
(common-lisp:progn
 (common-lisp:defun add-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id output)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     output))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-application-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "AddApplicationOutput" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-application-output))
(common-lisp:progn
 (common-lisp:defun add-application-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id reference-data-source)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     reference-data-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-application-reference-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "AddApplicationReferenceDataSource" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-application-reference-data-source))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name application-description
                     inputs outputs cloud-watch-logging-options
                     application-code)
   (common-lisp:declare
    (common-lisp:ignorable application-name application-description inputs
     outputs cloud-watch-logging-options application-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "CreateApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name create-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable application-name create-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-application-cloud-watch-logging-option
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id
                     cloud-watch-logging-option-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     cloud-watch-logging-option-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-cloud-watch-logging-option-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteApplicationCloudWatchLoggingOption" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-application-cloud-watch-logging-option))
(common-lisp:progn
 (common-lisp:defun delete-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id output-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     output-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-output-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteApplicationOutput" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-application-output))
(common-lisp:progn
 (common-lisp:defun delete-application-reference-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id reference-id)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     reference-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-application-reference-data-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteApplicationReferenceDataSource" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-application-reference-data-source))
(common-lisp:progn
 (common-lisp:defun describe-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-application))
(common-lisp:progn
 (common-lisp:defun discover-input-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn role-arn
                     input-starting-position-configuration)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn role-arn
     input-starting-position-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-discover-input-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "DiscoverInputSchema" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'discover-input-schema))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit exclusive-start-application-name)
   (common-lisp:declare
    (common-lisp:ignorable limit exclusive-start-application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "ListApplications" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun start-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name input-configurations)
   (common-lisp:declare
    (common-lisp:ignorable application-name input-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "StartApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'start-application))
(common-lisp:progn
 (common-lisp:defun stop-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "StopApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'stop-application))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-application-version-id application-update)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-application-version-id
     application-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesisanalytics-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateApplication" "2015-08-14"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-application))

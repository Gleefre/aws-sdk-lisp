;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lambda/api
  (:use)
  (:nicknames #:aws/lambda)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lambda/api)
(common-lisp:progn
 (common-lisp:defclass lambda-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "lambda"))
 (common-lisp:export 'lambda-request))
(common-lisp:progn
 (common-lisp:define-condition lambda-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lambda-error))
(common-lisp:defvar *error-map*
  '(("CodeStorageExceededException" . code-storage-exceeded-exception)
    ("EC2AccessDeniedException" . ec2access-denied-exception)
    ("EC2ThrottledException" . ec2throttled-exception)
    ("EC2UnexpectedException" . ec2unexpected-exception)
    ("ENILimitReachedException" . enilimit-reached-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestContentException" . invalid-request-content-exception)
    ("InvalidRuntimeException" . invalid-runtime-exception)
    ("InvalidSecurityGroupIDException" . invalid-security-group-idexception)
    ("InvalidSubnetIDException" . invalid-subnet-idexception)
    ("InvalidZipFileException" . invalid-zip-file-exception)
    ("KMSAccessDeniedException" . kmsaccess-denied-exception)
    ("KMSDisabledException" . kmsdisabled-exception)
    ("KMSInvalidStateException" . kmsinvalid-state-exception)
    ("KMSNotFoundException" . kmsnot-found-exception)
    ("PolicyLengthExceededException" . policy-length-exceeded-exception)
    ("RequestTooLargeException" . request-too-large-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceException" . service-exception)
    ("SubnetIPAddressLimitReachedException"
     . subnet-ipaddress-limit-reached-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnsupportedMediaTypeException" . unsupported-media-type-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-limit-"))
   (total-code-size common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (code-size-unzipped common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (code-size-zipped common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (concurrent-executions common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-limit 'make-account-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-code-size))
      (common-lisp:list
       (common-lisp:cons "TotalCodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size-unzipped))
      (common-lisp:list
       (common-lisp:cons "CodeSizeUnzipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size-zipped))
      (common-lisp:list
       (common-lisp:cons "CodeSizeZipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-usage-"))
   (total-code-size common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (function-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-usage 'make-account-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-code-size))
      (common-lisp:list
       (common-lisp:cons "TotalCodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-count))
      (common-lisp:list
       (common-lisp:cons "FunctionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-usage))
   common-lisp:nil))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-permission-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (statement-id (common-lisp:error ":statement-id is required") :type
    (common-lisp:or statement-id common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or action common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (source-account common-lisp:nil :type
    (common-lisp:or source-owner common-lisp:null))
   (event-source-token common-lisp:nil :type
    (common-lisp:or event-source-token common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-permission-request 'make-add-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "SourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-token))
      (common-lisp:list
       (common-lisp:cons "EventSourceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-permission-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-permission-response-"))
   (statement common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-permission-response 'make-add-permission-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-permission-response))
   common-lisp:nil))
(common-lisp:deftype alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (alias-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-alias-configuration-"))
   (alias-arn common-lisp:nil :type
    (common-lisp:or function-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or alias common-lisp:null))
   (function-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alias-configuration 'make-alias-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-arn))
      (common-lisp:list
       (common-lisp:cons "AliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alias-list ()
   '(trivial-types:proper-list alias-configuration))
 (common-lisp:defun |make-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype batch-size () 'common-lisp:integer)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype blob-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition code-storage-exceeded-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       code-storage-exceeded-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       code-storage-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'code-storage-exceeded-exception
                    'code-storage-exceeded-exception-type
                    'code-storage-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-alias-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or alias common-lisp:null))
   (function-version (common-lisp:error ":function-version is required") :type
    (common-lisp:or version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-source-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-source-mapping-request-"))
   (event-source-arn (common-lisp:error ":event-source-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (batch-size common-lisp:nil :type
    (common-lisp:or batch-size common-lisp:null))
   (starting-position (common-lisp:error ":starting-position is required")
    :type (common-lisp:or event-source-position common-lisp:null))
   (starting-position-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-source-mapping-request
                    'make-create-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-source-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-position-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartingPositionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-function-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (runtime (common-lisp:error ":runtime is required") :type
    (common-lisp:or runtime common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (handler (common-lisp:error ":handler is required") :type
    (common-lisp:or handler common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or function-code common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (memory-size common-lisp:nil :type
    (common-lisp:or memory-size common-lisp:null))
   (publish common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (dead-letter-config common-lisp:nil :type
    (common-lisp:or dead-letter-config common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment common-lisp:null))
   (kmskey-arn common-lisp:nil :type
    (common-lisp:or kmskey-arn common-lisp:null))
   (tracing-config common-lisp:nil :type
    (common-lisp:or tracing-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-function-request 'make-create-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "Publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dead-letter-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-dead-letter-config-"))
   (target-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dead-letter-config 'make-dead-letter-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dead-letter-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-alias-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-alias-request 'make-delete-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-source-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-source-mapping-request-"))
   (uuid (common-lisp:error ":uuid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-source-mapping-request
                    'make-delete-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-function-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-function-request 'make-delete-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition ec2access-denied-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       ec2access-denied-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ec2access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2access-denied-exception
                    'ec2access-denied-exception-type
                    'ec2access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2throttled-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       ec2throttled-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ec2throttled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ec2throttled-exception 'ec2throttled-exception-type
                    'ec2throttled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ec2unexpected-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       ec2unexpected-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ec2unexpected-exception-message)
      (ec2error-code :initarg :ec2error-code :initform common-lisp:nil :reader
       ec2unexpected-exception-ec2error-code)))
 (common-lisp:export
  (common-lisp:list 'ec2unexpected-exception 'ec2unexpected-exception-type
                    'ec2unexpected-exception-message
                    'ec2unexpected-exception-ec2error-code)))
(common-lisp:progn
 (common-lisp:define-condition enilimit-reached-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       enilimit-reached-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       enilimit-reached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'enilimit-reached-exception
                    'enilimit-reached-exception-type
                    'enilimit-reached-exception-message)))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (environment (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-"))
   (variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null)))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-error-"))
   (error-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-error 'make-environment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-response-"))
   (variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or environment-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-response 'make-environment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-response))
   common-lisp:nil))
(common-lisp:deftype environment-variable-name () 'common-lisp:string)
(common-lisp:deftype environment-variable-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-variables () 'common-lisp:hash-table)
 (common-lisp:defun |make-environment-variables|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (event-source-mapping-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-source-mapping-configuration-"))
   (uuid common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (batch-size common-lisp:nil :type
    (common-lisp:or batch-size common-lisp:null))
   (event-source-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (function-arn common-lisp:nil :type
    (common-lisp:or function-arn common-lisp:null))
   (last-modified common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (last-processing-result common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state-transition-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-source-mapping-configuration
                    'make-event-source-mapping-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-source-mapping-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-source-mapping-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uuid))
      (common-lisp:list
       (common-lisp:cons "UUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-processing-result))
      (common-lisp:list
       (common-lisp:cons "LastProcessingResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-transition-reason))
      (common-lisp:list
       (common-lisp:cons "StateTransitionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-source-mapping-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-source-mappings-list ()
   '(trivial-types:proper-list event-source-mapping-configuration))
 (common-lisp:defun |make-event-source-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-source-mapping-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-source-position () 'common-lisp:string)
(common-lisp:deftype event-source-token () 'common-lisp:string)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (function-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-function-code-"))
   (zip-file common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or s3key common-lisp:null))
   (s3object-version common-lisp:nil :type
    (common-lisp:or s3object-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'function-code 'make-function-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (function-code-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-function-code-location-"))
   (repository-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (location common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'function-code-location 'make-function-code-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-code-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-code-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-type))
      (common-lisp:list
       (common-lisp:cons "RepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-code-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (function-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-function-configuration-"))
   (function-name common-lisp:nil :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (function-arn common-lisp:nil :type
    (common-lisp:or name-spaced-function-arn common-lisp:null))
   (runtime common-lisp:nil :type (common-lisp:or runtime common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (handler common-lisp:nil :type (common-lisp:or handler common-lisp:null))
   (code-size common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (memory-size common-lisp:nil :type
    (common-lisp:or memory-size common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (code-sha256 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config-response common-lisp:null))
   (dead-letter-config common-lisp:nil :type
    (common-lisp:or dead-letter-config common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment-response common-lisp:null))
   (kmskey-arn common-lisp:nil :type
    (common-lisp:or kmskey-arn common-lisp:null))
   (tracing-config common-lisp:nil :type
    (common-lisp:or tracing-config-response common-lisp:null))
   (master-arn common-lisp:nil :type
    (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'function-configuration 'make-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-arn))
      (common-lisp:list
       (common-lisp:cons "MasterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype function-list ()
   '(trivial-types:proper-list function-configuration))
 (common-lisp:defun |make-function-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype function-name () 'common-lisp:string)
(common-lisp:deftype function-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-settings-request-")))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-request
                    'make-get-account-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-settings-response-"))
   (account-limit common-lisp:nil :type
    (common-lisp:or account-limit common-lisp:null))
   (account-usage common-lisp:nil :type
    (common-lisp:or account-usage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-response
                    'make-get-account-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-limit))
      (common-lisp:list
       (common-lisp:cons "AccountLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-usage))
      (common-lisp:list
       (common-lisp:cons "AccountUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-alias-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-alias-request 'make-get-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-source-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-source-mapping-request-"))
   (uuid (common-lisp:error ":uuid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-source-mapping-request
                    'make-get-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-function-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-function-configuration-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-function-configuration-request
                    'make-get-function-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-function-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-function-request 'make-get-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-function-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-function-response-"))
   (configuration common-lisp:nil :type
    (common-lisp:or function-configuration common-lisp:null))
   (code common-lisp:nil :type
    (common-lisp:or function-code-location common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-function-response 'make-get-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-response-"))
   (policy common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:deftype handler () 'common-lisp:string)
(common-lisp:deftype http-status () 'common-lisp:integer)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-parameter-value-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-type
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-content-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-request-content-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-request-content-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-content-exception
                    'invalid-request-content-exception-type
                    'invalid-request-content-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-runtime-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-runtime-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-runtime-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-runtime-exception 'invalid-runtime-exception-type
                    'invalid-runtime-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-security-group-idexception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-security-group-idexception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-security-group-idexception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-security-group-idexception
                    'invalid-security-group-idexception-type
                    'invalid-security-group-idexception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet-idexception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-subnet-idexception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-subnet-idexception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-subnet-idexception
                    'invalid-subnet-idexception-type
                    'invalid-subnet-idexception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-zip-file-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       invalid-zip-file-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-zip-file-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-zip-file-exception
                    'invalid-zip-file-exception-type
                    'invalid-zip-file-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (invocation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-invocation-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (invocation-type common-lisp:nil :type
    (common-lisp:or invocation-type common-lisp:null))
   (log-type common-lisp:nil :type (common-lisp:or log-type common-lisp:null))
   (client-context common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payload common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invocation-request 'make-invocation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:cons "X-Amz-Invocation-Type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:cons "X-Amz-Log-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-context))
      (common-lisp:cons "X-Amz-Client-Context"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invocation-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload)))
(common-lisp:progn
 (common-lisp:defstruct
     (invocation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-invocation-response-"))
   (status-code common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (function-error common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (log-result common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (payload common-lisp:nil :type (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invocation-response 'make-invocation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-error))
      (common-lisp:cons "X-Amz-Function-Error" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-result))
      (common-lisp:cons "X-Amz-Log-Result" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invocation-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload)))
(common-lisp:deftype invocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (invoke-async-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-invoke-async-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (invoke-args (common-lisp:error ":invoke-args is required") :type
    (common-lisp:or blob-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invoke-async-request 'make-invoke-async-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoke-args))
      (common-lisp:list
       (common-lisp:cons "InvokeArgs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invoke-async-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'invoke-args)))
(common-lisp:progn
 (common-lisp:defstruct
     (invoke-async-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-invoke-async-response-"))
   (status common-lisp:nil :type
    (common-lisp:or http-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invoke-async-response 'make-invoke-async-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-async-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-async-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-async-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition kmsaccess-denied-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsaccess-denied-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsaccess-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsaccess-denied-exception
                    'kmsaccess-denied-exception-type
                    'kmsaccess-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsdisabled-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsdisabled-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsdisabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsdisabled-exception 'kmsdisabled-exception-type
                    'kmsdisabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-state-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsinvalid-state-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-exception
                    'kmsinvalid-state-exception-type
                    'kmsinvalid-state-exception-message)))
(common-lisp:deftype kmskey-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition kmsnot-found-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       kmsnot-found-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       kmsnot-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsnot-found-exception 'kmsnot-found-exception-type
                    'kmsnot-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (function-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or max-list-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-response-"))
   (next-marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (aliases common-lisp:nil :type
    (common-lisp:or alias-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-source-mappings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-source-mappings-request-"))
   (event-source-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (function-name common-lisp:nil :type
    (common-lisp:or function-name common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or max-list-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-source-mappings-request
                    'make-list-event-source-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-source-mappings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-source-mappings-response-"))
   (next-marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-source-mappings common-lisp:nil :type
    (common-lisp:or event-source-mappings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-source-mappings-response
                    'make-list-event-source-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-source-mappings))
      (common-lisp:list
       (common-lisp:cons "EventSourceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-source-mappings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-functions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-functions-request-"))
   (master-region common-lisp:nil :type
    (common-lisp:or master-region common-lisp:null))
   (function-version common-lisp:nil :type
    (common-lisp:or function-version common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or max-list-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-functions-request 'make-list-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-functions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-functions-response-"))
   (next-marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (functions common-lisp:nil :type
    (common-lisp:or function-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-functions-response 'make-list-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "Functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-request-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-versions-by-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-versions-by-function-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or namespaced-function-name common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or max-list-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-versions-by-function-request
                    'make-list-versions-by-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-versions-by-function-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-versions-by-function-response-"))
   (next-marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (versions common-lisp:nil :type
    (common-lisp:or function-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-versions-by-function-response
                    'make-list-versions-by-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-by-function-response))
   common-lisp:nil))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype master-region () 'common-lisp:string)
(common-lisp:deftype max-list-items () 'common-lisp:integer)
(common-lisp:deftype memory-size () 'common-lisp:integer)
(common-lisp:deftype name-spaced-function-arn () 'common-lisp:string)
(common-lisp:deftype namespaced-function-name () 'common-lisp:string)
(common-lisp:deftype namespaced-statement-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-length-exceeded-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       policy-length-exceeded-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       policy-length-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-length-exceeded-exception
                    'policy-length-exceeded-exception-type
                    'policy-length-exceeded-exception-message)))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (publish-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-version-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (code-sha256 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-version-request 'make-publish-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-version-request))
   common-lisp:nil))
(common-lisp:deftype qualifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-permission-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (statement-id (common-lisp:error ":statement-id is required") :type
    (common-lisp:or namespaced-statement-id common-lisp:null))
   (qualifier common-lisp:nil :type
    (common-lisp:or qualifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-permission-request
                    'make-remove-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-too-large-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       request-too-large-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       request-too-large-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-too-large-exception
                    'request-too-large-exception-type
                    'request-too-large-exception-message)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       resource-conflict-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-type
                    'resource-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       resource-not-found-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-type
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype runtime () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       service-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-type
                    'service-exception-message)))
(common-lisp:deftype source-owner () 'common-lisp:string)
(common-lisp:deftype statement-id () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition subnet-ipaddress-limit-reached-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       subnet-ipaddress-limit-reached-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       subnet-ipaddress-limit-reached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'subnet-ipaddress-limit-reached-exception
                    'subnet-ipaddress-limit-reached-exception-type
                    'subnet-ipaddress-limit-reached-exception-message)))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or function-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype throttle-reason () 'common-lisp:string)
(common-lisp:deftype timeout () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (lambda-error)
     ((retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader too-many-requests-exception-retry-after-seconds)
      (type :initarg :type :initform common-lisp:nil :reader
       too-many-requests-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       too-many-requests-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-retry-after-seconds
                    'too-many-requests-exception-type
                    'too-many-requests-exception-message
                    'too-many-requests-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (tracing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-tracing-config-"))
   (mode common-lisp:nil :type (common-lisp:or tracing-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tracing-config 'make-tracing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tracing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tracing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tracing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tracing-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tracing-config-response-"))
   (mode common-lisp:nil :type (common-lisp:or tracing-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tracing-config-response 'make-tracing-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tracing-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tracing-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tracing-config-response))
   common-lisp:nil))
(common-lisp:deftype tracing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-media-type-exception
     (lambda-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       unsupported-media-type-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       unsupported-media-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-media-type-exception
                    'unsupported-media-type-exception-type
                    'unsupported-media-type-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or function-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-alias-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or alias common-lisp:null))
   (function-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-alias-request 'make-update-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "FunctionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-source-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-source-mapping-request-"))
   (uuid (common-lisp:error ":uuid is required") :type
    (common-lisp:or string common-lisp:null))
   (function-name common-lisp:nil :type
    (common-lisp:or function-name common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (batch-size common-lisp:nil :type
    (common-lisp:or batch-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-source-mapping-request
                    'make-update-event-source-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-source-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-source-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-source-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-function-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-function-code-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (zip-file common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or s3key common-lisp:null))
   (s3object-version common-lisp:nil :type
    (common-lisp:or s3object-version common-lisp:null))
   (publish common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-function-code-request
                    'make-update-function-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "Publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-function-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-function-configuration-request-"))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or function-name common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (handler common-lisp:nil :type (common-lisp:or handler common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (memory-size common-lisp:nil :type
    (common-lisp:or memory-size common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment common-lisp:null))
   (runtime common-lisp:nil :type (common-lisp:or runtime common-lisp:null))
   (dead-letter-config common-lisp:nil :type
    (common-lisp:or dead-letter-config common-lisp:null))
   (kmskey-arn common-lisp:nil :type
    (common-lisp:or kmskey-arn common-lisp:null))
   (tracing-config common-lisp:nil :type
    (common-lisp:or tracing-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-function-configuration-request
                    'make-update-function-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-configuration-request))
   common-lisp:nil))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-config-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-config-response-"))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-config-response 'make-vpc-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config-response))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name statement-id action
                     principal source-arn source-account event-source-token
                     qualifier)
   (common-lisp:declare
    (common-lisp:ignorable function-name statement-id action principal
     source-arn source-account event-source-token qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "AddPermission"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-permission))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name function-version
                     description)
   (common-lisp:declare
    (common-lisp:ignorable function-name name function-version description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "CreateAlias"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-source-arn function-name enabled
                     batch-size starting-position starting-position-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable event-source-arn function-name enabled batch-size
     starting-position starting-position-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-source-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-03-31/event-source-mappings/"
                                                        "CreateEventSourceMapping"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun create-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name runtime role handler code
                     description timeout memory-size publish vpc-config
                     dead-letter-config environment kmskey-arn tracing-config
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable function-name runtime role handler code description
     timeout memory-size publish vpc-config dead-letter-config environment
     kmskey-arn tracing-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-03-31/functions"
                                                        "CreateFunction"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-function))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name)
   (common-lisp:declare (common-lisp:ignorable function-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAlias"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uuid)
   (common-lisp:declare (common-lisp:ignorable uuid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-source-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/event-source-mappings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'uuid))))
                                                        "DeleteEventSourceMapping"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun delete-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "DeleteFunction"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-function))
(common-lisp:progn
 (common-lisp:defun get-account-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lambda-request :method "GET" :path
                                "/2016-08-19/account-settings/" :params
                                `(("Action" ,@"GetAccountSettings")
                                  ("Version" ,@"2015-03-31"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-settings))
(common-lisp:progn
 (common-lisp:defun get-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name)
   (common-lisp:declare (common-lisp:ignorable function-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAlias"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-alias))
(common-lisp:progn
 (common-lisp:defun get-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uuid)
   (common-lisp:declare (common-lisp:ignorable uuid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-source-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/event-source-mappings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'uuid))))
                                                        "GetEventSourceMapping"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun get-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunction"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-function))
(common-lisp:progn
 (common-lisp:defun get-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-function-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetFunctionConfiguration"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-function-configuration))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name qualifier)
   (common-lisp:declare (common-lisp:ignorable function-name qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "GetPolicy"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun invoke
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name invocation-type log-type
                     client-context payload qualifier)
   (common-lisp:declare
    (common-lisp:ignorable function-name invocation-type log-type
     client-context payload qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invocation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/invocations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "Invoke" "2015-03-31"))
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'invoke))
(common-lisp:progn
 (common-lisp:defun invoke-async
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name invoke-args)
   (common-lisp:declare (common-lisp:ignorable function-name invoke-args))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invoke-async-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2014-11-13/functions/~A/invoke-async/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "InvokeAsync"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'invoke-async))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name function-version marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable function-name function-version marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListAliases"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-event-source-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-source-arn function-name marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable event-source-arn function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-event-source-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-03-31/event-source-mappings/"
                                                        "ListEventSourceMappings"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-source-mappings))
(common-lisp:progn
 (common-lisp:defun list-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key master-region function-version marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable master-region function-version marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-functions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-03-31/functions/"
                                                        "ListFunctions"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-functions))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource)
   (common-lisp:declare (common-lisp:ignorable resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-03-31/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "ListTags"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun list-versions-by-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable function-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-versions-by-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "ListVersionsByFunction"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-versions-by-function))
(common-lisp:progn
 (common-lisp:defun publish-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name code-sha256 description)
   (common-lisp:declare
    (common-lisp:ignorable function-name code-sha256 description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "PublishVersion"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'publish-version))
(common-lisp:progn
 (common-lisp:defun remove-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name statement-id qualifier)
   (common-lisp:declare
    (common-lisp:ignorable function-name statement-id qualifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'statement-id))))
                                                        "RemovePermission"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-permission))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource tags)
   (common-lisp:declare (common-lisp:ignorable resource tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-03-31/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "TagResource"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-03-31/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "UntagResource"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name name function-version
                     description)
   (common-lisp:declare
    (common-lisp:ignorable function-name name function-version description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateAlias"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-alias))
(common-lisp:progn
 (common-lisp:defun update-event-source-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uuid function-name enabled batch-size)
   (common-lisp:declare
    (common-lisp:ignorable uuid function-name enabled batch-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-event-source-mapping-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/event-source-mappings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'uuid))))
                                                        "UpdateEventSourceMapping"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-source-mapping))
(common-lisp:progn
 (common-lisp:defun update-function-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name zip-file s3bucket s3key
                     s3object-version publish dry-run)
   (common-lisp:declare
    (common-lisp:ignorable function-name zip-file s3bucket s3key
     s3object-version publish dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-function-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/code"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "UpdateFunctionCode"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-function-code))
(common-lisp:progn
 (common-lisp:defun update-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key function-name role handler description
                     timeout memory-size vpc-config environment runtime
                     dead-letter-config kmskey-arn tracing-config)
   (common-lisp:declare
    (common-lisp:ignorable function-name role handler description timeout
     memory-size vpc-config environment runtime dead-letter-config kmskey-arn
     tracing-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-function-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lambda-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-03-31/functions/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-name))))
                                                        "UpdateFunctionConfiguration"
                                                        "2015-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-function-configuration))

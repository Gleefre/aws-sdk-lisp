;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/logs/api
  (:use)
  (:nicknames #:aws/logs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/logs/api)
(common-lisp:progn
 (common-lisp:defclass logs-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "logs"))
 (common-lisp:export 'logs-request))
(common-lisp:progn
 (common-lisp:define-condition logs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'logs-error))
(common-lisp:deftype access-policy () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-export-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-export-task-request-"))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or export-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-export-task-request
                    'make-cancel-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-export-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-export-task-request-"))
   (task-name common-lisp:nil :type
    (common-lisp:or export-task-name common-lisp:null))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name-prefix common-lisp:nil :type
    (common-lisp:or log-stream-name common-lisp:null))
   (from (common-lisp:error ":from is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (to (common-lisp:error ":to is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or export-destination-bucket common-lisp:null))
   (destination-prefix common-lisp:nil :type
    (common-lisp:or export-destination-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-export-task-request
                    'make-create-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-name))
      (common-lisp:list
       (common-lisp:cons "taskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-prefix))
      (common-lisp:list
       (common-lisp:cons "destinationPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-export-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-export-task-response-"))
   (task-id common-lisp:nil :type
    (common-lisp:or export-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-export-task-response
                    'make-create-export-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-log-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-log-group-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-log-group-request 'make-create-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-log-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-log-stream-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name (common-lisp:error ":logstreamname is required") :type
    (common-lisp:or log-stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-log-stream-request
                    'make-create-log-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition data-already-accepted-exception
     (logs-error)
     ((expected-sequence-token :initarg :expected-sequence-token :initform
       common-lisp:nil :reader
       data-already-accepted-exception-expected-sequence-token)))
 (common-lisp:export
  (common-lisp:list 'data-already-accepted-exception
                    'data-already-accepted-exception-expected-sequence-token)))
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype default-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-destination-request-"))
   (destination-name (common-lisp:error ":destinationname is required") :type
    (common-lisp:or destination-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-destination-request
                    'make-delete-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-log-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-log-group-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-log-group-request 'make-delete-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-log-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-log-stream-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name (common-lisp:error ":logstreamname is required") :type
    (common-lisp:or log-stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-log-stream-request
                    'make-delete-log-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-metric-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-metric-filter-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-name (common-lisp:error ":filtername is required") :type
    (common-lisp:or filter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-metric-filter-request
                    'make-delete-metric-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-metric-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-metric-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-metric-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-retention-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-retention-policy-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-retention-policy-request
                    'make-delete-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscription-filter-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-name (common-lisp:error ":filtername is required") :type
    (common-lisp:or filter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-filter-request
                    'make-delete-subscription-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-filter-request))
   common-lisp:nil))
(common-lisp:deftype descending () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-destinations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-destinations-request-"))
   (destination-name-prefix common-lisp:nil :type
    (common-lisp:or destination-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-destinations-request
                    'make-describe-destinations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-name-prefix))
      (common-lisp:list
       (common-lisp:cons "DestinationNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-destinations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-destinations-response-"))
   (destinations common-lisp:nil :type
    (common-lisp:or destinations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-destinations-response
                    'make-describe-destinations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-request-"))
   (task-id common-lisp:nil :type
    (common-lisp:or export-task-id common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or export-task-status-code common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-request
                    'make-describe-export-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "statusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-response-"))
   (export-tasks common-lisp:nil :type
    (common-lisp:or export-tasks common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-response
                    'make-describe-export-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-tasks))
      (common-lisp:list
       (common-lisp:cons "exportTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   common-lisp:nil))
(common-lisp:deftype describe-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-log-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-log-groups-request-"))
   (log-group-name-prefix common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-log-groups-request
                    'make-describe-log-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-group-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logGroupNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-log-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-log-groups-response-"))
   (log-groups common-lisp:nil :type
    (common-lisp:or log-groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-log-groups-response
                    'make-describe-log-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-groups))
      (common-lisp:list
       (common-lisp:cons "logGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-log-streams-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-log-streams-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name-prefix common-lisp:nil :type
    (common-lisp:or log-stream-name common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null))
   (descending common-lisp:nil :type
    (common-lisp:or descending common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-log-streams-request
                    'make-describe-log-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-stream-name-prefix))
      (common-lisp:list
       (common-lisp:cons "logStreamNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'descending))
      (common-lisp:list
       (common-lisp:cons "descending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-log-streams-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-log-streams-response-"))
   (log-streams common-lisp:nil :type
    (common-lisp:or log-streams common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-log-streams-response
                    'make-describe-log-streams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-streams))
      (common-lisp:list
       (common-lisp:cons "logStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-streams-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-metric-filters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-metric-filters-request-"))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-name-prefix common-lisp:nil :type
    (common-lisp:or filter-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-limit common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (metric-namespace common-lisp:nil :type
    (common-lisp:or metric-namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-metric-filters-request
                    'make-describe-metric-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name-prefix))
      (common-lisp:list
       (common-lisp:cons "filterNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-metric-filters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-metric-filters-response-"))
   (metric-filters common-lisp:nil :type
    (common-lisp:or metric-filters common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-metric-filters-response
                    'make-describe-metric-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-filters))
      (common-lisp:list
       (common-lisp:cons "metricFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metric-filters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subscription-filters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subscription-filters-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-name-prefix common-lisp:nil :type
    (common-lisp:or filter-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subscription-filters-request
                    'make-describe-subscription-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name-prefix))
      (common-lisp:list
       (common-lisp:cons "filterNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subscription-filters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subscription-filters-response-"))
   (subscription-filters common-lisp:nil :type
    (common-lisp:or subscription-filters common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subscription-filters-response
                    'make-describe-subscription-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-filters))
      (common-lisp:list
       (common-lisp:cons "subscriptionFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscription-filters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (destination-name common-lisp:nil :type
    (common-lisp:or destination-name common-lisp:null))
   (target-arn common-lisp:nil :type
    (common-lisp:or target-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (access-policy common-lisp:nil :type
    (common-lisp:or access-policy common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy))
      (common-lisp:list
       (common-lisp:cons "accessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:deftype destination-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destinations () '(trivial-types:proper-list destination))
 (common-lisp:defun |make-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype distribution () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:deftype event-message () 'common-lisp:string)
(common-lisp:deftype event-number () 'common-lisp:integer)
(common-lisp:deftype events-limit () 'common-lisp:integer)
(common-lisp:deftype export-destination-bucket () 'common-lisp:string)
(common-lisp:deftype export-destination-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-task-"))
   (task-id common-lisp:nil :type
    (common-lisp:or export-task-id common-lisp:null))
   (task-name common-lisp:nil :type
    (common-lisp:or export-task-name common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (from common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or export-destination-bucket common-lisp:null))
   (destination-prefix common-lisp:nil :type
    (common-lisp:or export-destination-prefix common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or export-task-status common-lisp:null))
   (execution-info common-lisp:nil :type
    (common-lisp:or export-task-execution-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'export-task 'make-export-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-name))
      (common-lisp:list
       (common-lisp:cons "taskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "from"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "to"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-prefix))
      (common-lisp:list
       (common-lisp:cons "destinationPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-info))
      (common-lisp:list
       (common-lisp:cons "executionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-task-execution-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-task-execution-info-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-task-execution-info
                    'make-export-task-execution-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-task-execution-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-task-execution-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "completionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-task-execution-info))
   common-lisp:nil))
(common-lisp:deftype export-task-id () 'common-lisp:string)
(common-lisp:deftype export-task-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-task-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-task-status-"))
   (code common-lisp:nil :type
    (common-lisp:or export-task-status-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or export-task-status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-task-status 'make-export-task-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task-status))
   common-lisp:nil))
(common-lisp:deftype export-task-status-code () 'common-lisp:string)
(common-lisp:deftype export-task-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype export-tasks () '(trivial-types:proper-list export-task))
 (common-lisp:defun |make-export-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype extracted-values () 'common-lisp:hash-table)
 (common-lisp:defun |make-extracted-values|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype filter-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-log-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-log-events-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-names common-lisp:nil :type
    (common-lisp:or input-log-stream-names common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (filter-pattern common-lisp:nil :type
    (common-lisp:or filter-pattern common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or events-limit common-lisp:null))
   (interleaved common-lisp:nil :type
    (common-lisp:or interleaved common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-log-events-request
                    'make-filter-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-names))
      (common-lisp:list
       (common-lisp:cons "logStreamNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interleaved))
      (common-lisp:list
       (common-lisp:cons "interleaved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-log-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-log-events-response-"))
   (events common-lisp:nil :type
    (common-lisp:or filtered-log-events common-lisp:null))
   (searched-log-streams common-lisp:nil :type
    (common-lisp:or searched-log-streams common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-log-events-response
                    'make-filter-log-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searched-log-streams))
      (common-lisp:list
       (common-lisp:cons "searchedLogStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          filter-log-events-response))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filtered-log-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-filtered-log-event-"))
   (log-stream-name common-lisp:nil :type
    (common-lisp:or log-stream-name common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or event-message common-lisp:null))
   (ingestion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filtered-log-event 'make-filtered-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filtered-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filtered-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-time))
      (common-lisp:list
       (common-lisp:cons "ingestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filtered-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filtered-log-events ()
   '(trivial-types:proper-list filtered-log-event))
 (common-lisp:defun |make-filtered-log-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filtered-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-log-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-log-events-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name (common-lisp:error ":logstreamname is required") :type
    (common-lisp:or log-stream-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or events-limit common-lisp:null))
   (start-from-head common-lisp:nil :type
    (common-lisp:or start-from-head common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-log-events-request 'make-get-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-from-head))
      (common-lisp:list
       (common-lisp:cons "startFromHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-log-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-log-events-response-"))
   (events common-lisp:nil :type
    (common-lisp:or output-log-events common-lisp:null))
   (next-forward-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (next-backward-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-log-events-response 'make-get-log-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-forward-token))
      (common-lisp:list
       (common-lisp:cons "nextForwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-backward-token))
      (common-lisp:list
       (common-lisp:cons "nextBackwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-log-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-log-event-"))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or event-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-log-event 'make-input-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-log-events ()
   '(trivial-types:proper-list input-log-event))
 (common-lisp:defun |make-input-log-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype input-log-stream-names ()
   '(trivial-types:proper-list log-stream-name))
 (common-lisp:defun |make-input-log-stream-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype interleaved () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sequence-token-exception
     (logs-error)
     ((expected-sequence-token :initarg :expected-sequence-token :initform
       common-lisp:nil :reader
       invalid-sequence-token-exception-expected-sequence-token)))
 (common-lisp:export
  (common-lisp:list 'invalid-sequence-token-exception
                    'invalid-sequence-token-exception-expected-sequence-token)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-log-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-log-group-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-log-group-request
                    'make-list-tags-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-log-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-log-group-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-log-group-response
                    'make-list-tags-log-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-log-group-response))
   common-lisp:nil))
(common-lisp:deftype log-event-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (log-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-group-"))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (retention-in-days common-lisp:nil :type
    (common-lisp:or days common-lisp:null))
   (metric-filter-count common-lisp:nil :type
    (common-lisp:or filter-count common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (stored-bytes common-lisp:nil :type
    (common-lisp:or stored-bytes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-group 'make-log-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-in-days))
      (common-lisp:list
       (common-lisp:cons "retentionInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-filter-count))
      (common-lisp:list
       (common-lisp:cons "metricFilterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stored-bytes))
      (common-lisp:list
       (common-lisp:cons "storedBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-group))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-groups () '(trivial-types:proper-list log-group))
 (common-lisp:defun |make-log-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (log-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-stream-"))
   (log-stream-name common-lisp:nil :type
    (common-lisp:or log-stream-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (first-event-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-event-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-ingestion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (upload-sequence-token common-lisp:nil :type
    (common-lisp:or sequence-token common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (stored-bytes common-lisp:nil :type
    (common-lisp:or stored-bytes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-stream 'make-log-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-event-timestamp))
      (common-lisp:list
       (common-lisp:cons "firstEventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-event-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastEventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-ingestion-time))
      (common-lisp:list
       (common-lisp:cons "lastIngestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upload-sequence-token))
      (common-lisp:list
       (common-lisp:cons "uploadSequenceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stored-bytes))
      (common-lisp:list
       (common-lisp:cons "storedBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-stream))
   common-lisp:nil))
(common-lisp:deftype log-stream-name () 'common-lisp:string)
(common-lisp:deftype log-stream-searched-completely () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype log-streams () '(trivial-types:proper-list log-stream))
 (common-lisp:defun |make-log-streams|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-stream))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-filter-"))
   (filter-name common-lisp:nil :type
    (common-lisp:or filter-name common-lisp:null))
   (filter-pattern common-lisp:nil :type
    (common-lisp:or filter-pattern common-lisp:null))
   (metric-transformations common-lisp:nil :type
    (common-lisp:or metric-transformations common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-filter 'make-metric-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-transformations))
      (common-lisp:list
       (common-lisp:cons "metricTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-filter-match-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-filter-match-record-"))
   (event-number common-lisp:nil :type
    (common-lisp:or event-number common-lisp:null))
   (event-message common-lisp:nil :type
    (common-lisp:or event-message common-lisp:null))
   (extracted-values common-lisp:nil :type
    (common-lisp:or extracted-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-filter-match-record
                    'make-metric-filter-match-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-filter-match-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-filter-match-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-number))
      (common-lisp:list
       (common-lisp:cons "eventNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-message))
      (common-lisp:list
       (common-lisp:cons "eventMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extracted-values))
      (common-lisp:list
       (common-lisp:cons "extractedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-filter-match-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-filter-matches ()
   '(trivial-types:proper-list metric-filter-match-record))
 (common-lisp:defun |make-metric-filter-matches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metric-filter-match-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-filters ()
   '(trivial-types:proper-list metric-filter))
 (common-lisp:defun |make-metric-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-transformation (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-transformation-"))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (metric-namespace (common-lisp:error ":metricnamespace is required") :type
    (common-lisp:or metric-namespace common-lisp:null))
   (metric-value (common-lisp:error ":metricvalue is required") :type
    (common-lisp:or metric-value common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or default-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-transformation 'make-metric-transformation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-transformation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-transformations ()
   '(trivial-types:proper-list metric-transformation))
 (common-lisp:defun |make-metric-transformations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-transformation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-aborted-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-aborted-exception)))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output-log-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-log-event-"))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or event-message common-lisp:null))
   (ingestion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-log-event 'make-output-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-time))
      (common-lisp:list
       (common-lisp:cons "ingestionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-log-events ()
   '(trivial-types:proper-list output-log-event))
 (common-lisp:defun |make-output-log-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-destination-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-destination-policy-request-"))
   (destination-name (common-lisp:error ":destinationname is required") :type
    (common-lisp:or destination-name common-lisp:null))
   (access-policy (common-lisp:error ":accesspolicy is required") :type
    (common-lisp:or access-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-destination-policy-request
                    'make-put-destination-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy))
      (common-lisp:list
       (common-lisp:cons "accessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-destination-request-"))
   (destination-name (common-lisp:error ":destinationname is required") :type
    (common-lisp:or destination-name common-lisp:null))
   (target-arn (common-lisp:error ":targetarn is required") :type
    (common-lisp:or target-arn common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-destination-request 'make-put-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "destinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-destination-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-destination-response-"))
   (destination common-lisp:nil :type
    (common-lisp:or destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-destination-response 'make-put-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-log-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-log-events-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (log-stream-name (common-lisp:error ":logstreamname is required") :type
    (common-lisp:or log-stream-name common-lisp:null))
   (log-events (common-lisp:error ":logevents is required") :type
    (common-lisp:or input-log-events common-lisp:null))
   (sequence-token common-lisp:nil :type
    (common-lisp:or sequence-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-log-events-request 'make-put-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-events))
      (common-lisp:list
       (common-lisp:cons "logEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence-token))
      (common-lisp:list
       (common-lisp:cons "sequenceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-log-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-log-events-response-"))
   (next-sequence-token common-lisp:nil :type
    (common-lisp:or sequence-token common-lisp:null))
   (rejected-log-events-info common-lisp:nil :type
    (common-lisp:or rejected-log-events-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-log-events-response 'make-put-log-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-sequence-token))
      (common-lisp:list
       (common-lisp:cons "nextSequenceToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-log-events-info))
      (common-lisp:list
       (common-lisp:cons "rejectedLogEventsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-log-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-metric-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-metric-filter-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-name (common-lisp:error ":filtername is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (filter-pattern (common-lisp:error ":filterpattern is required") :type
    (common-lisp:or filter-pattern common-lisp:null))
   (metric-transformations
    (common-lisp:error ":metrictransformations is required") :type
    (common-lisp:or metric-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-metric-filter-request
                    'make-put-metric-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-metric-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-metric-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-transformations))
      (common-lisp:list
       (common-lisp:cons "metricTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-metric-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-retention-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-retention-policy-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (retention-in-days (common-lisp:error ":retentionindays is required") :type
    (common-lisp:or days common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-retention-policy-request
                    'make-put-retention-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-in-days))
      (common-lisp:list
       (common-lisp:cons "retentionInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-subscription-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-subscription-filter-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-name (common-lisp:error ":filtername is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (filter-pattern (common-lisp:error ":filterpattern is required") :type
    (common-lisp:or filter-pattern common-lisp:null))
   (destination-arn (common-lisp:error ":destinationarn is required") :type
    (common-lisp:or destination-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (distribution common-lisp:nil :type
    (common-lisp:or distribution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-subscription-filter-request
                    'make-put-subscription-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-subscription-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-subscription-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-subscription-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rejected-log-events-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-rejected-log-events-info-"))
   (too-new-log-event-start-index common-lisp:nil :type
    (common-lisp:or log-event-index common-lisp:null))
   (too-old-log-event-end-index common-lisp:nil :type
    (common-lisp:or log-event-index common-lisp:null))
   (expired-log-event-end-index common-lisp:nil :type
    (common-lisp:or log-event-index common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rejected-log-events-info 'make-rejected-log-events-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rejected-log-events-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rejected-log-events-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'too-new-log-event-start-index))
      (common-lisp:list
       (common-lisp:cons "tooNewLogEventStartIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'too-old-log-event-end-index))
      (common-lisp:list
       (common-lisp:cons "tooOldLogEventEndIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-log-event-end-index))
      (common-lisp:list
       (common-lisp:cons "expiredLogEventEndIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rejected-log-events-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (searched-log-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-searched-log-stream-"))
   (log-stream-name common-lisp:nil :type
    (common-lisp:or log-stream-name common-lisp:null))
   (searched-completely common-lisp:nil :type
    (common-lisp:or log-stream-searched-completely common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'searched-log-stream 'make-searched-log-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input searched-log-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input searched-log-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'searched-completely))
      (common-lisp:list
       (common-lisp:cons "searchedCompletely"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input searched-log-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype searched-log-streams ()
   '(trivial-types:proper-list searched-log-stream))
 (common-lisp:defun |make-searched-log-streams|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list searched-log-stream))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sequence-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (logs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-unavailable-exception)))
(common-lisp:deftype start-from-head () 'common-lisp:boolean)
(common-lisp:deftype stored-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (subscription-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-filter-"))
   (filter-name common-lisp:nil :type
    (common-lisp:or filter-name common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (filter-pattern common-lisp:nil :type
    (common-lisp:or filter-pattern common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or destination-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (distribution common-lisp:nil :type
    (common-lisp:or distribution common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscription-filter 'make-subscription-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "filterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-filters ()
   '(trivial-types:proper-list subscription-filter))
 (common-lisp:defun |make-subscription-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-log-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-log-group-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-log-group-request 'make-tag-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-log-group-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype test-event-messages ()
   '(trivial-types:proper-list event-message))
 (common-lisp:defun |make-test-event-messages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (test-metric-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-metric-filter-request-"))
   (filter-pattern (common-lisp:error ":filterpattern is required") :type
    (common-lisp:or filter-pattern common-lisp:null))
   (log-event-messages (common-lisp:error ":logeventmessages is required")
    :type (common-lisp:or test-event-messages common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-metric-filter-request
                    'make-test-metric-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-event-messages))
      (common-lisp:list
       (common-lisp:cons "logEventMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-metric-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-metric-filter-response-"))
   (matches common-lisp:nil :type
    (common-lisp:or metric-filter-matches common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-metric-filter-response
                    'make-test-metric-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matches))
      (common-lisp:list
       (common-lisp:cons "matches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-metric-filter-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:integer)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-log-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-log-group-request-"))
   (log-group-name (common-lisp:error ":loggroupname is required") :type
    (common-lisp:or log-group-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-log-group-request 'make-untag-log-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-log-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-log-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-log-group-request))
   common-lisp:nil))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelExportTask"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'cancel-export-task))
(common-lisp:progn
 (common-lisp:defun create-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-name log-group-name
                     log-stream-name-prefix from to destination
                     destination-prefix)
   (common-lisp:declare
    (common-lisp:ignorable task-name log-group-name log-stream-name-prefix from
     to destination destination-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExportTask"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ResourceAlreadyExistsException"
         . resource-already-exists-exception)))))
 (common-lisp:export 'create-export-task))
(common-lisp:progn
 (common-lisp:defun create-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name tags)
   (common-lisp:declare (common-lisp:ignorable log-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLogGroup"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceAlreadyExistsException" . resource-already-exists-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'create-log-group))
(common-lisp:progn
 (common-lisp:defun create-log-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name log-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLogStream"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceAlreadyExistsException" . resource-already-exists-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'create-log-stream))
(common-lisp:progn
 (common-lisp:defun delete-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name)
   (common-lisp:declare (common-lisp:ignorable destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDestination"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'delete-destination))
(common-lisp:progn
 (common-lisp:defun delete-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLogGroup"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'delete-log-group))
(common-lisp:progn
 (common-lisp:defun delete-log-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name log-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLogStream"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'delete-log-stream))
(common-lisp:progn
 (common-lisp:defun delete-metric-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-metric-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMetricFilter"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'delete-metric-filter))
(common-lisp:progn
 (common-lisp:defun delete-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRetentionPolicy"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'delete-retention-policy))
(common-lisp:progn
 (common-lisp:defun delete-subscription-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscription-filter-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSubscriptionFilter"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'delete-subscription-filter))
(common-lisp:progn
 (common-lisp:defun describe-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name-prefix next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable destination-name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-destinations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDestinations"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'describe-destinations))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id status-code next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable task-id status-code next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportTasks"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-log-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name-prefix next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-log-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLogGroups"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'describe-log-groups))
(common-lisp:progn
 (common-lisp:defun describe-log-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name-prefix
                     order-by descending next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-stream-name-prefix order-by
     descending next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-log-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLogStreams"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'describe-log-streams))
(common-lisp:progn
 (common-lisp:defun describe-metric-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name-prefix
                     next-token limit metric-name metric-namespace)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name-prefix next-token limit
     metric-name metric-namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-metric-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetricFilters"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'describe-metric-filters))
(common-lisp:progn
 (common-lisp:defun describe-subscription-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name-prefix
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-subscription-filters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSubscriptionFilters"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'describe-subscription-filters))
(common-lisp:progn
 (common-lisp:defun filter-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-names
                     start-time end-time filter-pattern next-token limit
                     interleaved)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-stream-names start-time end-time
     filter-pattern next-token limit interleaved))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-filter-log-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FilterLogEvents"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'filter-log-events))
(common-lisp:progn
 (common-lisp:defun get-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name start-time
                     end-time next-token limit start-from-head)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-stream-name start-time end-time
     next-token limit start-from-head))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-log-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLogEvents"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'get-log-events))
(common-lisp:progn
 (common-lisp:defun list-tags-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name)
   (common-lisp:declare (common-lisp:ignorable log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsLogGroup"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'list-tags-log-group))
(common-lisp:progn
 (common-lisp:defun put-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name target-arn role-arn)
   (common-lisp:declare
    (common-lisp:ignorable destination-name target-arn role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDestination"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'put-destination))
(common-lisp:progn
 (common-lisp:defun put-destination-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name access-policy)
   (common-lisp:declare (common-lisp:ignorable destination-name access-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-destination-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDestinationPolicy"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'put-destination-policy))
(common-lisp:progn
 (common-lisp:defun put-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name log-stream-name log-events
                     sequence-token)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name log-stream-name log-events
     sequence-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-log-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLogEvents"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("InvalidSequenceTokenException" . invalid-sequence-token-exception)
        ("DataAlreadyAcceptedException" . data-already-accepted-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'put-log-events))
(common-lisp:progn
 (common-lisp:defun put-metric-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name filter-pattern
                     metric-transformations)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name filter-pattern
     metric-transformations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-metric-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutMetricFilter"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'put-metric-filter))
(common-lisp:progn
 (common-lisp:defun put-retention-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name retention-in-days)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name retention-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-retention-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRetentionPolicy"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'put-retention-policy))
(common-lisp:progn
 (common-lisp:defun put-subscription-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name filter-name filter-pattern
                     destination-arn role-arn distribution)
   (common-lisp:declare
    (common-lisp:ignorable log-group-name filter-name filter-pattern
     destination-arn role-arn distribution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-subscription-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutSubscriptionFilter"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("OperationAbortedException" . operation-aborted-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'put-subscription-filter))
(common-lisp:progn
 (common-lisp:defun tag-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name tags)
   (common-lisp:declare (common-lisp:ignorable log-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagLogGroup"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("InvalidParameterException" . invalid-parameter-exception)))))
 (common-lisp:export 'tag-log-group))
(common-lisp:progn
 (common-lisp:defun test-metric-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-pattern log-event-messages)
   (common-lisp:declare
    (common-lisp:ignorable filter-pattern log-event-messages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-metric-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestMetricFilter"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("ServiceUnavailableException" . service-unavailable-exception)))))
 (common-lisp:export 'test-metric-filter))
(common-lisp:progn
 (common-lisp:defun untag-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key log-group-name tags)
   (common-lisp:declare (common-lisp:ignorable log-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-log-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'logs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagLogGroup"
                                                        "2014-03-28"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'untag-log-group))

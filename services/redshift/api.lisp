;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/redshift/api
  (:use)
  (:nicknames #:aws/redshift)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/redshift/api)
(common-lisp:progn
 (common-lisp:defclass redshift-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "redshift"))
 (common-lisp:export 'redshift-request))
(common-lisp:progn
 (common-lisp:define-condition redshift-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'redshift-error))
(common-lisp:defvar *error-map*
  '(("AccessToSnapshotDeniedFault" . access-to-snapshot-denied-fault)
    ("AuthorizationAlreadyExistsFault" . authorization-already-exists-fault)
    ("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("AuthorizationQuotaExceededFault" . authorization-quota-exceeded-fault)
    ("BucketNotFoundFault" . bucket-not-found-fault)
    ("ClusterAlreadyExistsFault" . cluster-already-exists-fault)
    ("ClusterNotFoundFault" . cluster-not-found-fault)
    ("ClusterParameterGroupAlreadyExistsFault"
     . cluster-parameter-group-already-exists-fault)
    ("ClusterParameterGroupNotFoundFault"
     . cluster-parameter-group-not-found-fault)
    ("ClusterParameterGroupQuotaExceededFault"
     . cluster-parameter-group-quota-exceeded-fault)
    ("ClusterQuotaExceededFault" . cluster-quota-exceeded-fault)
    ("ClusterSecurityGroupAlreadyExistsFault"
     . cluster-security-group-already-exists-fault)
    ("ClusterSecurityGroupNotFoundFault"
     . cluster-security-group-not-found-fault)
    ("ClusterSecurityGroupQuotaExceededFault"
     . cluster-security-group-quota-exceeded-fault)
    ("ClusterSnapshotAlreadyExistsFault"
     . cluster-snapshot-already-exists-fault)
    ("ClusterSnapshotNotFoundFault" . cluster-snapshot-not-found-fault)
    ("ClusterSnapshotQuotaExceededFault"
     . cluster-snapshot-quota-exceeded-fault)
    ("ClusterSubnetGroupAlreadyExistsFault"
     . cluster-subnet-group-already-exists-fault)
    ("ClusterSubnetGroupNotFoundFault" . cluster-subnet-group-not-found-fault)
    ("ClusterSubnetGroupQuotaExceededFault"
     . cluster-subnet-group-quota-exceeded-fault)
    ("ClusterSubnetQuotaExceededFault" . cluster-subnet-quota-exceeded-fault)
    ("CopyToRegionDisabledFault" . copy-to-region-disabled-fault)
    ("DependentServiceRequestThrottlingFault"
     . dependent-service-request-throttling-fault)
    ("DependentServiceUnavailableFault" . dependent-service-unavailable-fault)
    ("EventSubscriptionQuotaExceededFault"
     . event-subscription-quota-exceeded-fault)
    ("HsmClientCertificateAlreadyExistsFault"
     . hsm-client-certificate-already-exists-fault)
    ("HsmClientCertificateNotFoundFault"
     . hsm-client-certificate-not-found-fault)
    ("HsmClientCertificateQuotaExceededFault"
     . hsm-client-certificate-quota-exceeded-fault)
    ("HsmConfigurationAlreadyExistsFault"
     . hsm-configuration-already-exists-fault)
    ("HsmConfigurationNotFoundFault" . hsm-configuration-not-found-fault)
    ("HsmConfigurationQuotaExceededFault"
     . hsm-configuration-quota-exceeded-fault)
    ("InProgressTableRestoreQuotaExceededFault"
     . in-progress-table-restore-quota-exceeded-fault)
    ("IncompatibleOrderableOptions" . incompatible-orderable-options)
    ("InsufficientClusterCapacityFault" . insufficient-cluster-capacity-fault)
    ("InsufficientS3BucketPolicyFault" . insufficient-s3bucket-policy-fault)
    ("InvalidClusterParameterGroupStateFault"
     . invalid-cluster-parameter-group-state-fault)
    ("InvalidClusterSecurityGroupStateFault"
     . invalid-cluster-security-group-state-fault)
    ("InvalidClusterSnapshotStateFault" . invalid-cluster-snapshot-state-fault)
    ("InvalidClusterStateFault" . invalid-cluster-state-fault)
    ("InvalidClusterSubnetGroupStateFault"
     . invalid-cluster-subnet-group-state-fault)
    ("InvalidClusterSubnetStateFault" . invalid-cluster-subnet-state-fault)
    ("InvalidElasticIpFault" . invalid-elastic-ip-fault)
    ("InvalidHsmClientCertificateStateFault"
     . invalid-hsm-client-certificate-state-fault)
    ("InvalidHsmConfigurationStateFault"
     . invalid-hsm-configuration-state-fault)
    ("InvalidRestoreFault" . invalid-restore-fault)
    ("InvalidS3BucketNameFault" . invalid-s3bucket-name-fault)
    ("InvalidS3KeyPrefixFault" . invalid-s3key-prefix-fault)
    ("InvalidSnapshotCopyGrantStateFault"
     . invalid-snapshot-copy-grant-state-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidSubscriptionStateFault" . invalid-subscription-state-fault)
    ("InvalidTableRestoreArgumentFault" . invalid-table-restore-argument-fault)
    ("InvalidTagFault" . invalid-tag-fault)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("LimitExceededFault" . limit-exceeded-fault)
    ("NumberOfNodesPerClusterLimitExceededFault"
     . number-of-nodes-per-cluster-limit-exceeded-fault)
    ("NumberOfNodesQuotaExceededFault" . number-of-nodes-quota-exceeded-fault)
    ("ReservedNodeAlreadyExistsFault" . reserved-node-already-exists-fault)
    ("ReservedNodeNotFoundFault" . reserved-node-not-found-fault)
    ("ReservedNodeOfferingNotFoundFault"
     . reserved-node-offering-not-found-fault)
    ("ReservedNodeQuotaExceededFault" . reserved-node-quota-exceeded-fault)
    ("ResizeNotFoundFault" . resize-not-found-fault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("SNSTopicArnNotFoundFault" . snstopic-arn-not-found-fault)
    ("SnapshotCopyAlreadyDisabledFault" . snapshot-copy-already-disabled-fault)
    ("SnapshotCopyAlreadyEnabledFault" . snapshot-copy-already-enabled-fault)
    ("SnapshotCopyDisabledFault" . snapshot-copy-disabled-fault)
    ("SnapshotCopyGrantAlreadyExistsFault"
     . snapshot-copy-grant-already-exists-fault)
    ("SnapshotCopyGrantNotFoundFault" . snapshot-copy-grant-not-found-fault)
    ("SnapshotCopyGrantQuotaExceededFault"
     . snapshot-copy-grant-quota-exceeded-fault)
    ("SourceNotFoundFault" . source-not-found-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("SubscriptionAlreadyExistFault" . subscription-already-exist-fault)
    ("SubscriptionCategoryNotFoundFault"
     . subscription-category-not-found-fault)
    ("SubscriptionEventIdNotFoundFault"
     . subscription-event-id-not-found-fault)
    ("SubscriptionNotFoundFault" . subscription-not-found-fault)
    ("SubscriptionSeverityNotFoundFault"
     . subscription-severity-not-found-fault)
    ("TableRestoreNotFoundFault" . table-restore-not-found-fault)
    ("TagLimitExceededFault" . tag-limit-exceeded-fault)
    ("UnauthorizedOperation" . unauthorized-operation)
    ("UnknownSnapshotCopyRegionFault" . unknown-snapshot-copy-region-fault)
    ("UnsupportedOperationFault" . unsupported-operation-fault)
    ("UnsupportedOptionFault" . unsupported-option-fault)))
(common-lisp:progn
 (common-lisp:define-condition access-to-snapshot-denied-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-to-snapshot-denied-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-with-restore-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-with-restore-access-"))
   (account-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (account-alias common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-with-restore-access
                    'make-account-with-restore-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-with-restore-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-with-restore-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "AccountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-with-restore-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accounts-with-restore-access-list ()
   '(trivial-types:proper-list account-with-restore-access))
 (common-lisp:defun |make-accounts-with-restore-access-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            account-with-restore-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition authorization-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-cluster-security-group-ingress-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-authorize-cluster-security-group-ingress-message-"))
   (cluster-security-group-name
    (common-lisp:error ":cluster-security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cidrip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-cluster-security-group-ingress-message
                    'make-authorize-cluster-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-cluster-security-group-ingress-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-authorize-cluster-security-group-ingress-result-"))
   (cluster-security-group common-lisp:nil :type
    (common-lisp:or cluster-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-cluster-security-group-ingress-result
                    'make-authorize-cluster-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-cluster-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-snapshot-access-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorize-snapshot-access-message-"))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (snapshot-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (account-with-restore-access
    (common-lisp:error ":account-with-restore-access is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-snapshot-access-message
                    'make-authorize-snapshot-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "AccountWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-snapshot-access-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorize-snapshot-access-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-snapshot-access-result
                    'make-authorize-snapshot-access-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-snapshot-access-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster (:copier common-lisp:nil) (:conc-name "struct-shape-cluster-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (modify-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (cluster-security-groups common-lisp:nil :type
    (common-lisp:or cluster-security-group-membership-list common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null))
   (cluster-parameter-groups common-lisp:nil :type
    (common-lisp:or cluster-parameter-group-status-list common-lisp:null))
   (cluster-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or pending-modified-values common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (restore-status common-lisp:nil :type
    (common-lisp:or restore-status common-lisp:null))
   (hsm-status common-lisp:nil :type
    (common-lisp:or hsm-status common-lisp:null))
   (cluster-snapshot-copy-status common-lisp:nil :type
    (common-lisp:or cluster-snapshot-copy-status common-lisp:null))
   (cluster-public-key common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-nodes common-lisp:nil :type
    (common-lisp:or cluster-nodes-list common-lisp:null))
   (elastic-ip-status common-lisp:nil :type
    (common-lisp:or elastic-ip-status common-lisp:null))
   (cluster-revision-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or cluster-iam-role-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modify-status))
      (common-lisp:list
       (common-lisp:cons "ModifyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-status))
      (common-lisp:list
       (common-lisp:cons "HsmStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-snapshot-copy-status))
      (common-lisp:list
       (common-lisp:cons "ClusterSnapshotCopyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-public-key))
      (common-lisp:list
       (common-lisp:cons "ClusterPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-nodes))
      (common-lisp:list
       (common-lisp:cons "ClusterNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip-status))
      (common-lisp:list
       (common-lisp:cons "ElasticIpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-revision-number))
      (common-lisp:list
       (common-lisp:cons "ClusterRevisionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-credentials-"))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (db-password common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (expiration common-lisp:nil :type (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-credentials 'make-cluster-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "DbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-iam-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-iam-role-"))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-iam-role 'make-cluster-iam-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-iam-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-iam-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-status))
      (common-lisp:list
       (common-lisp:cons "ApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-iam-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-iam-role-list ()
   '(trivial-types:proper-list cluster-iam-role))
 (common-lisp:defun |make-cluster-iam-role-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-iam-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cluster-list () '(trivial-types:proper-list cluster))
 (common-lisp:defun |make-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-node-"))
   (node-role common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (private-ipaddress common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ipaddress common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster-node 'make-cluster-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "NodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipaddress))
      (common-lisp:list
       (common-lisp:cons "PrivateIPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ipaddress))
      (common-lisp:list
       (common-lisp:cons "PublicIPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-nodes-list ()
   '(trivial-types:proper-list cluster-node))
 (common-lisp:defun |make-cluster-nodes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-parameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-parameter-group-"))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group 'make-cluster-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-parameter-group-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-parameter-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-parameter-group-details-"))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-details
                    'make-cluster-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-parameter-group-name-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-parameter-group-name-message-"))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-name-message
                    'make-cluster-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-parameter-group-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-parameter-group-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-parameter-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-parameter-group-status-"))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-parameter-status-list common-lisp:nil :type
    (common-lisp:or cluster-parameter-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-group-status
                    'make-cluster-parameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-status-list))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-parameter-group-status-list ()
   '(trivial-types:proper-list cluster-parameter-group-status))
 (common-lisp:defun |make-cluster-parameter-group-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-parameter-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-parameter-groups-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameter-groups common-lisp:nil :type
    (common-lisp:or parameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-groups-message
                    'make-cluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-parameter-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-parameter-status-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-error-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-parameter-status 'make-cluster-parameter-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-error-description))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyErrorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-parameter-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-parameter-status-list ()
   '(trivial-types:proper-list cluster-parameter-status))
 (common-lisp:defun |make-cluster-parameter-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-parameter-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-security-group-"))
   (cluster-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-groups common-lisp:nil :type
    (common-lisp:or ec2security-group-list common-lisp:null))
   (ipranges common-lisp:nil :type
    (common-lisp:or iprange-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-security-group 'make-cluster-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipranges))
      (common-lisp:list
       (common-lisp:cons "IPRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-security-group-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-security-group-membership-"))
   (cluster-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-membership
                    'make-cluster-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-security-group-membership-list ()
   '(trivial-types:proper-list cluster-security-group-membership))
 (common-lisp:defun |make-cluster-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-security-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-security-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-security-groups common-lisp:nil :type
    (common-lisp:or cluster-security-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-message
                    'make-cluster-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-security-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-cluster-security-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-security-group-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-security-group-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-security-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cluster-security-groups ()
   '(trivial-types:proper-list cluster-security-group))
 (common-lisp:defun |make-cluster-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-snapshot-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-snapshot-copy-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-snapshot-copy-status-"))
   (destination-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (snapshot-copy-grant-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-snapshot-copy-status
                    'make-cluster-snapshot-copy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-copy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-copy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-copy-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-snapshot-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-snapshot-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-subnet-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-subnet-group-"))
   (cluster-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or subnet-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group 'make-cluster-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-group-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-subnet-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-subnet-groups common-lisp:nil :type
    (common-lisp:or cluster-subnet-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group-message
                    'make-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-group-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-subnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-group-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-subnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype cluster-subnet-groups ()
   '(trivial-types:proper-list cluster-subnet-group))
 (common-lisp:defun |make-cluster-subnet-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-subnet-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-subnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-version-"))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cluster-version 'make-cluster-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-version-list ()
   '(trivial-types:proper-list cluster-version))
 (common-lisp:defun |make-cluster-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-versions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-versions-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-versions common-lisp:nil :type
    (common-lisp:or cluster-version-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-versions-message 'make-cluster-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-versions))
      (common-lisp:list
       (common-lisp:cons "ClusterVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-clusters-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (clusters common-lisp:nil :type
    (common-lisp:or cluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clusters-message 'make-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "Clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-cluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-cluster-snapshot-message-"))
   (source-snapshot-identifier
    (common-lisp:error ":source-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (source-snapshot-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-snapshot-identifier
    (common-lisp:error ":target-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-cluster-snapshot-message
                    'make-copy-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-cluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-cluster-snapshot-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-cluster-snapshot-result
                    'make-copy-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition copy-to-region-disabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'copy-to-region-disabled-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-message-"))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (cluster-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type (common-lisp:error ":node-type is required") :type
    (common-lisp:or string common-lisp:null))
   (master-username (common-lisp:error ":master-username is required") :type
    (common-lisp:or string common-lisp:null))
   (master-user-password
    (common-lisp:error ":master-user-password is required") :type
    (common-lisp:or string common-lisp:null))
   (cluster-security-groups common-lisp:nil :type
    (common-lisp:or cluster-security-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (cluster-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-message 'make-create-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-parameter-group-message-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameter-group-family
    (common-lisp:error ":parameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-parameter-group-message
                    'make-create-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-parameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-parameter-group-result-"))
   (cluster-parameter-group common-lisp:nil :type
    (common-lisp:or cluster-parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-parameter-group-result
                    'make-create-cluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-result 'make-create-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-security-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-security-group-message-"))
   (cluster-security-group-name
    (common-lisp:error ":cluster-security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-security-group-message
                    'make-create-cluster-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-security-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-security-group-result-"))
   (cluster-security-group common-lisp:nil :type
    (common-lisp:or cluster-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-security-group-result
                    'make-create-cluster-security-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-security-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-snapshot-message-"))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-snapshot-message
                    'make-create-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-snapshot-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-snapshot-result
                    'make-create-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-subnet-group-message-"))
   (cluster-subnet-group-name
    (common-lisp:error ":cluster-subnet-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-subnet-group-message
                    'make-create-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-subnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-subnet-group-result-"))
   (cluster-subnet-group common-lisp:nil :type
    (common-lisp:or cluster-subnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-subnet-group-result
                    'make-create-cluster-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (sns-topic-arn (common-lisp:error ":sns-topic-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-ids common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-result
                    'make-create-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hsm-client-certificate-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hsm-client-certificate-message-"))
   (hsm-client-certificate-identifier
    (common-lisp:error ":hsm-client-certificate-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hsm-client-certificate-message
                    'make-create-hsm-client-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hsm-client-certificate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hsm-client-certificate-result-"))
   (hsm-client-certificate common-lisp:nil :type
    (common-lisp:or hsm-client-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hsm-client-certificate-result
                    'make-create-hsm-client-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-client-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hsm-configuration-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hsm-configuration-message-"))
   (hsm-configuration-identifier
    (common-lisp:error ":hsm-configuration-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (hsm-ip-address (common-lisp:error ":hsm-ip-address is required") :type
    (common-lisp:or string common-lisp:null))
   (hsm-partition-name (common-lisp:error ":hsm-partition-name is required")
    :type (common-lisp:or string common-lisp:null))
   (hsm-partition-password
    (common-lisp:error ":hsm-partition-password is required") :type
    (common-lisp:or string common-lisp:null))
   (hsm-server-public-certificate
    (common-lisp:error ":hsm-server-public-certificate is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hsm-configuration-message
                    'make-create-hsm-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-ip-address))
      (common-lisp:list
       (common-lisp:cons "HsmIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-partition-name))
      (common-lisp:list
       (common-lisp:cons "HsmPartitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-partition-password))
      (common-lisp:list
       (common-lisp:cons "HsmPartitionPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-server-public-certificate))
      (common-lisp:list
       (common-lisp:cons "HsmServerPublicCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hsm-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hsm-configuration-result-"))
   (hsm-configuration common-lisp:nil :type
    (common-lisp:or hsm-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hsm-configuration-result
                    'make-create-hsm-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-configuration))
      (common-lisp:list
       (common-lisp:cons "HsmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hsm-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-copy-grant-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-copy-grant-message-"))
   (snapshot-copy-grant-name
    (common-lisp:error ":snapshot-copy-grant-name is required") :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-copy-grant-message
                    'make-create-snapshot-copy-grant-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-copy-grant-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-copy-grant-result-"))
   (snapshot-copy-grant common-lisp:nil :type
    (common-lisp:or snapshot-copy-grant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-copy-grant-result
                    'make-create-snapshot-copy-grant-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-copy-grant))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-grant-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tags-message 'make-create-tags-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype db-group-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-db-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (default-cluster-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-cluster-parameters-"))
   (parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-cluster-parameters
                    'make-default-cluster-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-cluster-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-cluster-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-cluster-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (skip-final-cluster-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (final-cluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-message 'make-delete-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skip-final-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-cluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-parameter-group-message-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-parameter-group-message
                    'make-delete-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-result 'make-delete-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-security-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-security-group-message-"))
   (cluster-security-group-name
    (common-lisp:error ":cluster-security-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-security-group-message
                    'make-delete-cluster-security-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-security-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-security-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-security-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-snapshot-message-"))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (snapshot-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-snapshot-message
                    'make-delete-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-snapshot-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-snapshot-result
                    'make-delete-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cluster-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cluster-subnet-group-message-"))
   (cluster-subnet-group-name
    (common-lisp:error ":cluster-subnet-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-subnet-group-message
                    'make-delete-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hsm-client-certificate-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hsm-client-certificate-message-"))
   (hsm-client-certificate-identifier
    (common-lisp:error ":hsm-client-certificate-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hsm-client-certificate-message
                    'make-delete-hsm-client-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-client-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-client-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-client-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hsm-configuration-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hsm-configuration-message-"))
   (hsm-configuration-identifier
    (common-lisp:error ":hsm-configuration-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hsm-configuration-message
                    'make-delete-hsm-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hsm-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-copy-grant-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-copy-grant-message-"))
   (snapshot-copy-grant-name
    (common-lisp:error ":snapshot-copy-grant-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-copy-grant-message
                    'make-delete-snapshot-copy-grant-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-grant-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-grant-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-grant-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-message 'make-delete-tags-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependent-service-request-throttling-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dependent-service-request-throttling-fault)))
(common-lisp:progn
 (common-lisp:define-condition dependent-service-unavailable-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dependent-service-unavailable-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-parameter-groups-message-"))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-parameter-groups-message
                    'make-describe-cluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-parameters-message-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-parameters-message
                    'make-describe-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-security-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-security-groups-message-"))
   (cluster-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-security-groups-message
                    'make-describe-cluster-security-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-security-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-security-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-security-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-snapshots-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-snapshots-message-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-snapshots-message
                    'make-describe-cluster-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-subnet-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-subnet-groups-message-"))
   (cluster-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-subnet-groups-message
                    'make-describe-cluster-subnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-subnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-subnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-subnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-versions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-versions-message-"))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-parameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-versions-message
                    'make-describe-cluster-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-clusters-message-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-message
                    'make-describe-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-cluster-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-default-cluster-parameters-message-"))
   (parameter-group-family
    (common-lisp:error ":parameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-default-cluster-parameters-message
                    'make-describe-default-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-family))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-cluster-parameters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-default-cluster-parameters-result-"))
   (default-cluster-parameters common-lisp:nil :type
    (common-lisp:or default-cluster-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-default-cluster-parameters-result
                    'make-describe-default-cluster-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cluster-parameters))
      (common-lisp:list
       (common-lisp:cons "DefaultClusterParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-cluster-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-categories-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-categories-message-"))
   (source-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-subscriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-subscriptions-message-"))
   (subscription-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-message-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hsm-client-certificates-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hsm-client-certificates-message-"))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hsm-client-certificates-message
                    'make-describe-hsm-client-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-client-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-client-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-client-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hsm-configurations-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hsm-configurations-message-"))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hsm-configurations-message
                    'make-describe-hsm-configurations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-configurations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-configurations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hsm-configurations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-logging-status-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-logging-status-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-logging-status-message
                    'make-describe-logging-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-status-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-orderable-cluster-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-orderable-cluster-options-message-"))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-cluster-options-message
                    'make-describe-orderable-cluster-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-cluster-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-cluster-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-cluster-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-node-offerings-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-node-offerings-message-"))
   (reserved-node-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-node-offerings-message
                    'make-describe-reserved-node-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-node-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-nodes-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-nodes-message-"))
   (reserved-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-nodes-message
                    'make-describe-reserved-nodes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-nodes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resize-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resize-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resize-message 'make-describe-resize-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resize-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resize-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resize-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshot-copy-grants-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshot-copy-grants-message-"))
   (snapshot-copy-grant-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshot-copy-grants-message
                    'make-describe-snapshot-copy-grants-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-copy-grants-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-copy-grants-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-copy-grants-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-restore-status-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-restore-status-message-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (table-restore-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-restore-status-message
                    'make-describe-table-restore-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-restore-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-restore-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-request-id))
      (common-lisp:list
       (common-lisp:cons "TableRestoreRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-restore-status-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-message-"))
   (resource-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null))
   (tag-values common-lisp:nil :type
    (common-lisp:or tag-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-message 'make-describe-tags-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-logging-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-logging-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-logging-message 'make-disable-logging-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-logging-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-logging-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-logging-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-snapshot-copy-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-snapshot-copy-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-snapshot-copy-message
                    'make-disable-snapshot-copy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-snapshot-copy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-snapshot-copy-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-snapshot-copy-result
                    'make-disable-snapshot-copy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-snapshot-copy-result))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double-optional () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (ec2security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2security-group-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2security-group 'make-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2security-group-list ()
   '(trivial-types:proper-list ec2security-group))
 (common-lisp:defun |make-ec2security-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (elastic-ip-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-elastic-ip-status-"))
   (elastic-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elastic-ip-status 'make-elastic-ip-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elastic-ip-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elastic-ip-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elastic-ip-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-logging-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-logging-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-logging-message 'make-enable-logging-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-logging-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-logging-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-logging-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-snapshot-copy-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-snapshot-copy-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (destination-region (common-lisp:error ":destination-region is required")
    :type (common-lisp:or string common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (snapshot-copy-grant-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-snapshot-copy-message
                    'make-enable-snapshot-copy-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-snapshot-copy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-snapshot-copy-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-snapshot-copy-result
                    'make-enable-snapshot-copy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-snapshot-copy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-event-categories-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-categories-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-categories-map-"))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or event-info-map-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-categories-map 'make-event-categories-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-categories-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-map-list ()
   '(trivial-types:proper-list event-categories-map))
 (common-lisp:defun |make-event-categories-map-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-categories-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-categories-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-categories-message-"))
   (event-categories-map-list common-lisp:nil :type
    (common-lisp:or event-categories-map-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-categories-message 'make-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-map-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesMapList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-info-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-info-map-"))
   (event-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (event-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-info-map 'make-event-info-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-info-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-info-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-description))
      (common-lisp:list
       (common-lisp:cons "EventDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-info-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-info-map-list ()
   '(trivial-types:proper-list event-info-map))
 (common-lisp:defun |make-event-info-map-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-info-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscription-"))
   (customer-aws-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cust-subscription-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subscription-creation-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-ids-list common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (event-categories-list common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-subscription-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-subscription-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun |make-event-subscriptions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscriptions-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-subscriptions-list common-lisp:nil :type
    (common-lisp:or event-subscriptions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscriptions-message
                    'make-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cluster-credentials-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cluster-credentials-message-"))
   (db-user (common-lisp:error ":db-user is required") :type
    (common-lisp:or string common-lisp:null))
   (db-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (auto-create common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (db-groups common-lisp:nil :type
    (common-lisp:or db-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cluster-credentials-message
                    'make-get-cluster-credentials-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-name))
      (common-lisp:list
       (common-lisp:cons "DbName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create))
      (common-lisp:list
       (common-lisp:cons "AutoCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-groups))
      (common-lisp:list
       (common-lisp:cons "DbGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-credentials-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hsm-client-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-hsm-client-certificate-"))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-client-certificate-public-key common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate 'make-hsm-client-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-public-key))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificatePublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-client-certificate-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype hsm-client-certificate-list ()
   '(trivial-types:proper-list hsm-client-certificate))
 (common-lisp:defun |make-hsm-client-certificate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hsm-client-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hsm-client-certificate-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-hsm-client-certificate-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hsm-client-certificates common-lisp:nil :type
    (common-lisp:or hsm-client-certificate-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-message
                    'make-hsm-client-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificates))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hsm-client-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-client-certificate-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition hsm-client-certificate-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-client-certificate-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (hsm-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-hsm-configuration-"))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hsm-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-partition-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hsm-configuration 'make-hsm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hsm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hsm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-ip-address))
      (common-lisp:list
       (common-lisp:cons "HsmIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-partition-name))
      (common-lisp:list
       (common-lisp:cons "HsmPartitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hsm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-configuration-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-configuration-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype hsm-configuration-list ()
   '(trivial-types:proper-list hsm-configuration))
 (common-lisp:defun |make-hsm-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hsm-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hsm-configuration-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-hsm-configuration-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hsm-configurations common-lisp:nil :type
    (common-lisp:or hsm-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hsm-configuration-message
                    'make-hsm-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hsm-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hsm-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-configurations))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hsm-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hsm-configuration-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'hsm-configuration-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition hsm-configuration-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'hsm-configuration-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (hsm-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-hsm-status-"))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hsm-status 'make-hsm-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hsm-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hsm-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hsm-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iprange (:copier common-lisp:nil) (:conc-name "struct-shape-iprange-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cidrip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'iprange 'make-iprange))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iprange))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iprange-list () '(trivial-types:proper-list iprange))
 (common-lisp:defun |make-iprange-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list iprange))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype iam-role-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-iam-role-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-tables-completed ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-import-tables-completed|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-tables-in-progress ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-import-tables-in-progress|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-tables-not-started ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-import-tables-not-started|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition in-progress-table-restore-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'in-progress-table-restore-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition incompatible-orderable-options
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'incompatible-orderable-options)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-cluster-capacity-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-cluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-s3bucket-policy-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-s3bucket-policy-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-parameter-group-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-parameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-security-group-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-security-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-snapshot-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-subnet-group-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cluster-subnet-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cluster-subnet-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-cluster-subnet-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-elastic-ip-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-elastic-ip-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-hsm-client-certificate-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-hsm-client-certificate-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-hsm-configuration-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-hsm-configuration-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-restore-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-restore-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-name-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3bucket-name-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3key-prefix-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3key-prefix-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snapshot-copy-grant-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-snapshot-copy-grant-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subscription-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subscription-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-table-restore-argument-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-table-restore-argument-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (logging-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-status-"))
   (logging-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bucket-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-successful-delivery-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (last-failure-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (last-failure-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging-status 'make-logging-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-failure-time))
      (common-lisp:list
       (common-lisp:cons "LastFailureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-status))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-iam-roles-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-iam-roles-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (add-iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null))
   (remove-iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-iam-roles-message
                    'make-modify-cluster-iam-roles-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-iam-roles))
      (common-lisp:list
       (common-lisp:cons "AddIamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-iam-roles))
      (common-lisp:list
       (common-lisp:cons "RemoveIamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-iam-roles-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-iam-roles-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-iam-roles-result
                    'make-modify-cluster-iam-roles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-iam-roles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (cluster-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cluster-security-groups common-lisp:nil :type
    (common-lisp:or cluster-security-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (elastic-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-message 'make-modify-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-parameter-group-message-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-parameter-group-message
                    'make-modify-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-result 'make-modify-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-subnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-subnet-group-message-"))
   (cluster-subnet-group-name
    (common-lisp:error ":cluster-subnet-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-subnet-group-message
                    'make-modify-cluster-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-cluster-subnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-cluster-subnet-group-result-"))
   (cluster-subnet-group common-lisp:nil :type
    (common-lisp:or cluster-subnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-cluster-subnet-group-result
                    'make-modify-cluster-subnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-cluster-subnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-ids common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-result
                    'make-modify-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-snapshot-copy-retention-period-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-modify-snapshot-copy-retention-period-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (retention-period (common-lisp:error ":retention-period is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-snapshot-copy-retention-period-message
                    'make-modify-snapshot-copy-retention-period-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-snapshot-copy-retention-period-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-modify-snapshot-copy-retention-period-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-snapshot-copy-retention-period-result
                    'make-modify-snapshot-copy-retention-period-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-copy-retention-period-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition number-of-nodes-per-cluster-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'number-of-nodes-per-cluster-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition number-of-nodes-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'number-of-nodes-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (orderable-cluster-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-orderable-cluster-option-"))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'orderable-cluster-option 'make-orderable-cluster-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-cluster-options-list ()
   '(trivial-types:proper-list orderable-cluster-option))
 (common-lisp:defun |make-orderable-cluster-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-cluster-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (orderable-cluster-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-orderable-cluster-options-message-"))
   (orderable-cluster-options common-lisp:nil :type
    (common-lisp:or orderable-cluster-options-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'orderable-cluster-options-message
                    'make-orderable-cluster-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-cluster-options))
      (common-lisp:list
       (common-lisp:cons "OrderableClusterOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-cluster-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-type common-lisp:nil :type
    (common-lisp:or parameter-apply-type common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:deftype parameter-apply-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-group-list ()
   '(trivial-types:proper-list cluster-parameter-group))
 (common-lisp:defun |make-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-modified-values-"))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cluster-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-node-offering-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-reserved-node-offering-message-"))
   (reserved-node-offering-id
    (common-lisp:error ":reserved-node-offering-id is required") :type
    (common-lisp:or string common-lisp:null))
   (node-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-node-offering-message
                    'make-purchase-reserved-node-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "NodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-node-offering-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-reserved-node-offering-result-"))
   (reserved-node common-lisp:nil :type
    (common-lisp:or reserved-node common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-node-offering-result
                    'make-purchase-reserved-node-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node))
      (common-lisp:list
       (common-lisp:cons "ReservedNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-node-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-cluster-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-cluster-message 'make-reboot-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-cluster-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-cluster-result 'make-reboot-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recurring-charge (:copier common-lisp:nil)
      (:conc-name "struct-shape-recurring-charge-"))
   (recurring-charge-amount common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (recurring-charge-frequency common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun |make-recurring-charge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-node-"))
   (reserved-node-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-node-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charge-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reserved-node 'make-reserved-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-node-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-count))
      (common-lisp:list
       (common-lisp:cons "NodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype reserved-node-list ()
   '(trivial-types:proper-list reserved-node))
 (common-lisp:defun |make-reserved-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-node-offering (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-node-offering-"))
   (reserved-node-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charge-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-node-offering 'make-reserved-node-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-node-offering-list ()
   '(trivial-types:proper-list reserved-node-offering))
 (common-lisp:defun |make-reserved-node-offering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-node-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-offering-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-node-offering-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-node-offerings-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-node-offerings-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-node-offerings common-lisp:nil :type
    (common-lisp:or reserved-node-offering-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-node-offerings-message
                    'make-reserved-node-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-node-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedNodeOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-node-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-node-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-node-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-nodes-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-nodes-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-nodes common-lisp:nil :type
    (common-lisp:or reserved-node-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-nodes-message 'make-reserved-nodes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-nodes))
      (common-lisp:list
       (common-lisp:cons "ReservedNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-nodes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-cluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-cluster-parameter-group-message-"))
   (parameter-group-name
    (common-lisp:error ":parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (reset-all-parameters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-cluster-parameter-group-message
                    'make-reset-cluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-cluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-cluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-cluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resize-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resize-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (resize-progress-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-resize-progress-message-"))
   (target-node-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (target-cluster-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-tables-completed common-lisp:nil :type
    (common-lisp:or import-tables-completed common-lisp:null))
   (import-tables-in-progress common-lisp:nil :type
    (common-lisp:or import-tables-in-progress common-lisp:null))
   (import-tables-not-started common-lisp:nil :type
    (common-lisp:or import-tables-not-started common-lisp:null))
   (avg-resize-rate-in-mega-bytes-per-second common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (total-resize-data-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (elapsed-time-in-seconds common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (estimated-time-to-completion-in-seconds common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resize-progress-message 'make-resize-progress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resize-progress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resize-progress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-node-type))
      (common-lisp:list
       (common-lisp:cons "TargetNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "TargetNumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-cluster-type))
      (common-lisp:list
       (common-lisp:cons "TargetClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-tables-completed))
      (common-lisp:list
       (common-lisp:cons "ImportTablesCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-tables-in-progress))
      (common-lisp:list
       (common-lisp:cons "ImportTablesInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-tables-not-started))
      (common-lisp:list
       (common-lisp:cons "ImportTablesNotStarted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avg-resize-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "AvgResizeRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-resize-data-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalResizeDataInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resize-progress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype restorable-node-type-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-restorable-node-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-cluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-cluster-snapshot-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (snapshot-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (cluster-subnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-security-groups common-lisp:nil :type
    (common-lisp:or cluster-security-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-cluster-snapshot-message
                    'make-restore-from-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-cluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-cluster-snapshot-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-cluster-snapshot-result
                    'make-restore-from-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-status-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (current-restore-rate-in-mega-bytes-per-second common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (snapshot-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (elapsed-time-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (estimated-time-to-completion-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'restore-status 'make-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-restore-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentRestoreRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "SnapshotSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-table-from-cluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-table-from-cluster-snapshot-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (source-database-name
    (common-lisp:error ":source-database-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-table-name (common-lisp:error ":source-table-name is required")
    :type (common-lisp:or string common-lisp:null))
   (target-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-table-name (common-lisp:error ":new-table-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-cluster-snapshot-message
                    'make-restore-table-from-cluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "SourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "SourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "SourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "TargetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "TargetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "NewTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-table-from-cluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-table-from-cluster-snapshot-result-"))
   (table-restore-status common-lisp:nil :type
    (common-lisp:or table-restore-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-cluster-snapshot-result
                    'make-restore-table-from-cluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status))
      (common-lisp:list
       (common-lisp:cons "TableRestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-cluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-cluster-security-group-ingress-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-revoke-cluster-security-group-ingress-message-"))
   (cluster-security-group-name
    (common-lisp:error ":cluster-security-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cidrip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-cluster-security-group-ingress-message
                    'make-revoke-cluster-security-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-cluster-security-group-ingress-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-revoke-cluster-security-group-ingress-result-"))
   (cluster-security-group common-lisp:nil :type
    (common-lisp:or cluster-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-cluster-security-group-ingress-result
                    'make-revoke-cluster-security-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-cluster-security-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-snapshot-access-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-snapshot-access-message-"))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (snapshot-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (account-with-restore-access
    (common-lisp:error ":account-with-restore-access is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-snapshot-access-message
                    'make-revoke-snapshot-access-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "AccountWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-snapshot-access-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-snapshot-access-result-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-snapshot-access-result
                    'make-revoke-snapshot-access-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-snapshot-access-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rotate-encryption-key-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-rotate-encryption-key-message-"))
   (cluster-identifier (common-lisp:error ":cluster-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rotate-encryption-key-message
                    'make-rotate-encryption-key-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rotate-encryption-key-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-rotate-encryption-key-result-"))
   (cluster common-lisp:nil :type (common-lisp:or cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rotate-encryption-key-result
                    'make-rotate-encryption-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rotate-encryption-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsinvalid-topic-fault)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsno-authorization-fault)))
(common-lisp:progn
 (common-lisp:define-condition snstopic-arn-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snstopic-arn-not-found-fault)))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot (:copier common-lisp:nil) (:conc-name "struct-shape-snapshot-"))
   (snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (node-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (encrypted-with-hsm common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (accounts-with-restore-access common-lisp:nil :type
    (common-lisp:or accounts-with-restore-access-list common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-backup-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (actual-incremental-backup-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (backup-progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (current-backup-rate-in-mega-bytes-per-second common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-seconds-to-completion common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (elapsed-time-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (source-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (restorable-node-types common-lisp:nil :type
    (common-lisp:or restorable-node-type-list common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-with-hsm))
      (common-lisp:list
       (common-lisp:cons "EncryptedWithHSM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accounts-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "AccountsWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-incremental-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ActualIncrementalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-backup-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentBackupRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-seconds-to-completion))
      (common-lisp:list
       (common-lisp:cons "EstimatedSecondsToCompletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restorable-node-types))
      (common-lisp:list
       (common-lisp:cons "RestorableNodeTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-already-disabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-already-disabled-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-already-enabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-already-enabled-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-disabled-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-disabled-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-copy-grant (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-copy-grant-"))
   (snapshot-copy-grant-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant 'make-snapshot-copy-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-copy-grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-copy-grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-copy-grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-grant-already-exists-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-copy-grant-list ()
   '(trivial-types:proper-list snapshot-copy-grant))
 (common-lisp:defun |make-snapshot-copy-grant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-copy-grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-copy-grant-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-copy-grant-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-copy-grants common-lisp:nil :type
    (common-lisp:or snapshot-copy-grant-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant-message
                    'make-snapshot-copy-grant-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-grant-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-grant-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grants))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-grant-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-grant-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-copy-grant-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-copy-grant-quota-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-grant-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshots common-lisp:nil :type
    (common-lisp:or snapshot-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-message 'make-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-source-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition source-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-not-found-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subnet (:copier common-lisp:nil) (:conc-name "struct-shape-subnet-"))
   (subnet-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone common-lisp:null))
   (subnet-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-already-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subscription-already-exist-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-already-exist-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-category-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-category-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-event-id-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-event-id-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-severity-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-severity-not-found-fault)))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition table-restore-not-found-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'table-restore-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (table-restore-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-restore-status-"))
   (table-restore-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or table-restore-status-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (total-data-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-table-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-table-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-restore-status 'make-table-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-request-id))
      (common-lisp:list
       (common-lisp:cons "TableRestoreRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "RequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-data-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalDataInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "SourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "SourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "SourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "TargetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "TargetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "NewTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-restore-status-list ()
   '(trivial-types:proper-list table-restore-status))
 (common-lisp:defun |make-table-restore-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-restore-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-restore-status-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-restore-status-message-"))
   (table-restore-status-details common-lisp:nil :type
    (common-lisp:or table-restore-status-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-restore-status-message
                    'make-table-restore-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-restore-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-restore-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status-details))
      (common-lisp:list
       (common-lisp:cons "TableRestoreStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-restore-status-message))
   common-lisp:nil))
(common-lisp:deftype table-restore-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-limit-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tagged-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-tagged-resource-"))
   (tag common-lisp:nil :type (common-lisp:or tag common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tagged-resource 'make-tagged-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagged-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagged-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagged-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tagged-resource-list ()
   '(trivial-types:proper-list tagged-resource))
 (common-lisp:defun |make-tagged-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tagged-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tagged-resource-list-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-tagged-resource-list-message-"))
   (tagged-resources common-lisp:nil :type
    (common-lisp:or tagged-resource-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tagged-resource-list-message
                    'make-tagged-resource-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tagged-resource-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tagged-resource-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagged-resources))
      (common-lisp:list
       (common-lisp:cons "TaggedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tagged-resource-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-operation
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unauthorized-operation)))
(common-lisp:progn
 (common-lisp:define-condition unknown-snapshot-copy-region-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unknown-snapshot-copy-region-fault)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-operation-fault)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-option-fault
     (redshift-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-option-fault)))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpc-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-security-group-membership-"))
   (vpc-security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun |make-vpc-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun authorize-cluster-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name cidrip
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name cidrip
     ec2security-group-name ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-cluster-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeClusterSecurityGroupIngress"
                                                        "2012-12-01"))
      common-lisp:nil "AuthorizeClusterSecurityGroupIngressResult"
      *error-map*)))
 (common-lisp:export 'authorize-cluster-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun authorize-snapshot-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier
                     snapshot-cluster-identifier account-with-restore-access)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier snapshot-cluster-identifier
     account-with-restore-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-snapshot-access-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeSnapshotAccess"
                                                        "2012-12-01"))
      common-lisp:nil "AuthorizeSnapshotAccessResult" *error-map*)))
 (common-lisp:export 'authorize-snapshot-access))
(common-lisp:progn
 (common-lisp:defun copy-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-identifier
                     source-snapshot-cluster-identifier
                     target-snapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-identifier
     source-snapshot-cluster-identifier target-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyClusterSnapshot"
                                                        "2012-12-01"))
      common-lisp:nil "CopyClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'copy-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname cluster-identifier cluster-type
                     node-type master-username master-user-password
                     cluster-security-groups vpc-security-group-ids
                     cluster-subnet-group-name availability-zone
                     preferred-maintenance-window cluster-parameter-group-name
                     automated-snapshot-retention-period port cluster-version
                     allow-version-upgrade number-of-nodes publicly-accessible
                     encrypted hsm-client-certificate-identifier
                     hsm-configuration-identifier elastic-ip tags kms-key-id
                     enhanced-vpc-routing additional-info iam-roles)
   (common-lisp:declare
    (common-lisp:ignorable dbname cluster-identifier cluster-type node-type
     master-username master-user-password cluster-security-groups
     vpc-security-group-ids cluster-subnet-group-name availability-zone
     preferred-maintenance-window cluster-parameter-group-name
     automated-snapshot-retention-period port cluster-version
     allow-version-upgrade number-of-nodes publicly-accessible encrypted
     hsm-client-certificate-identifier hsm-configuration-identifier elastic-ip
     tags kms-key-id enhanced-vpc-routing additional-info iam-roles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"
                                                        "2012-12-01"))
      common-lisp:nil "CreateClusterResult" *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name
                     parameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameter-group-family
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterParameterGroup"
                                                        "2012-12-01"))
      common-lisp:nil "CreateClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-cluster-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cluster-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterSecurityGroup"
                                                        "2012-12-01"))
      common-lisp:nil "CreateClusterSecurityGroupResult" *error-map*)))
 (common-lisp:export 'create-cluster-security-group))
(common-lisp:progn
 (common-lisp:defun create-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier cluster-identifier
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier cluster-identifier tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterSnapshot"
                                                        "2012-12-01"))
      common-lisp:nil "CreateClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'create-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-cluster-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name description
                     subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster-subnet-group-name description subnet-ids
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cluster-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClusterSubnetGroup"
                                                        "2012-12-01"))
      common-lisp:nil "CreateClusterSubnetGroupResult" *error-map*)))
 (common-lisp:export 'create-cluster-subnet-group))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type source-ids event-categories severity enabled
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     source-ids event-categories severity enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventSubscription"
                                                        "2012-12-01"))
      common-lisp:nil "CreateEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-hsm-client-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-client-certificate-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable hsm-client-certificate-identifier tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-hsm-client-certificate-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHsmClientCertificate"
                                                        "2012-12-01"))
      common-lisp:nil "CreateHsmClientCertificateResult" *error-map*)))
 (common-lisp:export 'create-hsm-client-certificate))
(common-lisp:progn
 (common-lisp:defun create-hsm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-configuration-identifier description
                     hsm-ip-address hsm-partition-name hsm-partition-password
                     hsm-server-public-certificate tags)
   (common-lisp:declare
    (common-lisp:ignorable hsm-configuration-identifier description
     hsm-ip-address hsm-partition-name hsm-partition-password
     hsm-server-public-certificate tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hsm-configuration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHsmConfiguration"
                                                        "2012-12-01"))
      common-lisp:nil "CreateHsmConfigurationResult" *error-map*)))
 (common-lisp:export 'create-hsm-configuration))
(common-lisp:progn
 (common-lisp:defun create-snapshot-copy-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-grant-name kms-key-id tags)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-copy-grant-name kms-key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-snapshot-copy-grant-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSnapshotCopyGrant"
                                                        "2012-12-01"))
      common-lisp:nil "CreateSnapshotCopyGrantResult" *error-map*)))
 (common-lisp:export 'create-snapshot-copy-grant))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateTags"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier
                     skip-final-cluster-snapshot
                     final-cluster-snapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier skip-final-cluster-snapshot
     final-cluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCluster"
                                                        "2012-12-01"))
      common-lisp:nil "DeleteClusterResult" *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterParameterGroup"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-cluster-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name)
   (common-lisp:declare (common-lisp:ignorable cluster-security-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cluster-security-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterSecurityGroup"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster-security-group))
(common-lisp:progn
 (common-lisp:defun delete-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier
                     snapshot-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier snapshot-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterSnapshot"
                                                        "2012-12-01"))
      common-lisp:nil "DeleteClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'delete-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-cluster-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name)
   (common-lisp:declare (common-lisp:ignorable cluster-subnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cluster-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClusterSubnetGroup"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster-subnet-group))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventSubscription"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-hsm-client-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-client-certificate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable hsm-client-certificate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-hsm-client-certificate-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHsmClientCertificate"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-hsm-client-certificate))
(common-lisp:progn
 (common-lisp:defun delete-hsm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-configuration-identifier)
   (common-lisp:declare (common-lisp:ignorable hsm-configuration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hsm-configuration-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHsmConfiguration"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-hsm-configuration))
(common-lisp:progn
 (common-lisp:defun delete-snapshot-copy-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-grant-name)
   (common-lisp:declare (common-lisp:ignorable snapshot-copy-grant-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-snapshot-copy-grant-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSnapshotCopyGrant"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-snapshot-copy-grant))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteTags"
                                                        "2012-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-cluster-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name max-records marker
                     tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterParameterGroups"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClusterParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-cluster-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name source max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name source max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterParameters"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClusterParametersResult" *error-map*)))
 (common-lisp:export 'describe-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-cluster-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-security-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterSecurityGroups"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClusterSecurityGroupsResult" *error-map*)))
 (common-lisp:export 'describe-cluster-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-cluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier snapshot-identifier
                     snapshot-type start-time end-time max-records marker
                     owner-account tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier snapshot-identifier snapshot-type
     start-time end-time max-records marker owner-account tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterSnapshots"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClusterSnapshotsResult" *error-map*)))
 (common-lisp:export 'describe-cluster-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-cluster-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-subnet-group-name max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-subnet-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterSubnetGroups"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClusterSubnetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-cluster-subnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-cluster-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-version
                     cluster-parameter-group-family max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-version cluster-parameter-group-family
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cluster-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusterVersions"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClusterVersionsResult" *error-map*)))
 (common-lisp:export 'describe-cluster-versions))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier max-records marker
                     tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusters"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeClustersResult" *error-map*)))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-default-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-family max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-family max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-default-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDefaultClusterParameters"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeDefaultClusterParametersResult" *error-map*)))
 (common-lisp:export 'describe-default-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type)
   (common-lisp:declare (common-lisp:ignorable source-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventCategories"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeEventCategoriesResult" *error-map*)))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventSubscriptions"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeEventSubscriptionsResult" *error-map*)))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-hsm-client-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-client-certificate-identifier
                     max-records marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable hsm-client-certificate-identifier max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hsm-client-certificates-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHsmClientCertificates"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeHsmClientCertificatesResult" *error-map*)))
 (common-lisp:export 'describe-hsm-client-certificates))
(common-lisp:progn
 (common-lisp:defun describe-hsm-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hsm-configuration-identifier max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable hsm-configuration-identifier max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hsm-configurations-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHsmConfigurations"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeHsmConfigurationsResult" *error-map*)))
 (common-lisp:export 'describe-hsm-configurations))
(common-lisp:progn
 (common-lisp:defun describe-logging-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-logging-status-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoggingStatus"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeLoggingStatusResult" *error-map*)))
 (common-lisp:export 'describe-logging-status))
(common-lisp:progn
 (common-lisp:defun describe-orderable-cluster-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-version node-type max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-version node-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-cluster-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrderableClusterOptions"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeOrderableClusterOptionsResult" *error-map*)))
 (common-lisp:export 'describe-orderable-cluster-options))
(common-lisp:progn
 (common-lisp:defun describe-reserved-node-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-offering-id max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-offering-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-node-offerings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedNodeOfferings"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeReservedNodeOfferingsResult" *error-map*)))
 (common-lisp:export 'describe-reserved-node-offerings))
(common-lisp:progn
 (common-lisp:defun describe-reserved-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-id max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reserved-nodes-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedNodes"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeReservedNodesResult" *error-map*)))
 (common-lisp:export 'describe-reserved-nodes))
(common-lisp:progn
 (common-lisp:defun describe-resize
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resize-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResize"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeResizeResult" *error-map*)))
 (common-lisp:export 'describe-resize))
(common-lisp:progn
 (common-lisp:defun describe-snapshot-copy-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-grant-name max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-copy-grant-name max-records marker tag-keys
     tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-snapshot-copy-grants-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshotCopyGrants"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeSnapshotCopyGrantsResult" *error-map*)))
 (common-lisp:export 'describe-snapshot-copy-grants))
(common-lisp:progn
 (common-lisp:defun describe-table-restore-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier
                     table-restore-request-id max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier table-restore-request-id
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-table-restore-status-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTableRestoreStatus"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeTableRestoreStatusResult" *error-map*)))
 (common-lisp:export 'describe-table-restore-status))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name resource-type max-records
                     marker tag-keys tag-values)
   (common-lisp:declare
    (common-lisp:ignorable resource-name resource-type max-records marker
     tag-keys tag-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"
                                                        "2012-12-01"))
      common-lisp:nil "DescribeTagsResult" *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun disable-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-logging-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableLogging"
                                                        "2012-12-01"))
      common-lisp:nil "DisableLoggingResult" *error-map*)))
 (common-lisp:export 'disable-logging))
(common-lisp:progn
 (common-lisp:defun disable-snapshot-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-snapshot-copy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableSnapshotCopy"
                                                        "2012-12-01"))
      common-lisp:nil "DisableSnapshotCopyResult" *error-map*)))
 (common-lisp:export 'disable-snapshot-copy))
(common-lisp:progn
 (common-lisp:defun enable-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier bucket-name
                     s3key-prefix)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier bucket-name s3key-prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-logging-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableLogging"
                                                        "2012-12-01"))
      common-lisp:nil "EnableLoggingResult" *error-map*)))
 (common-lisp:export 'enable-logging))
(common-lisp:progn
 (common-lisp:defun enable-snapshot-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier destination-region
                     retention-period snapshot-copy-grant-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier destination-region
     retention-period snapshot-copy-grant-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-snapshot-copy-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableSnapshotCopy"
                                                        "2012-12-01"))
      common-lisp:nil "EnableSnapshotCopyResult" *error-map*)))
 (common-lisp:export 'enable-snapshot-copy))
(common-lisp:progn
 (common-lisp:defun get-cluster-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-user db-name cluster-identifier
                     duration-seconds auto-create db-groups)
   (common-lisp:declare
    (common-lisp:ignorable db-user db-name cluster-identifier duration-seconds
     auto-create db-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cluster-credentials-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClusterCredentials"
                                                        "2012-12-01"))
      common-lisp:nil "GetClusterCredentialsResult" *error-map*)))
 (common-lisp:export 'get-cluster-credentials))
(common-lisp:progn
 (common-lisp:defun modify-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier cluster-type node-type
                     number-of-nodes cluster-security-groups
                     vpc-security-group-ids master-user-password
                     cluster-parameter-group-name
                     automated-snapshot-retention-period
                     preferred-maintenance-window cluster-version
                     allow-version-upgrade hsm-client-certificate-identifier
                     hsm-configuration-identifier new-cluster-identifier
                     publicly-accessible elastic-ip enhanced-vpc-routing)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier cluster-type node-type
     number-of-nodes cluster-security-groups vpc-security-group-ids
     master-user-password cluster-parameter-group-name
     automated-snapshot-retention-period preferred-maintenance-window
     cluster-version allow-version-upgrade hsm-client-certificate-identifier
     hsm-configuration-identifier new-cluster-identifier publicly-accessible
     elastic-ip enhanced-vpc-routing))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCluster"
                                                        "2012-12-01"))
      common-lisp:nil "ModifyClusterResult" *error-map*)))
 (common-lisp:export 'modify-cluster))
(common-lisp:progn
 (common-lisp:defun modify-cluster-iam-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier add-iam-roles
                     remove-iam-roles)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier add-iam-roles remove-iam-roles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-cluster-iam-roles-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterIamRoles"
                                                        "2012-12-01"))
      common-lisp:nil "ModifyClusterIamRolesResult" *error-map*)))
 (common-lisp:export 'modify-cluster-iam-roles))
(common-lisp:progn
 (common-lisp:defun modify-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterParameterGroup"
                                                        "2012-12-01"))
      common-lisp:nil "ModifyClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-cluster-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-subnet-group-name description
                     subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-subnet-group-name description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-cluster-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyClusterSubnetGroup"
                                                        "2012-12-01"))
      common-lisp:nil "ModifyClusterSubnetGroupResult" *error-map*)))
 (common-lisp:export 'modify-cluster-subnet-group))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type source-ids event-categories severity enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     source-ids event-categories severity enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEventSubscription"
                                                        "2012-12-01"))
      common-lisp:nil "ModifyEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-snapshot-copy-retention-period
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier retention-period)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-snapshot-copy-retention-period-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifySnapshotCopyRetentionPeriod"
                                                        "2012-12-01"))
      common-lisp:nil "ModifySnapshotCopyRetentionPeriodResult" *error-map*)))
 (common-lisp:export 'modify-snapshot-copy-retention-period))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-node-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-node-offering-id node-count)
   (common-lisp:declare
    (common-lisp:ignorable reserved-node-offering-id node-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-node-offering-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseReservedNodeOffering"
                                                        "2012-12-01"))
      common-lisp:nil "PurchaseReservedNodeOfferingResult" *error-map*)))
 (common-lisp:export 'purchase-reserved-node-offering))
(common-lisp:progn
 (common-lisp:defun reboot-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootCluster"
                                                        "2012-12-01"))
      common-lisp:nil "RebootClusterResult" *error-map*)))
 (common-lisp:export 'reboot-cluster))
(common-lisp:progn
 (common-lisp:defun reset-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parameter-group-name reset-all-parameters
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable parameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-cluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetClusterParameterGroup"
                                                        "2012-12-01"))
      common-lisp:nil "ResetClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-cluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun restore-from-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier snapshot-identifier
                     snapshot-cluster-identifier port availability-zone
                     allow-version-upgrade cluster-subnet-group-name
                     publicly-accessible owner-account
                     hsm-client-certificate-identifier
                     hsm-configuration-identifier elastic-ip
                     cluster-parameter-group-name cluster-security-groups
                     vpc-security-group-ids preferred-maintenance-window
                     automated-snapshot-retention-period kms-key-id node-type
                     enhanced-vpc-routing additional-info iam-roles)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier snapshot-identifier
     snapshot-cluster-identifier port availability-zone allow-version-upgrade
     cluster-subnet-group-name publicly-accessible owner-account
     hsm-client-certificate-identifier hsm-configuration-identifier elastic-ip
     cluster-parameter-group-name cluster-security-groups
     vpc-security-group-ids preferred-maintenance-window
     automated-snapshot-retention-period kms-key-id node-type
     enhanced-vpc-routing additional-info iam-roles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-from-cluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreFromClusterSnapshot"
                                                        "2012-12-01"))
      common-lisp:nil "RestoreFromClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'restore-from-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-table-from-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier snapshot-identifier
                     source-database-name source-schema-name source-table-name
                     target-database-name target-schema-name new-table-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier snapshot-identifier
     source-database-name source-schema-name source-table-name
     target-database-name target-schema-name new-table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-table-from-cluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreTableFromClusterSnapshot"
                                                        "2012-12-01"))
      common-lisp:nil "RestoreTableFromClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'restore-table-from-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun revoke-cluster-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-security-group-name cidrip
                     ec2security-group-name ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-security-group-name cidrip
     ec2security-group-name ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-cluster-security-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeClusterSecurityGroupIngress"
                                                        "2012-12-01"))
      common-lisp:nil "RevokeClusterSecurityGroupIngressResult" *error-map*)))
 (common-lisp:export 'revoke-cluster-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun revoke-snapshot-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-identifier
                     snapshot-cluster-identifier account-with-restore-access)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-identifier snapshot-cluster-identifier
     account-with-restore-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-snapshot-access-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeSnapshotAccess"
                                                        "2012-12-01"))
      common-lisp:nil "RevokeSnapshotAccessResult" *error-map*)))
 (common-lisp:export 'revoke-snapshot-access))
(common-lisp:progn
 (common-lisp:defun rotate-encryption-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rotate-encryption-key-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RotateEncryptionKey"
                                                        "2012-12-01"))
      common-lisp:nil "RotateEncryptionKeyResult" *error-map*)))
 (common-lisp:export 'rotate-encryption-key))

;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/snowball/api
  (:use)
  (:nicknames #:aws/snowball)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request))
(common-lisp:in-package #:aws-sdk/services/snowball/api)
(common-lisp:progn
 (common-lisp:defclass snowball-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "snowball"))
 (common-lisp:export 'snowball-request))
(common-lisp:progn
 (common-lisp:defstruct
     (address (:copier common-lisp:nil) (:conc-name "struct-shape-address-"))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (company common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street1 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street2 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (street3 common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (city common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state-or-province common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (prefecture-or-district common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (landmark common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (postal-code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-restricted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street1))
      (common-lisp:list
       (common-lisp:cons "Street1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street2))
      (common-lisp:list
       (common-lisp:cons "Street2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'street3))
      (common-lisp:list
       (common-lisp:cons "Street3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-province))
      (common-lisp:list
       (common-lisp:cons "StateOrProvince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prefecture-or-district))
      (common-lisp:list
       (common-lisp:cons "PrefectureOrDistrict"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'landmark))
      (common-lisp:list
       (common-lisp:cons "Landmark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-restricted))
      (common-lisp:list
       (common-lisp:cons "IsRestricted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:deftype address-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype address-list () '(trivial-types:proper-list address))
 (common-lisp:defun |make-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-cluster-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-cluster-request 'make-cancel-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-cluster-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-cluster-result 'make-cancel-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-job-result 'make-cancel-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-result))
   common-lisp:nil))
(common-lisp:deftype cluster-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-limit-exceeded-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-limit-exceeded-exception
                    'make-cluster-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-list-entry-"))
   (cluster-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-state common-lisp:nil :type
    (common-lisp:or cluster-state common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-list-entry 'make-cluster-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-state))
      (common-lisp:list
       (common-lisp:cons "ClusterState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-list-entry-list ()
   '(trivial-types:proper-list cluster-list-entry))
 (common-lisp:defun |make-cluster-list-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-metadata-"))
   (cluster-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (cluster-state common-lisp:nil :type
    (common-lisp:or cluster-state common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-metadata 'make-cluster-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-state))
      (common-lisp:list
       (common-lisp:cons "ClusterState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-metadata))
   common-lisp:nil))
(common-lisp:deftype cluster-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-address-request-"))
   (address (common-lisp:error ":address is required") :type
    (common-lisp:or address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-address-request 'make-create-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-address-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-address-result-"))
   (address-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-address-result 'make-create-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-request-"))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or job-type common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or job-resource common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (address-id (common-lisp:error ":address-id is required") :type
    (common-lisp:or address-id common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (shipping-option (common-lisp:error ":shipping-option is required") :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cluster-result-"))
   (cluster-id common-lisp:nil :type
    (common-lisp:or cluster-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-result 'make-create-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-request-"))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (cluster-id common-lisp:nil :type
    (common-lisp:or cluster-id common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-result-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-result 'make-create-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-transfer (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-transfer-"))
   (bytes-transferred common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (objects-transferred common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (total-bytes common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (total-objects common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-transfer 'make-data-transfer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-transfer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-transfer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-transferred))
      (common-lisp:list
       (common-lisp:cons "BytesTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects-transferred))
      (common-lisp:list
       (common-lisp:cons "ObjectsTransferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-bytes))
      (common-lisp:list
       (common-lisp:cons "TotalBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-objects))
      (common-lisp:list
       (common-lisp:cons "TotalObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-transfer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-address-request-"))
   (address-id (common-lisp:error ":address-id is required") :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-address-request 'make-describe-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-address-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-address-result-"))
   (address common-lisp:nil :type (common-lisp:or address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-address-result 'make-describe-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addresses-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-request
                    'make-describe-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addresses-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addresses-result-"))
   (addresses common-lisp:nil :type
    (common-lisp:or address-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-result
                    'make-describe-addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-request 'make-describe-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cluster-result-"))
   (cluster-metadata common-lisp:nil :type
    (common-lisp:or cluster-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cluster-result 'make-describe-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-metadata))
      (common-lisp:list
       (common-lisp:cons "ClusterMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-request 'make-describe-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-result-"))
   (job-metadata common-lisp:nil :type
    (common-lisp:or job-metadata common-lisp:null))
   (sub-job-metadata common-lisp:nil :type
    (common-lisp:or job-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-result 'make-describe-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-metadata))
      (common-lisp:list
       (common-lisp:cons "JobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-job-metadata))
      (common-lisp:list
       (common-lisp:cons "SubJobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-trigger-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-trigger-definition-"))
   (event-resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-trigger-definition 'make-event-trigger-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EventResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-trigger-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-trigger-definition-list ()
   '(trivial-types:proper-list event-trigger-definition))
 (common-lisp:defun |make-event-trigger-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-trigger-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-manifest-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-manifest-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-manifest-request 'make-get-job-manifest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-manifest-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-manifest-result-"))
   (manifest-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-manifest-result 'make-get-job-manifest-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-uri))
      (common-lisp:list
       (common-lisp:cons "ManifestURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-manifest-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-unlock-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-unlock-code-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-unlock-code-request
                    'make-get-job-unlock-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-unlock-code-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-unlock-code-result-"))
   (unlock-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-unlock-code-result
                    'make-get-job-unlock-code-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlock-code))
      (common-lisp:list
       (common-lisp:cons "UnlockCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-unlock-code-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snowball-usage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snowball-usage-request-")))
 (common-lisp:export
  (common-lisp:list 'get-snowball-usage-request
                    'make-get-snowball-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snowball-usage-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snowball-usage-result-"))
   (snowball-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snowballs-in-use common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snowball-usage-result
                    'make-get-snowball-usage-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-limit))
      (common-lisp:list
       (common-lisp:cons "SnowballLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowballs-in-use))
      (common-lisp:list
       (common-lisp:cons "SnowballsInUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snowball-usage-result))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-address-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-address-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-address-exception
                    'make-invalid-address-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-address-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-address-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-address-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-input-combination-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-input-combination-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-combination-exception
                    'make-invalid-input-combination-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-input-combination-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-input-combination-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-input-combination-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-job-state-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-job-state-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-job-state-exception
                    'make-invalid-job-state-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-job-state-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-job-state-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-job-state-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-next-token-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-next-token-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'make-invalid-next-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-resource-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-resource-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-exception
                    'make-invalid-resource-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-resource-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-resource-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-resource-exception))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-list-entry-"))
   (job-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (job-state common-lisp:nil :type
    (common-lisp:or job-state common-lisp:null))
   (is-master common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-list-entry 'make-job-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-state))
      (common-lisp:list
       (common-lisp:cons "JobState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-master))
      (common-lisp:list
       (common-lisp:cons "IsMaster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list-entry-list ()
   '(trivial-types:proper-list job-list-entry))
 (common-lisp:defun |make-job-list-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-logs (:copier common-lisp:nil) (:conc-name "struct-shape-job-logs-"))
   (job-completion-report-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (job-success-log-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (job-failure-log-uri common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-logs 'make-job-logs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-completion-report-uri))
      (common-lisp:list
       (common-lisp:cons "JobCompletionReportURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-success-log-uri))
      (common-lisp:list
       (common-lisp:cons "JobSuccessLogURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-failure-log-uri))
      (common-lisp:list
       (common-lisp:cons "JobFailureLogURI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-metadata-"))
   (job-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (job-state common-lisp:nil :type
    (common-lisp:or job-state common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (snowball-type common-lisp:nil :type
    (common-lisp:or snowball-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-details common-lisp:nil :type
    (common-lisp:or shipping-details common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (data-transfer-progress common-lisp:nil :type
    (common-lisp:or data-transfer common-lisp:null))
   (job-log-info common-lisp:nil :type
    (common-lisp:or job-logs common-lisp:null))
   (cluster-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-metadata 'make-job-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-state))
      (common-lisp:list
       (common-lisp:cons "JobState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowball-type))
      (common-lisp:list
       (common-lisp:cons "SnowballType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-details))
      (common-lisp:list
       (common-lisp:cons "ShippingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-progress))
      (common-lisp:list
       (common-lisp:cons "DataTransferProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-log-info))
      (common-lisp:list
       (common-lisp:cons "JobLogInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-metadata-list ()
   '(trivial-types:proper-list job-metadata))
 (common-lisp:defun |make-job-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-resource-"))
   (s3resources common-lisp:nil :type
    (common-lisp:or s3resource-list common-lisp:null))
   (lambda-resources common-lisp:nil :type
    (common-lisp:or lambda-resource-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-resource 'make-job-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resources))
      (common-lisp:list
       (common-lisp:cons "S3Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-resources))
      (common-lisp:list
       (common-lisp:cons "LambdaResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-resource))
   common-lisp:nil))
(common-lisp:deftype job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-state-list () '(trivial-types:proper-list job-state))
 (common-lisp:defun |make-job-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kmsrequest-failed-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-kmsrequest-failed-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsrequest-failed-exception
                    'make-kmsrequest-failed-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kmsrequest-failed-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kmsrequest-failed-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kmsrequest-failed-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (key-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-range-"))
   (begin-marker common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (end-marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-range 'make-key-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-marker))
      (common-lisp:list
       (common-lisp:cons "BeginMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-marker))
      (common-lisp:list
       (common-lisp:cons "EndMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-range))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-resource-"))
   (lambda-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (event-triggers common-lisp:nil :type
    (common-lisp:or event-trigger-definition-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-resource 'make-lambda-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-triggers))
      (common-lisp:list
       (common-lisp:cons "EventTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-resource-list ()
   '(trivial-types:proper-list lambda-resource))
 (common-lisp:defun |make-lambda-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lambda-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cluster-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cluster-jobs-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-jobs-request
                    'make-list-cluster-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cluster-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cluster-jobs-result-"))
   (job-list-entries common-lisp:nil :type
    (common-lisp:or job-list-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-jobs-result 'make-list-cluster-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-clusters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-clusters-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-clusters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-clusters-result-"))
   (cluster-list-entries common-lisp:nil :type
    (common-lisp:or cluster-list-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-result 'make-list-clusters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-list-entries))
      (common-lisp:list
       (common-lisp:cons "ClusterListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-result-"))
   (job-list-entries common-lisp:nil :type
    (common-lisp:or job-list-entry-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-list-entries))
      (common-lisp:list
       (common-lisp:cons "JobListEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:deftype list-limit () 'common-lisp:integer)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (notification (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-"))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (job-states-to-notify common-lisp:nil :type
    (common-lisp:or job-state-list common-lisp:null))
   (notify-all common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'notification 'make-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-states-to-notify))
      (common-lisp:list
       (common-lisp:cons "JobStatesToNotify"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notify-all))
      (common-lisp:list
       (common-lisp:cons "NotifyAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3resource-"))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (key-range common-lisp:nil :type
    (common-lisp:or key-range common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3resource 'make-s3resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-range))
      (common-lisp:list
       (common-lisp:cons "KeyRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3resource-list ()
   '(trivial-types:proper-list s3resource))
 (common-lisp:defun |make-s3resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (shipment (:copier common-lisp:nil) (:conc-name "struct-shape-shipment-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tracking-number common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'shipment 'make-shipment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-number))
      (common-lisp:list
       (common-lisp:cons "TrackingNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (shipping-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-shipping-details-"))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (inbound-shipment common-lisp:nil :type
    (common-lisp:or shipment common-lisp:null))
   (outbound-shipment common-lisp:nil :type
    (common-lisp:or shipment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'shipping-details 'make-shipping-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipping-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipping-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-shipment))
      (common-lisp:list
       (common-lisp:cons "InboundShipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outbound-shipment))
      (common-lisp:list
       (common-lisp:cons "OutboundShipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipping-details))
   common-lisp:nil))
(common-lisp:deftype shipping-option () 'common-lisp:string)
(common-lisp:deftype snowball-capacity () 'common-lisp:string)
(common-lisp:deftype snowball-type () 'common-lisp:string)
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unsupported-address-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsupported-address-exception-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsupported-address-exception
                    'make-unsupported-address-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-address-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-address-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-address-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-request-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or cluster-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cluster-result-")))
 (common-lisp:export
  (common-lisp:list 'update-cluster-result 'make-update-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or job-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or notification common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or job-resource common-lisp:null))
   (address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null))
   (shipping-option common-lisp:nil :type
    (common-lisp:or shipping-option common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snowball-capacity-preference common-lisp:nil :type
    (common-lisp:or snowball-capacity common-lisp:null))
   (forwarding-address-id common-lisp:nil :type
    (common-lisp:or address-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-id))
      (common-lisp:list
       (common-lisp:cons "AddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-option))
      (common-lisp:list
       (common-lisp:cons "ShippingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snowball-capacity-preference))
      (common-lisp:list
       (common-lisp:cons "SnowballCapacityPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarding-address-id))
      (common-lisp:list
       (common-lisp:cons "ForwardingAddressId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-result-")))
 (common-lisp:export
  (common-lisp:list 'update-job-result 'make-update-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-cluster))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CancelJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address)
   (common-lisp:declare (common-lisp:ignorable address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAddress"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-address))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type resources description address-id
                     kms-key-arn role-arn snowball-type shipping-option
                     notification forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable job-type resources description address-id
     kms-key-arn role-arn snowball-type shipping-option notification
     forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-type resources description address-id
                     kms-key-arn role-arn snowball-capacity-preference
                     shipping-option notification cluster-id snowball-type
                     forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable job-type resources description address-id
     kms-key-arn role-arn snowball-capacity-preference shipping-option
     notification cluster-id snowball-type forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun describe-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address-id)
   (common-lisp:declare (common-lisp:ignorable address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddress"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-address))
(common-lisp:progn
 (common-lisp:defun describe-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addresses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddresses"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-addresses))
(common-lisp:progn
 (common-lisp:defun describe-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id)
   (common-lisp:declare (common-lisp:ignorable cluster-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-cluster))
(common-lisp:progn
 (common-lisp:defun describe-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-job))
(common-lisp:progn
 (common-lisp:defun get-job-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobManifest"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-job-manifest))
(common-lisp:progn
 (common-lisp:defun get-job-unlock-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-unlock-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobUnlockCode"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-job-unlock-code))
(common-lisp:progn
 (common-lisp:defun get-snowball-usage ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'snowball-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"GetSnowballUsage")
                                  ("Version" ,@"2016-06-30"))))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'get-snowball-usage))
(common-lisp:progn
 (common-lisp:defun list-cluster-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cluster-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusterJobs"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-cluster-jobs))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusters"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListJobs"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-id role-arn description resources
                     address-id shipping-option notification
                     forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable cluster-id role-arn description resources address-id
     shipping-option notification forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCluster"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id role-arn notification resources
                     address-id shipping-option description
                     snowball-capacity-preference forwarding-address-id)
   (common-lisp:declare
    (common-lisp:ignorable job-id role-arn notification resources address-id
     shipping-option description snowball-capacity-preference
     forwarding-address-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'snowball-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateJob"
                                                        "2016-06-30"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-job))

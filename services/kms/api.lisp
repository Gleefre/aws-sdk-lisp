;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kms/api
  (:use)
  (:nicknames #:aws/kms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kms/api)
(common-lisp:progn
 (common-lisp:defclass kms-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "kms"))
 (common-lisp:export 'kms-request))
(common-lisp:progn
 (common-lisp:define-condition kms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kms-error))
(common-lisp:defvar *error-map*
  '(("AlreadyExistsException" . already-exists-exception)
    ("DependencyTimeoutException" . dependency-timeout-exception)
    ("DisabledException" . disabled-exception)
    ("ExpiredImportTokenException" . expired-import-token-exception)
    ("IncorrectKeyMaterialException" . incorrect-key-material-exception)
    ("InvalidAliasNameException" . invalid-alias-name-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidCiphertextException" . invalid-ciphertext-exception)
    ("InvalidGrantIdException" . invalid-grant-id-exception)
    ("InvalidGrantTokenException" . invalid-grant-token-exception)
    ("InvalidImportTokenException" . invalid-import-token-exception)
    ("InvalidKeyUsageException" . invalid-key-usage-exception)
    ("InvalidMarkerException" . invalid-marker-exception)
    ("KMSInternalException" . kmsinternal-exception)
    ("KMSInvalidStateException" . kmsinvalid-state-exception)
    ("KeyUnavailableException" . key-unavailable-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("NotFoundException" . not-found-exception)
    ("TagException" . tag-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:deftype awsaccount-id-type () 'common-lisp:string)
(common-lisp:deftype algorithm-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alias-list ()
   '(trivial-types:proper-list alias-list-entry))
 (common-lisp:defun |make-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (alias-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-alias-list-entry-"))
   (alias-name common-lisp:nil :type
    (common-lisp:or alias-name-type common-lisp:null))
   (alias-arn common-lisp:nil :type (common-lisp:or arn-type common-lisp:null))
   (target-key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alias-list-entry 'make-alias-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-arn))
      (common-lisp:list
       (common-lisp:cons "AliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-id))
      (common-lisp:list
       (common-lisp:cons "TargetKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias-list-entry))
   common-lisp:nil))
(common-lisp:deftype alias-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:deftype arn-type () 'common-lisp:string)
(common-lisp:deftype boolean-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-key-deletion-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-key-deletion-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-key-deletion-request
                    'make-cancel-key-deletion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-key-deletion-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-key-deletion-response-"))
   (key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-key-deletion-response
                    'make-cancel-key-deletion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-response))
   common-lisp:nil))
(common-lisp:deftype ciphertext-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-alias-request-"))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name-type common-lisp:null))
   (target-key-id (common-lisp:error ":target-key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-id))
      (common-lisp:list
       (common-lisp:cons "TargetKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grant-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (grantee-principal (common-lisp:error ":grantee-principal is required")
    :type (common-lisp:or principal-id-type common-lisp:null))
   (retiring-principal common-lisp:nil :type
    (common-lisp:or principal-id-type common-lisp:null))
   (operations common-lisp:nil :type
    (common-lisp:or grant-operation-list common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or grant-constraints common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or grant-name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grant-request 'make-create-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "RetiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grant-response-"))
   (grant-token common-lisp:nil :type
    (common-lisp:or grant-token-type common-lisp:null))
   (grant-id common-lisp:nil :type
    (common-lisp:or grant-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grant-response 'make-create-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-token))
      (common-lisp:list
       (common-lisp:cons "GrantToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-request-"))
   (policy common-lisp:nil :type (common-lisp:or policy-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-type common-lisp:null))
   (key-usage common-lisp:nil :type
    (common-lisp:or key-usage-type common-lisp:null))
   (origin common-lisp:nil :type (common-lisp:or origin-type common-lisp:null))
   (bypass-policy-lockout-safety-check common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-request 'make-create-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-safety-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutSafetyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-response-"))
   (key-metadata common-lisp:nil :type
    (common-lisp:or key-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-response 'make-create-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-metadata))
      (common-lisp:list
       (common-lisp:cons "KeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-key-response))
   common-lisp:nil))
(common-lisp:deftype data-key-spec () 'common-lisp:string)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (decrypt-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrypt-request-"))
   (ciphertext-blob (common-lisp:error ":ciphertext-blob is required") :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (encryption-context common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'decrypt-request 'make-decrypt-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrypt-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrypt-response-"))
   (key-id common-lisp:nil :type (common-lisp:or key-id-type common-lisp:null))
   (plaintext common-lisp:nil :type
    (common-lisp:or plaintext-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrypt-response 'make-decrypt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-alias-request-"))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-alias-request 'make-delete-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-imported-key-material-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-imported-key-material-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-imported-key-material-request
                    'make-delete-imported-key-material-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-imported-key-material-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-imported-key-material-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-imported-key-material-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-timeout-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-timeout-exception
                    'dependency-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-key-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-key-request 'make-describe-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-key-response-"))
   (key-metadata common-lisp:nil :type
    (common-lisp:or key-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-key-response 'make-describe-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-metadata))
      (common-lisp:list
       (common-lisp:cons "KeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   common-lisp:nil))
(common-lisp:deftype description-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disable-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-key-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-key-request 'make-disable-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-key-rotation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-key-rotation-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-key-rotation-request
                    'make-disable-key-rotation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-key-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-key-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-key-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition disabled-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'disabled-exception 'disabled-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-key-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-key-request 'make-enable-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-key-rotation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-key-rotation-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-key-rotation-request
                    'make-enable-key-rotation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-key-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-key-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-key-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encrypt-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-encrypt-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (plaintext (common-lisp:error ":plaintext is required") :type
    (common-lisp:or plaintext-type common-lisp:null))
   (encryption-context common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'encrypt-request 'make-encrypt-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encrypt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encrypt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encrypt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encrypt-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-encrypt-response-"))
   (ciphertext-blob common-lisp:nil :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encrypt-response 'make-encrypt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encrypt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encrypt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encrypt-response))
   common-lisp:nil))
(common-lisp:deftype encryption-context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype encryption-context-type () 'common-lisp:hash-table)
 (common-lisp:defun |make-encryption-context-type|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype encryption-context-value () 'common-lisp:string)
(common-lisp:deftype error-message-type () 'common-lisp:string)
(common-lisp:deftype expiration-model-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-import-token-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-import-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-import-token-exception
                    'expired-import-token-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-data-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-data-key-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (encryption-context common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (number-of-bytes common-lisp:nil :type
    (common-lisp:or number-of-bytes-type common-lisp:null))
   (key-spec common-lisp:nil :type
    (common-lisp:or data-key-spec common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-request
                    'make-generate-data-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-bytes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-data-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-data-key-response-"))
   (ciphertext-blob common-lisp:nil :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (plaintext common-lisp:nil :type
    (common-lisp:or plaintext-type common-lisp:null))
   (key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-response
                    'make-generate-data-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-data-key-without-plaintext-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-data-key-without-plaintext-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (encryption-context common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (key-spec common-lisp:nil :type
    (common-lisp:or data-key-spec common-lisp:null))
   (number-of-bytes common-lisp:nil :type
    (common-lisp:or number-of-bytes-type common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-without-plaintext-request
                    'make-generate-data-key-without-plaintext-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-bytes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-data-key-without-plaintext-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-data-key-without-plaintext-response-"))
   (ciphertext-blob common-lisp:nil :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-without-plaintext-response
                    'make-generate-data-key-without-plaintext-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-random-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-random-request-"))
   (number-of-bytes common-lisp:nil :type
    (common-lisp:or number-of-bytes-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-random-request 'make-generate-random-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-bytes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-random-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-random-response-"))
   (plaintext common-lisp:nil :type
    (common-lisp:or plaintext-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-random-response 'make-generate-random-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-policy-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-policy-request 'make-get-key-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-policy-response-"))
   (policy common-lisp:nil :type
    (common-lisp:or policy-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-policy-response 'make-get-key-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-rotation-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-rotation-status-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-rotation-status-request
                    'make-get-key-rotation-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-rotation-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-rotation-status-response-"))
   (key-rotation-enabled common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-rotation-status-response
                    'make-get-key-rotation-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-rotation-enabled))
      (common-lisp:list
       (common-lisp:cons "KeyRotationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-parameters-for-import-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-parameters-for-import-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (wrapping-algorithm (common-lisp:error ":wrapping-algorithm is required")
    :type (common-lisp:or algorithm-spec common-lisp:null))
   (wrapping-key-spec (common-lisp:error ":wrapping-key-spec is required")
    :type (common-lisp:or wrapping-key-spec common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-parameters-for-import-request
                    'make-get-parameters-for-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wrapping-algorithm))
      (common-lisp:list
       (common-lisp:cons "WrappingAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wrapping-key-spec))
      (common-lisp:list
       (common-lisp:cons "WrappingKeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-parameters-for-import-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-parameters-for-import-response-"))
   (key-id common-lisp:nil :type (common-lisp:or key-id-type common-lisp:null))
   (import-token common-lisp:nil :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or plaintext-type common-lisp:null))
   (parameters-valid-to common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-parameters-for-import-response
                    'make-get-parameters-for-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-token))
      (common-lisp:list
       (common-lisp:cons "ImportToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters-valid-to))
      (common-lisp:list
       (common-lisp:cons "ParametersValidTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grant-constraints (:copier common-lisp:nil)
      (:conc-name "struct-shape-grant-constraints-"))
   (encryption-context-subset common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (encryption-context-equals common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grant-constraints 'make-grant-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-subset))
      (common-lisp:list
       (common-lisp:cons "EncryptionContextSubset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-equals))
      (common-lisp:list
       (common-lisp:cons "EncryptionContextEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-constraints))
   common-lisp:nil))
(common-lisp:deftype grant-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grant-list ()
   '(trivial-types:proper-list grant-list-entry))
 (common-lisp:defun |make-grant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (grant-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-grant-list-entry-"))
   (key-id common-lisp:nil :type (common-lisp:or key-id-type common-lisp:null))
   (grant-id common-lisp:nil :type
    (common-lisp:or grant-id-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or grant-name-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (grantee-principal common-lisp:nil :type
    (common-lisp:or principal-id-type common-lisp:null))
   (retiring-principal common-lisp:nil :type
    (common-lisp:or principal-id-type common-lisp:null))
   (issuing-account common-lisp:nil :type
    (common-lisp:or principal-id-type common-lisp:null))
   (operations common-lisp:nil :type
    (common-lisp:or grant-operation-list common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or grant-constraints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grant-list-entry 'make-grant-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "RetiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuing-account))
      (common-lisp:list
       (common-lisp:cons "IssuingAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-list-entry))
   common-lisp:nil))
(common-lisp:deftype grant-name-type () 'common-lisp:string)
(common-lisp:deftype grant-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grant-operation-list ()
   '(trivial-types:proper-list grant-operation))
 (common-lisp:defun |make-grant-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype grant-token-list ()
   '(trivial-types:proper-list grant-token-type))
 (common-lisp:defun |make-grant-token-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-token-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype grant-token-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-key-material-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-key-material-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (import-token (common-lisp:error ":import-token is required") :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (encrypted-key-material
    (common-lisp:error ":encrypted-key-material is required") :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (valid-to common-lisp:nil :type (common-lisp:or date-type common-lisp:null))
   (expiration-model common-lisp:nil :type
    (common-lisp:or expiration-model-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-key-material-request
                    'make-import-key-material-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-token))
      (common-lisp:list
       (common-lisp:cons "ImportToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encrypted-key-material))
      (common-lisp:list
       (common-lisp:cons "EncryptedKeyMaterial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-to))
      (common-lisp:list
       (common-lisp:cons "ValidTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-model))
      (common-lisp:list
       (common-lisp:cons "ExpirationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-key-material-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-key-material-response-")))
 (common-lisp:export
  (common-lisp:list 'import-key-material-response
                    'make-import-key-material-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition incorrect-key-material-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incorrect-key-material-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-key-material-exception
                    'incorrect-key-material-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-alias-name-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-alias-name-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-alias-name-exception
                    'invalid-alias-name-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ciphertext-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-ciphertext-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-ciphertext-exception
                    'invalid-ciphertext-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-grant-id-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-grant-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-grant-id-exception
                    'invalid-grant-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-grant-token-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-grant-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-grant-token-exception
                    'invalid-grant-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-import-token-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-import-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-import-token-exception
                    'invalid-import-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-key-usage-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-key-usage-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-key-usage-exception
                    'invalid-key-usage-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-marker-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-marker-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-marker-exception
                    'invalid-marker-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinternal-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinternal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinternal-exception 'kmsinternal-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-state-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-exception
                    'kmsinvalid-state-exception-message)))
(common-lisp:deftype key-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list key-list-entry))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (key-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-list-entry-"))
   (key-id common-lisp:nil :type (common-lisp:or key-id-type common-lisp:null))
   (key-arn common-lisp:nil :type (common-lisp:or arn-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-list-entry 'make-key-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-list-entry))
   common-lisp:nil))
(common-lisp:deftype key-manager-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-metadata-"))
   (awsaccount-id common-lisp:nil :type
    (common-lisp:or awsaccount-id-type common-lisp:null))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn-type common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-type common-lisp:null))
   (key-usage common-lisp:nil :type
    (common-lisp:or key-usage-type common-lisp:null))
   (key-state common-lisp:nil :type
    (common-lisp:or key-state common-lisp:null))
   (deletion-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (valid-to common-lisp:nil :type (common-lisp:or date-type common-lisp:null))
   (origin common-lisp:nil :type (common-lisp:or origin-type common-lisp:null))
   (expiration-model common-lisp:nil :type
    (common-lisp:or expiration-model-type common-lisp:null))
   (key-manager common-lisp:nil :type
    (common-lisp:or key-manager-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-metadata 'make-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsaccount-id))
      (common-lisp:list
       (common-lisp:cons "AWSAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-state))
      (common-lisp:list
       (common-lisp:cons "KeyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-to))
      (common-lisp:list
       (common-lisp:cons "ValidTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-model))
      (common-lisp:list
       (common-lisp:cons "ExpirationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-manager))
      (common-lisp:list
       (common-lisp:cons "KeyManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-metadata))
   common-lisp:nil))
(common-lisp:deftype key-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition key-unavailable-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       key-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'key-unavailable-exception
                    'key-unavailable-exception-message)))
(common-lisp:deftype key-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype limit-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-request-"))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-response-"))
   (aliases common-lisp:nil :type (common-lisp:or alias-list common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-grants-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-grants-request-"))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker-type common-lisp:null))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-grants-request 'make-list-grants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-grants-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-grants-response-"))
   (grants common-lisp:nil :type (common-lisp:or grant-list common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-grants-response 'make-list-grants-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-grants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-grants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-grants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-key-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-key-policies-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-key-policies-request
                    'make-list-key-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-key-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-key-policies-response-"))
   (policy-names common-lisp:nil :type
    (common-lisp:or policy-name-list common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-key-policies-response
                    'make-list-key-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keys-request-"))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keys-request 'make-list-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-keys-response-"))
   (keys common-lisp:nil :type (common-lisp:or key-list common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-keys-response 'make-list-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-tags-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-tags-request
                    'make-list-resource-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-tags-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker-type common-lisp:null))
   (truncated common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-tags-response
                    'make-list-resource-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-retirable-grants-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-retirable-grants-request-"))
   (limit common-lisp:nil :type (common-lisp:or limit-type common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker-type common-lisp:null))
   (retiring-principal (common-lisp:error ":retiring-principal is required")
    :type (common-lisp:or principal-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-retirable-grants-request
                    'make-list-retirable-grants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-retirable-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-retirable-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "RetiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-retirable-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:deftype marker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype number-of-bytes-type () 'common-lisp:integer)
(common-lisp:deftype origin-type () 'common-lisp:string)
(common-lisp:deftype pending-window-in-days-type () 'common-lisp:integer)
(common-lisp:deftype plaintext-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype policy-name-list ()
   '(trivial-types:proper-list policy-name-type))
 (common-lisp:defun |make-policy-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name-type () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:deftype principal-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-key-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-key-policy-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name-type common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (bypass-policy-lockout-safety-check common-lisp:nil :type
    (common-lisp:or boolean-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-key-policy-request 'make-put-key-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-key-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-key-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-safety-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutSafetyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-key-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (re-encrypt-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-re-encrypt-request-"))
   (ciphertext-blob (common-lisp:error ":ciphertext-blob is required") :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (source-encryption-context common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (destination-key-id (common-lisp:error ":destination-key-id is required")
    :type (common-lisp:or key-id-type common-lisp:null))
   (destination-encryption-context common-lisp:nil :type
    (common-lisp:or encryption-context-type common-lisp:null))
   (grant-tokens common-lisp:nil :type
    (common-lisp:or grant-token-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 're-encrypt-request 'make-re-encrypt-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input re-encrypt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input re-encrypt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-encryption-context))
      (common-lisp:list
       (common-lisp:cons "SourceEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-key-id))
      (common-lisp:list
       (common-lisp:cons "DestinationKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-encryption-context))
      (common-lisp:list
       (common-lisp:cons "DestinationEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input re-encrypt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (re-encrypt-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-re-encrypt-response-"))
   (ciphertext-blob common-lisp:nil :type
    (common-lisp:or ciphertext-type common-lisp:null))
   (source-key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null))
   (key-id common-lisp:nil :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 're-encrypt-response 'make-re-encrypt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input re-encrypt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input re-encrypt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-key-id))
      (common-lisp:list
       (common-lisp:cons "SourceKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input re-encrypt-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retire-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-retire-grant-request-"))
   (grant-token common-lisp:nil :type
    (common-lisp:or grant-token-type common-lisp:null))
   (key-id common-lisp:nil :type (common-lisp:or key-id-type common-lisp:null))
   (grant-id common-lisp:nil :type
    (common-lisp:or grant-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retire-grant-request 'make-retire-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retire-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retire-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-token))
      (common-lisp:list
       (common-lisp:cons "GrantToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retire-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-grant-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (grant-id (common-lisp:error ":grant-id is required") :type
    (common-lisp:or grant-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-grant-request 'make-revoke-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revoke-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revoke-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revoke-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-key-deletion-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-key-deletion-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (pending-window-in-days common-lisp:nil :type
    (common-lisp:or pending-window-in-days-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-key-deletion-request
                    'make-schedule-key-deletion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-window-in-days))
      (common-lisp:list
       (common-lisp:cons "PendingWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-key-deletion-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-key-deletion-response-"))
   (key-id common-lisp:nil :type (common-lisp:or key-id-type common-lisp:null))
   (deletion-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-key-deletion-response
                    'make-schedule-key-deletion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or tag-key-type common-lisp:null))
   (tag-value (common-lisp:error ":tag-value is required") :type
    (common-lisp:or tag-value-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value))
      (common-lisp:list
       (common-lisp:cons "TagValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tag-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-exception-message)))
 (common-lisp:export (common-lisp:list 'tag-exception 'tag-exception-message)))
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list tag-key-type))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-alias-request-"))
   (alias-name (common-lisp:error ":alias-name is required") :type
    (common-lisp:or alias-name-type common-lisp:null))
   (target-key-id (common-lisp:error ":target-key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-alias-request 'make-update-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-id))
      (common-lisp:list
       (common-lisp:cons "TargetKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-key-description-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-key-description-request-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or key-id-type common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-key-description-request
                    'make-update-key-description-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-key-description-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-key-description-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-key-description-request))
   common-lisp:nil))
(common-lisp:deftype wrapping-key-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-key-deletion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-key-deletion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelKeyDeletion"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-key-deletion))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-name target-key-id)
   (common-lisp:declare (common-lisp:ignorable alias-name target-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAlias"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grantee-principal
                     retiring-principal operations constraints grant-tokens
                     name)
   (common-lisp:declare
    (common-lisp:ignorable key-id grantee-principal retiring-principal
     operations constraints grant-tokens name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGrant"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-grant))
(common-lisp:progn
 (common-lisp:defun create-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy description key-usage origin
                     bypass-policy-lockout-safety-check tags)
   (common-lisp:declare
    (common-lisp:ignorable policy description key-usage origin
     bypass-policy-lockout-safety-check tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateKey"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-key))
(common-lisp:progn
 (common-lisp:defun decrypt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ciphertext-blob encryption-context
                     grant-tokens)
   (common-lisp:declare
    (common-lisp:ignorable ciphertext-blob encryption-context grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decrypt-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Decrypt"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decrypt))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-name)
   (common-lisp:declare (common-lisp:ignorable alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlias"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-imported-key-material
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-imported-key-material-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteImportedKeyMaterial"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-imported-key-material))
(common-lisp:progn
 (common-lisp:defun describe-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grant-tokens)
   (common-lisp:declare (common-lisp:ignorable key-id grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeKey"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-key))
(common-lisp:progn
 (common-lisp:defun disable-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DisableKey"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-key))
(common-lisp:progn
 (common-lisp:defun disable-key-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-key-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableKeyRotation"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-key-rotation))
(common-lisp:progn
 (common-lisp:defun enable-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "EnableKey"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-key))
(common-lisp:progn
 (common-lisp:defun enable-key-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-key-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableKeyRotation"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-key-rotation))
(common-lisp:progn
 (common-lisp:defun encrypt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id plaintext encryption-context
                     grant-tokens)
   (common-lisp:declare
    (common-lisp:ignorable key-id plaintext encryption-context grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-encrypt-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Encrypt"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'encrypt))
(common-lisp:progn
 (common-lisp:defun generate-data-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id encryption-context number-of-bytes
                     key-spec grant-tokens)
   (common-lisp:declare
    (common-lisp:ignorable key-id encryption-context number-of-bytes key-spec
     grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-data-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateDataKey"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-data-key))
(common-lisp:progn
 (common-lisp:defun generate-data-key-without-plaintext
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id encryption-context key-spec
                     number-of-bytes grant-tokens)
   (common-lisp:declare
    (common-lisp:ignorable key-id encryption-context key-spec number-of-bytes
     grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-data-key-without-plaintext-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateDataKeyWithoutPlaintext"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-data-key-without-plaintext))
(common-lisp:progn
 (common-lisp:defun generate-random
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key number-of-bytes)
   (common-lisp:declare (common-lisp:ignorable number-of-bytes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-random-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateRandom"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-random))
(common-lisp:progn
 (common-lisp:defun get-key-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id policy-name)
   (common-lisp:declare (common-lisp:ignorable key-id policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyPolicy"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-key-policy))
(common-lisp:progn
 (common-lisp:defun get-key-rotation-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-rotation-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyRotationStatus"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-key-rotation-status))
(common-lisp:progn
 (common-lisp:defun get-parameters-for-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id wrapping-algorithm
                     wrapping-key-spec)
   (common-lisp:declare
    (common-lisp:ignorable key-id wrapping-algorithm wrapping-key-spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-parameters-for-import-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetParametersForImport"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parameters-for-import))
(common-lisp:progn
 (common-lisp:defun import-key-material
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id import-token
                     encrypted-key-material valid-to expiration-model)
   (common-lisp:declare
    (common-lisp:ignorable key-id import-token encrypted-key-material valid-to
     expiration-model))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-key-material-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportKeyMaterial"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-key-material))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker)
   (common-lisp:declare (common-lisp:ignorable limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAliases"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker key-id)
   (common-lisp:declare (common-lisp:ignorable limit marker key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListGrants"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-grants))
(common-lisp:progn
 (common-lisp:defun list-key-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id limit marker)
   (common-lisp:declare (common-lisp:ignorable key-id limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-key-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListKeyPolicies"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-key-policies))
(common-lisp:progn
 (common-lisp:defun list-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker)
   (common-lisp:declare (common-lisp:ignorable limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListKeys"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-keys))
(common-lisp:progn
 (common-lisp:defun list-resource-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id limit marker)
   (common-lisp:declare (common-lisp:ignorable key-id limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceTags"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-tags))
(common-lisp:progn
 (common-lisp:defun list-retirable-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker retiring-principal)
   (common-lisp:declare
    (common-lisp:ignorable limit marker retiring-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-retirable-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRetirableGrants"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-retirable-grants))
(common-lisp:progn
 (common-lisp:defun put-key-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id policy-name policy
                     bypass-policy-lockout-safety-check)
   (common-lisp:declare
    (common-lisp:ignorable key-id policy-name policy
     bypass-policy-lockout-safety-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-key-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutKeyPolicy"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-key-policy))
(common-lisp:progn
 (common-lisp:defun re-encrypt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ciphertext-blob source-encryption-context
                     destination-key-id destination-encryption-context
                     grant-tokens)
   (common-lisp:declare
    (common-lisp:ignorable ciphertext-blob source-encryption-context
     destination-key-id destination-encryption-context grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-re-encrypt-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ReEncrypt"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 're-encrypt))
(common-lisp:progn
 (common-lisp:defun retire-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-token key-id grant-id)
   (common-lisp:declare (common-lisp:ignorable grant-token key-id grant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retire-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RetireGrant"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'retire-grant))
(common-lisp:progn
 (common-lisp:defun revoke-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grant-id)
   (common-lisp:declare (common-lisp:ignorable key-id grant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeGrant"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-grant))
(common-lisp:progn
 (common-lisp:defun schedule-key-deletion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id pending-window-in-days)
   (common-lisp:declare (common-lisp:ignorable key-id pending-window-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-schedule-key-deletion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ScheduleKeyDeletion"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'schedule-key-deletion))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id tags)
   (common-lisp:declare (common-lisp:ignorable key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable key-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-name target-key-id)
   (common-lisp:declare (common-lisp:ignorable alias-name target-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAlias"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-alias))
(common-lisp:progn
 (common-lisp:defun update-key-description
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id description)
   (common-lisp:declare (common-lisp:ignorable key-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-key-description-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateKeyDescription"
                                                        "2014-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-key-description))

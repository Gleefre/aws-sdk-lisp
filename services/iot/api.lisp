;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iot/api
  (:use)
  (:nicknames #:aws/iot)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request))
(common-lisp:in-package #:aws-sdk/services/iot/api)
(common-lisp:progn
 (common-lisp:defclass iot-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "iot"))
 (common-lisp:export 'iot-request))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-certificate-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-certificate-transfer-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-certificate-transfer-request
                    'make-accept-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action (:copier common-lisp:nil) (:conc-name "struct-shape-action-"))
   (dynamo-db common-lisp:nil :type
    (common-lisp:or dynamo-dbaction common-lisp:null))
   (dynamo-dbv2 common-lisp:nil :type
    (common-lisp:or dynamo-dbv2action common-lisp:null))
   (lambda common-lisp:nil :type
    (common-lisp:or lambda-action common-lisp:null))
   (sns common-lisp:nil :type (common-lisp:or sns-action common-lisp:null))
   (sqs common-lisp:nil :type (common-lisp:or sqs-action common-lisp:null))
   (kinesis common-lisp:nil :type
    (common-lisp:or kinesis-action common-lisp:null))
   (republish common-lisp:nil :type
    (common-lisp:or republish-action common-lisp:null))
   (s3 common-lisp:nil :type (common-lisp:or s3action common-lisp:null))
   (firehose common-lisp:nil :type
    (common-lisp:or firehose-action common-lisp:null))
   (cloudwatch-metric common-lisp:nil :type
    (common-lisp:or cloudwatch-metric-action common-lisp:null))
   (cloudwatch-alarm common-lisp:nil :type
    (common-lisp:or cloudwatch-alarm-action common-lisp:null))
   (elasticsearch common-lisp:nil :type
    (common-lisp:or elasticsearch-action common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db))
      (common-lisp:list
       (common-lisp:cons "dynamoDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-dbv2))
      (common-lisp:list
       (common-lisp:cons "dynamoDBv2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns))
      (common-lisp:list
       (common-lisp:cons "sns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs))
      (common-lisp:list
       (common-lisp:cons "sqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis))
      (common-lisp:list
       (common-lisp:cons "kinesis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'republish))
      (common-lisp:list
       (common-lisp:cons "republish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firehose))
      (common-lisp:list
       (common-lisp:cons "firehose"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-metric))
      (common-lisp:list
       (common-lisp:cons "cloudwatchMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloudwatch-alarm))
      (common-lisp:list
       (common-lisp:cons "cloudwatchAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elasticsearch))
      (common-lisp:list
       (common-lisp:cons "elasticsearch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:deftype allow-auto-registration () 'common-lisp:boolean)
(common-lisp:deftype ascending-order () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (attach-principal-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-principal-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-principal-policy-request
                    'make-attach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-thing-principal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-thing-principal-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-request
                    'make-attach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-thing-principal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-thing-principal-response-")))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-response
                    'make-attach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-thing-principal-response))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-payload-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (merge common-lisp:nil :type (common-lisp:or flag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-payload 'make-attribute-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge))
      (common-lisp:list
       (common-lisp:cons "merge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-payload))
   common-lisp:nil))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-attributes| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype auto-registration-status () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-arn () 'common-lisp:string)
(common-lisp:deftype aws-iot-sql-version () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cacertificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-cacertificate-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cacertificate 'make-cacertificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cacertificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cacertificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cacertificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cacertificate-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-cacertificate-description-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (auto-registration-status common-lisp:nil :type
    (common-lisp:or auto-registration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cacertificate-description
                    'make-cacertificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-registration-status))
      (common-lisp:list
       (common-lisp:cons "autoRegistrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cacertificate-description))
   common-lisp:nil))
(common-lisp:deftype cacertificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cacertificates ()
   '(trivial-types:proper-list cacertificate))
 (common-lisp:defun |make-cacertificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cacertificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-certificate-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-certificate-transfer-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-certificate-transfer-request
                    'make-cancel-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:deftype canned-access-control-list () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-conflict-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-conflict-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-conflict-exception
                    'make-certificate-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-conflict-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-conflict-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-conflict-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-description-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (ca-certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (previous-owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (transfer-data common-lisp:nil :type
    (common-lisp:or transfer-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-description 'make-certificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-id))
      (common-lisp:list
       (common-lisp:cons "caCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owned-by))
      (common-lisp:list
       (common-lisp:cons "ownedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-owned-by))
      (common-lisp:list
       (common-lisp:cons "previousOwnedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-data))
      (common-lisp:list
       (common-lisp:cons "transferData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-description))
   common-lisp:nil))
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:deftype certificate-pem () 'common-lisp:string)
(common-lisp:deftype certificate-signing-request () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-state-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-state-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-state-exception
                    'make-certificate-state-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-state-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-state-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-state-exception))
   common-lisp:nil))
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-validation-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-validation-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-validation-exception
                    'make-certificate-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificates () '(trivial-types:proper-list certificate))
 (common-lisp:defun |make-certificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-alarm-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-alarm-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (alarm-name (common-lisp:error ":alarmname is required") :type
    (common-lisp:or alarm-name common-lisp:null))
   (state-reason (common-lisp:error ":statereason is required") :type
    (common-lisp:or state-reason common-lisp:null))
   (state-value (common-lisp:error ":statevalue is required") :type
    (common-lisp:or state-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-alarm-action 'make-cloudwatch-alarm-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "stateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-value))
      (common-lisp:list
       (common-lisp:cons "stateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-alarm-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-metric-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-metric-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (metric-namespace (common-lisp:error ":metricnamespace is required") :type
    (common-lisp:or metric-namespace common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (metric-value (common-lisp:error ":metricvalue is required") :type
    (common-lisp:or metric-value common-lisp:null))
   (metric-unit (common-lisp:error ":metricunit is required") :type
    (common-lisp:or metric-unit common-lisp:null))
   (metric-timestamp common-lisp:nil :type
    (common-lisp:or metric-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-metric-action 'make-cloudwatch-metric-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "metricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "metricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-unit))
      (common-lisp:list
       (common-lisp:cons "metricUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-timestamp))
      (common-lisp:list
       (common-lisp:cons "metricTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-metric-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-from-csr-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-from-csr-request-"))
   (certificate-signing-request
    (common-lisp:error ":certificatesigningrequest is required") :type
    (common-lisp:or certificate-signing-request common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-request
                    'make-create-certificate-from-csr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-signing-request))
      (common-lisp:list
       (common-lisp:cons "certificateSigningRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-from-csr-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-from-csr-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-response
                    'make-create-certificate-from-csr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-from-csr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-keys-and-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-keys-and-certificate-request-"))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-request
                    'make-create-keys-and-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-keys-and-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-keys-and-certificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (key-pair common-lisp:nil :type (common-lisp:or key-pair common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-response
                    'make-create-keys-and-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-keys-and-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-response-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null))
   (set-as-default common-lisp:nil :type
    (common-lisp:or set-as-default common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-version-response-"))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-request 'make-create-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-response-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-response 'make-create-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-request
                    'make-create-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-thing-type-response-"))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-arn common-lisp:nil :type
    (common-lisp:or thing-type-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-response
                    'make-create-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-arn))
      (common-lisp:list
       (common-lisp:cons "thingTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-thing-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-rule-payload (common-lisp:error ":topicrulepayload is required")
    :type (common-lisp:or topic-rule-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-request
                    'make-create-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-rule-payload))
      (common-lisp:list
       (common-lisp:cons "topicRulePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-topic-rule-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'topic-rule-payload)))
(common-lisp:deftype created-at-date () 'common-lisp:string)
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cacertificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-request
                    'make-delete-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cacertificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cacertificate-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-response
                    'make-delete-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-conflict-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-conflict-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'make-delete-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conflict-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conflict-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conflict-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id (common-lisp:error ":policyversionid is required") :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-code-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-request
                    'make-delete-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-code-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registration-code-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-response
                    'make-delete-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registration-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-request 'make-delete-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-thing-response 'make-delete-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-request
                    'make-delete-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-thing-type-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-response
                    'make-delete-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-thing-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-request
                    'make-delete-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-topic-rule-request))
   common-lisp:nil))
(common-lisp:deftype delivery-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null))
   (undo-deprecate common-lisp:nil :type
    (common-lisp:or undo-deprecate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-request
                    'make-deprecate-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'undo-deprecate))
      (common-lisp:list
       (common-lisp:cons "undoDeprecate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-thing-type-response-")))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-response
                    'make-deprecate-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprecate-thing-type-response))
   common-lisp:nil))
(common-lisp:deftype deprecation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cacertificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-request
                    'make-describe-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cacertificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cacertificate-response-"))
   (certificate-description common-lisp:nil :type
    (common-lisp:or cacertificate-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-response
                    'make-describe-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-description))
      (common-lisp:list
       (common-lisp:cons "certificateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-response-"))
   (certificate-description common-lisp:nil :type
    (common-lisp:or certificate-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-description))
      (common-lisp:list
       (common-lisp:cons "certificateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-request
                    'make-describe-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-response-"))
   (endpoint-address common-lisp:nil :type
    (common-lisp:or endpoint-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-response
                    'make-describe-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-address))
      (common-lisp:list
       (common-lisp:cons "endpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-request 'make-describe-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-response-"))
   (default-client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-response 'make-describe-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-client-id))
      (common-lisp:list
       (common-lisp:cons "defaultClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-type-request-"))
   (thing-type-name (common-lisp:error ":thingtypename is required") :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-request
                    'make-describe-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-thing-type-response-"))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (thing-type-metadata common-lisp:nil :type
    (common-lisp:or thing-type-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-response
                    'make-describe-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-metadata))
      (common-lisp:list
       (common-lisp:cons "thingTypeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-thing-type-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detach-principal-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-principal-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-principal-policy-request
                    'make-detach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-thing-principal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-thing-principal-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-request
                    'make-detach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-thing-principal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-thing-principal-response-")))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-response
                    'make-detach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-thing-principal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-topic-rule-request
                    'make-disable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-topic-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamo-dbaction (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamo-dbaction-"))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or table-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or dynamo-operation common-lisp:null))
   (hash-key-field (common-lisp:error ":hashkeyfield is required") :type
    (common-lisp:or hash-key-field common-lisp:null))
   (hash-key-value (common-lisp:error ":hashkeyvalue is required") :type
    (common-lisp:or hash-key-value common-lisp:null))
   (hash-key-type common-lisp:nil :type
    (common-lisp:or dynamo-key-type common-lisp:null))
   (range-key-field common-lisp:nil :type
    (common-lisp:or range-key-field common-lisp:null))
   (range-key-value common-lisp:nil :type
    (common-lisp:or range-key-value common-lisp:null))
   (range-key-type common-lisp:nil :type
    (common-lisp:or dynamo-key-type common-lisp:null))
   (payload-field common-lisp:nil :type
    (common-lisp:or payload-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dynamo-dbaction 'make-dynamo-dbaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-field))
      (common-lisp:list
       (common-lisp:cons "hashKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-value))
      (common-lisp:list
       (common-lisp:cons "hashKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-key-type))
      (common-lisp:list
       (common-lisp:cons "hashKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-field))
      (common-lisp:list
       (common-lisp:cons "rangeKeyField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-value))
      (common-lisp:list
       (common-lisp:cons "rangeKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-key-type))
      (common-lisp:list
       (common-lisp:cons "rangeKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-field))
      (common-lisp:list
       (common-lisp:cons "payloadField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbaction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamo-dbv2action (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamo-dbv2action-"))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (put-item common-lisp:nil :type
    (common-lisp:or put-item-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamo-dbv2action 'make-dynamo-dbv2action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'put-item))
      (common-lisp:list
       (common-lisp:cons "putItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbv2action))
   common-lisp:nil))
(common-lisp:deftype dynamo-key-type () 'common-lisp:string)
(common-lisp:deftype dynamo-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (endpoint (common-lisp:error ":endpoint is required") :type
    (common-lisp:or elasticsearch-endpoint common-lisp:null))
   (index (common-lisp:error ":index is required") :type
    (common-lisp:or elasticsearch-index common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or elasticsearch-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or elasticsearch-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-action 'make-elasticsearch-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elasticsearch-action))
   common-lisp:nil))
(common-lisp:deftype elasticsearch-endpoint () 'common-lisp:string)
(common-lisp:deftype elasticsearch-id () 'common-lisp:string)
(common-lisp:deftype elasticsearch-index () 'common-lisp:string)
(common-lisp:deftype elasticsearch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-topic-rule-request
                    'make-enable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-topic-rule-request))
   common-lisp:nil))
(common-lisp:deftype endpoint-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (firehose-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-firehose-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (delivery-stream-name (common-lisp:error ":deliverystreamname is required")
    :type (common-lisp:or delivery-stream-name common-lisp:null))
   (separator common-lisp:nil :type
    (common-lisp:or firehose-separator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'firehose-action 'make-firehose-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firehose-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firehose-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-stream-name))
      (common-lisp:list
       (common-lisp:cons "deliveryStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'separator))
      (common-lisp:list
       (common-lisp:cons "separator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firehose-action))
   common-lisp:nil))
(common-lisp:deftype firehose-separator () 'common-lisp:string)
(common-lisp:deftype flag () 'common-lisp:boolean)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-options-request-")))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-request
                    'make-get-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-options-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-options-response-"))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-response
                    'make-get-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-response-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "defaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id (common-lisp:error ":policyversionid is required") :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-version-response-"))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "policyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registration-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-registration-code-request-")))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-request
                    'make-get-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registration-code-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-registration-code-response-"))
   (registration-code common-lisp:nil :type
    (common-lisp:or registration-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-response
                    'make-get-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-code))
      (common-lisp:list
       (common-lisp:cons "registrationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registration-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-request 'make-get-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-topic-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-topic-rule-response-"))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (rule common-lisp:nil :type (common-lisp:or topic-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-response 'make-get-topic-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "ruleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-topic-rule-response))
   common-lisp:nil))
(common-lisp:deftype hash-key-field () 'common-lisp:string)
(common-lisp:deftype hash-key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (internal-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-internal-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'make-internal-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input internal-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input internal-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input internal-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (internal-failure-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-internal-failure-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'make-internal-failure-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-failure-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-failure-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-failure-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-request-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-request-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'make-invalid-request-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-request-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-request-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-request-exception))
   common-lisp:nil))
(common-lisp:deftype is-default-version () 'common-lisp:boolean)
(common-lisp:deftype is-disabled () 'common-lisp:boolean)
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-pair (:copier common-lisp:nil) (:conc-name "struct-shape-key-pair-"))
   (public-key common-lisp:nil :type
    (common-lisp:or public-key common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or private-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (stream-name (common-lisp:error ":streamname is required") :type
    (common-lisp:or stream-name common-lisp:null))
   (partition-key common-lisp:nil :type
    (common-lisp:or partition-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kinesis-action 'make-kinesis-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "streamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "partitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-action-"))
   (function-arn (common-lisp:error ":functionarn is required") :type
    (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-action 'make-lambda-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "functionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cacertificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cacertificates-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-request
                    'make-list-cacertificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cacertificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cacertificates-response-"))
   (certificates common-lisp:nil :type
    (common-lisp:or cacertificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-response
                    'make-list-cacertificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cacertificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-by-carequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-by-carequest-"))
   (ca-certificate-id (common-lisp:error ":cacertificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-carequest
                    'make-list-certificates-by-carequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-carequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-by-caresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-by-caresponse-"))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-caresponse
                    'make-list-certificates-by-caresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-by-caresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-response-"))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-outgoing-certificates-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-request
                    'make-list-outgoing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-outgoing-certificates-response-"))
   (outgoing-certificates common-lisp:nil :type
    (common-lisp:or outgoing-certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-response
                    'make-list-outgoing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-certificates))
      (common-lisp:list
       (common-lisp:cons "outgoingCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-request-"))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-response-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-principals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-principals-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-request
                    'make-list-policy-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:cons "x-amzn-iot-policy" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-principals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-principals-response-"))
   (principals common-lisp:nil :type
    (common-lisp:or principals common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-response
                    'make-list-policy-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-principals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-versions-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-versions-response-"))
   (policy-versions common-lisp:nil :type
    (common-lisp:or policy-versions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-versions))
      (common-lisp:list
       (common-lisp:cons "policyVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-policies-request-"))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-request
                    'make-list-principal-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-iot-principal"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-policies-response-"))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-response
                    'make-list-principal-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "nextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-things-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-things-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-request
                    'make-list-principal-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:cons "x-amzn-principal" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-things-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-principal-things-response-"))
   (things common-lisp:nil :type
    (common-lisp:or thing-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-response
                    'make-list-principal-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-principal-things-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-principals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-principals-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-request
                    'make-list-thing-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-principals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-principals-response-"))
   (principals common-lisp:nil :type
    (common-lisp:or principals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-response
                    'make-list-thing-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-principals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-types-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-request 'make-list-thing-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-thing-types-response-"))
   (thing-types common-lisp:nil :type
    (common-lisp:or thing-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-response
                    'make-list-thing-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-types))
      (common-lisp:list
       (common-lisp:cons "thingTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-thing-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-request 'make-list-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-things-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-things-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-things-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-things-response-"))
   (things common-lisp:nil :type
    (common-lisp:or thing-attribute-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-response 'make-list-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-things-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-things-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'things))
      (common-lisp:list
       (common-lisp:cons "things"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-things-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-topic-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-topic-rules-request-"))
   (topic common-lisp:nil :type (common-lisp:or topic common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-request 'make-list-topic-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-topic-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-topic-rules-response-"))
   (rules common-lisp:nil :type
    (common-lisp:or topic-rule-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-response
                    'make-list-topic-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-topic-rules-response))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (logging-options-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-options-payload-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logging-options-payload 'make-logging-options-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "logLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-options-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (malformed-policy-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-malformed-policy-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-exception
                    'make-malformed-policy-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          malformed-policy-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          malformed-policy-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          malformed-policy-exception))
   common-lisp:nil))
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-format () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype metric-timestamp () 'common-lisp:string)
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype optional-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (outgoing-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-outgoing-certificate-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (transferred-to common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (transfer-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outgoing-certificate 'make-outgoing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transferred-to))
      (common-lisp:list
       (common-lisp:cons "transferredTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-date))
      (common-lisp:list
       (common-lisp:cons "transferDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outgoing-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outgoing-certificates ()
   '(trivial-types:proper-list outgoing-certificate))
 (common-lisp:defun |make-outgoing-certificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outgoing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype partition-key () 'common-lisp:string)
(common-lisp:deftype payload-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policies () '(trivial-types:proper-list policy))
 (common-lisp:defun |make-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy (:copier common-lisp:nil) (:conc-name "struct-shape-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "policyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "policyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-version-"))
   (version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "isDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "createDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-version))
   common-lisp:nil))
(common-lisp:deftype policy-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-versions ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun |make-policy-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal-arn))
 (common-lisp:defun |make-principals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype private-key () 'common-lisp:string)
(common-lisp:deftype public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-item-input-"))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'put-item-input 'make-put-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-item-input))
   common-lisp:nil))
(common-lisp:deftype queue-url () 'common-lisp:string)
(common-lisp:deftype range-key-field () 'common-lisp:string)
(common-lisp:deftype range-key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cacertificate-request-"))
   (ca-certificate (common-lisp:error ":cacertificate is required") :type
    (common-lisp:or certificate-pem common-lisp:null))
   (verification-certificate
    (common-lisp:error ":verificationcertificate is required") :type
    (common-lisp:or certificate-pem common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null))
   (allow-auto-registration common-lisp:nil :type
    (common-lisp:or allow-auto-registration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-request
                    'make-register-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate))
      (common-lisp:list
       (common-lisp:cons "caCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-certificate))
      (common-lisp:list
       (common-lisp:cons "verificationCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-cacertificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cacertificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-response
                    'make-register-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cacertificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-certificate-request-"))
   (certificate-pem (common-lisp:error ":certificatepem is required") :type
    (common-lisp:or certificate-pem common-lisp:null))
   (ca-certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active-flag common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-request
                    'make-register-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "certificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ca-certificate-pem))
      (common-lisp:list
       (common-lisp:cons "caCertificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-certificate-response-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-response
                    'make-register-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "certificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-response))
   common-lisp:nil))
(common-lisp:deftype registration-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-code-validation-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-code-validation-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-code-validation-exception
                    'make-registration-code-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-code-validation-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-code-validation-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-code-validation-exception))
   common-lisp:nil))
(common-lisp:deftype registry-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (reject-certificate-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-certificate-transfer-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (reject-reason common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-certificate-transfer-request
                    'make-reject-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-reason))
      (common-lisp:list
       (common-lisp:cons "rejectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-certificate-transfer-request))
   common-lisp:nil))
(common-lisp:deftype remove-thing-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (replace-topic-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-topic-rule-request-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-rule-payload (common-lisp:error ":topicrulepayload is required")
    :type (common-lisp:or topic-rule-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-topic-rule-request
                    'make-replace-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-rule-payload))
      (common-lisp:list
       (common-lisp:cons "topicRulePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-topic-rule-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'topic-rule-payload)))
(common-lisp:progn
 (common-lisp:defstruct
     (republish-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-republish-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (topic (common-lisp:error ":topic is required") :type
    (common-lisp:or topic-pattern common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'republish-action 'make-republish-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input republish-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input republish-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input republish-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-already-exists-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-already-exists-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or |resourceId| common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or |resourceArn| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'make-resource-already-exists-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-already-exists-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-already-exists-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-already-exists-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-not-found-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-not-found-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'make-resource-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-not-found-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-not-found-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-not-found-exception))
   common-lisp:nil))
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3action (:copier common-lisp:nil) (:conc-name "struct-shape-s3action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or key common-lisp:null))
   (canned-acl common-lisp:nil :type
    (common-lisp:or canned-access-control-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3action 'make-s3action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "cannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3action))
   common-lisp:nil))
(common-lisp:deftype sql () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-action-"))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or salesforce-token common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or salesforce-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-action 'make-salesforce-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input salesforce-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input salesforce-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input salesforce-action))
   common-lisp:nil))
(common-lisp:deftype salesforce-endpoint () 'common-lisp:string)
(common-lisp:deftype salesforce-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype searchable-attributes ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun |make-searchable-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-unavailable-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-unavailable-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'make-service-unavailable-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-unavailable-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-unavailable-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-unavailable-exception))
   common-lisp:nil))
(common-lisp:deftype set-as-active () 'common-lisp:boolean)
(common-lisp:deftype set-as-active-flag () 'common-lisp:boolean)
(common-lisp:deftype set-as-default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-policy-version-request-"))
   (policy-name (common-lisp:error ":policyname is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-version-id (common-lisp:error ":policyversionid is required") :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-logging-options-request-"))
   (logging-options-payload
    (common-lisp:error ":loggingoptionspayload is required") :type
    (common-lisp:or logging-options-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-logging-options-request
                    'make-set-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-options-payload))
      (common-lisp:list
       (common-lisp:cons "loggingOptionsPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-logging-options-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'logging-options-payload)))
(common-lisp:progn
 (common-lisp:defstruct
     (sns-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-sns-action-"))
   (target-arn (common-lisp:error ":targetarn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (message-format common-lisp:nil :type
    (common-lisp:or message-format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sns-action 'make-sns-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "messageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-parse-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-parse-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-parse-exception 'make-sql-parse-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-parse-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-parse-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-parse-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sqs-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-sqs-action-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or aws-arn common-lisp:null))
   (queue-url (common-lisp:error ":queueurl is required") :type
    (common-lisp:or queue-url common-lisp:null))
   (use-base64 common-lisp:nil :type
    (common-lisp:or use-base64 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sqs-action 'make-sqs-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sqs-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sqs-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-url))
      (common-lisp:list
       (common-lisp:cons "queueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-base64))
      (common-lisp:list
       (common-lisp:cons "useBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sqs-action))
   common-lisp:nil))
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype state-value () 'common-lisp:string)
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:deftype thing-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-attribute-"))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'thing-attribute 'make-thing-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "thingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype thing-attribute-list ()
   '(trivial-types:proper-list thing-attribute))
 (common-lisp:defun |make-thing-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-name-list ()
   '(trivial-types:proper-list thing-name))
 (common-lisp:defun |make-thing-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-type-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-type-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-type-definition-"))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (thing-type-metadata common-lisp:nil :type
    (common-lisp:or thing-type-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-definition 'make-thing-type-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-properties))
      (common-lisp:list
       (common-lisp:cons "thingTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-metadata))
      (common-lisp:list
       (common-lisp:cons "thingTypeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-definition))
   common-lisp:nil))
(common-lisp:deftype thing-type-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-type-list ()
   '(trivial-types:proper-list thing-type-definition))
 (common-lisp:defun |make-thing-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-type-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (thing-type-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-type-metadata-"))
   (deprecated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (deprecation-date common-lisp:nil :type
    (common-lisp:or deprecation-date common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-metadata 'make-thing-type-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecated))
      (common-lisp:list
       (common-lisp:cons "deprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-date))
      (common-lisp:list
       (common-lisp:cons "deprecationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thing-type-metadata))
   common-lisp:nil))
(common-lisp:deftype thing-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thing-type-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-thing-type-properties-"))
   (thing-type-description common-lisp:nil :type
    (common-lisp:or thing-type-description common-lisp:null))
   (searchable-attributes common-lisp:nil :type
    (common-lisp:or searchable-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-properties 'make-thing-type-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thing-type-description))
      (common-lisp:list
       (common-lisp:cons "thingTypeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'searchable-attributes))
      (common-lisp:list
       (common-lisp:cons "searchableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          thing-type-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (throttling-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-throttling-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'make-throttling-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input throttling-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input throttling-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input throttling-exception))
   common-lisp:nil))
(common-lisp:deftype topic () 'common-lisp:string)
(common-lisp:deftype topic-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-"))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (sql common-lisp:nil :type (common-lisp:or sql common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null))
   (aws-iot-sql-version common-lisp:nil :type
    (common-lisp:or aws-iot-sql-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'topic-rule 'make-topic-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-sql-version))
      (common-lisp:list
       (common-lisp:cons "awsIotSqlVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype topic-rule-list ()
   '(trivial-types:proper-list topic-rule-list-item))
 (common-lisp:defun |make-topic-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-rule-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-list-item-"))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-pattern common-lisp:nil :type
    (common-lisp:or topic-pattern common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-list-item 'make-topic-rule-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "ruleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-pattern))
      (common-lisp:list
       (common-lisp:cons "topicPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-rule-payload (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-rule-payload-"))
   (sql (common-lisp:error ":sql is required") :type
    (common-lisp:or sql common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or action-list common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null))
   (aws-iot-sql-version common-lisp:nil :type
    (common-lisp:or aws-iot-sql-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-payload 'make-topic-rule-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-disabled))
      (common-lisp:list
       (common-lisp:cons "ruleDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iot-sql-version))
      (common-lisp:list
       (common-lisp:cons "awsIotSqlVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-rule-payload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-already-completed-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-already-completed-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-already-completed-exception
                    'make-transfer-already-completed-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-already-completed-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-already-completed-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-already-completed-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (target-aws-account (common-lisp:error ":targetawsaccount is required")
    :type (common-lisp:or aws-account-id common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-request
                    'make-transfer-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-certificate-response-"))
   (transferred-certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-response
                    'make-transfer-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transferred-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "transferredCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-conflict-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-conflict-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-conflict-exception
                    'make-transfer-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-conflict-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-conflict-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-conflict-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-data-"))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (reject-reason common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (transfer-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (accept-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (reject-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transfer-data 'make-transfer-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transfer-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transfer-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "transferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-reason))
      (common-lisp:list
       (common-lisp:cons "rejectReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-date))
      (common-lisp:list
       (common-lisp:cons "transferDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-date))
      (common-lisp:list
       (common-lisp:cons "acceptDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reject-date))
      (common-lisp:list
       (common-lisp:cons "rejectDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transfer-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unauthorized-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-unauthorized-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'make-unauthorized-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unauthorized-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unauthorized-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unauthorized-exception))
   common-lisp:nil))
(common-lisp:deftype undo-deprecate () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (update-cacertificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cacertificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (new-status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (new-auto-registration-status common-lisp:nil :type
    (common-lisp:or auto-registration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cacertificate-request
                    'make-update-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cacertificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-request-"))
   (certificate-id (common-lisp:error ":certificateid is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (new-status (common-lisp:error ":newstatus is required") :type
    (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-request
                    'make-update-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-request-"))
   (thing-name (common-lisp:error ":thingname is required") :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null))
   (remove-thing-type common-lisp:nil :type
    (common-lisp:or remove-thing-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thing-request 'make-update-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-type-name))
      (common-lisp:list
       (common-lisp:cons "thingTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-payload))
      (common-lisp:list
       (common-lisp:cons "attributePayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-version))
      (common-lisp:list
       (common-lisp:cons "expectedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-thing-type))
      (common-lisp:list
       (common-lisp:cons "removeThingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-thing-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-thing-response-")))
 (common-lisp:export
  (common-lisp:list 'update-thing-response 'make-update-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-thing-response))
   common-lisp:nil))
(common-lisp:deftype use-base64 () 'common-lisp:boolean)
(common-lisp:deftype version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (version-conflict-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-version-conflict-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-conflict-exception
                    'make-version-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          version-conflict-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          version-conflict-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          version-conflict-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (versions-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-versions-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'versions-limit-exceeded-exception
                    'make-versions-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versions-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versions-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versions-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |resourceArn| () 'common-lisp:string)
(common-lisp:deftype |resourceId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id set-as-active)
   (common-lisp:declare (common-lisp:ignorable certificate-id set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accept-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "AcceptCertificateTransfer"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'accept-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun attach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/principal-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "AttachPrincipalPolicy"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-principal-policy))
(common-lisp:progn
 (common-lisp:defun attach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "AttachThingPrincipal"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-thing-principal))
(common-lisp:progn
 (common-lisp:defun cancel-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cancel-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "CancelCertificateTransfer"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun create-certificate-from-csr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-signing-request
                     set-as-active)
   (common-lisp:declare
    (common-lisp:ignorable certificate-signing-request set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-from-csr-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/certificates"
                                                        "CreateCertificateFromCsr"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-certificate-from-csr))
(common-lisp:progn
 (common-lisp:defun create-keys-and-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key set-as-active)
   (common-lisp:declare (common-lisp:ignorable set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-keys-and-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/keys-and-certificate"
                                                        "CreateKeysAndCertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-keys-and-certificate))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "CreatePolicy"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "CreatePolicyVersion"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "CreateThing"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-thing))
(common-lisp:progn
 (common-lisp:defun create-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name thing-type-properties)
   (common-lisp:declare
    (common-lisp:ignorable thing-type-name thing-type-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "CreateThingType"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-thing-type))
(common-lisp:progn
 (common-lisp:defun create-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload)
   (common-lisp:declare (common-lisp:ignorable rule-name topic-rule-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "CreateTopicRule"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-topic-rule))
(common-lisp:progn
 (common-lisp:defun delete-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "DeleteCACertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-cacertificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "DeleteCertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DeletePolicy"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "DeletePolicyVersion"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "DELETE" :path
                                "/registrationcode" :params
                                `(("Action" ,@"DeleteRegistrationCode")
                                  ("Version" ,@"2015-05-28"))))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'delete-registration-code))
(common-lisp:progn
 (common-lisp:defun delete-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name expected-version)
   (common-lisp:declare (common-lisp:ignorable thing-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DeleteThing"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-thing))
(common-lisp:progn
 (common-lisp:defun delete-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DeleteThingType"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-thing-type))
(common-lisp:progn
 (common-lisp:defun delete-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DeleteTopicRule"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-topic-rule))
(common-lisp:progn
 (common-lisp:defun deprecate-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name undo-deprecate)
   (common-lisp:declare (common-lisp:ignorable thing-type-name undo-deprecate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A/deprecate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DeprecateThingType"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'deprecate-thing-type))
(common-lisp:progn
 (common-lisp:defun describe-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "DescribeCACertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-cacertificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "DescribeCertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-endpoint ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path "/endpoint"
                                :params
                                `(("Action" ,@"DescribeEndpoint")
                                  ("Version" ,@"2015-05-28"))))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'describe-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name)
   (common-lisp:declare (common-lisp:ignorable thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DescribeThing"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-thing))
(common-lisp:progn
 (common-lisp:defun describe-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/thing-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-type-name))))
                                                        "DescribeThingType"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-thing-type))
(common-lisp:progn
 (common-lisp:defun detach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/principal-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "DetachPrincipalPolicy"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-principal-policy))
(common-lisp:progn
 (common-lisp:defun detach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "DetachThingPrincipal"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-thing-principal))
(common-lisp:progn
 (common-lisp:defun disable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/disable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DisableTopicRule"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-topic-rule))
(common-lisp:progn
 (common-lisp:defun enable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A/enable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "EnableTopicRule"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-topic-rule))
(common-lisp:progn
 (common-lisp:defun get-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/loggingOptions" :params
                                `(("Action" ,@"GetLoggingOptions")
                                  ("Version" ,@"2015-05-28"))))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'get-logging-options))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "GetPolicy"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "GetPolicyVersion"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iot-request :method "GET" :path
                                "/registrationcode" :params
                                `(("Action" ,@"GetRegistrationCode")
                                  ("Version" ,@"2015-05-28"))))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'get-registration-code))
(common-lisp:progn
 (common-lisp:defun get-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "GetTopicRule"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-topic-rule))
(common-lisp:progn
 (common-lisp:defun list-cacertificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cacertificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/cacertificates"
                                                        "ListCACertificates"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-cacertificates))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/certificates"
                                                        "ListCertificates"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-certificates-by-ca
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate-id page-size marker
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate-id page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-by-carequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates-by-ca/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "ListCertificatesByCA"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-certificates-by-ca))
(common-lisp:progn
 (common-lisp:defun list-outgoing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-outgoing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/certificates-out-going"
                                                        "ListOutgoingCertificates"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-outgoing-certificates))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/policies"
                                                        "ListPolicies"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policy-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable policy-name marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/policy-principals"
                                                        "ListPolicyPrincipals"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-policy-principals))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))))
                                                        "ListPolicyVersions"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-principal-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable principal marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/principal-policies"
                                                        "ListPrincipalPolicies"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-principal-policies))
(common-lisp:progn
 (common-lisp:defun list-principal-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results principal)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/principals/things"
                                                        "ListPrincipalThings"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-principal-things))
(common-lisp:progn
 (common-lisp:defun list-thing-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name)
   (common-lisp:declare (common-lisp:ignorable thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A/principals"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "ListThingPrincipals"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-thing-principals))
(common-lisp:progn
 (common-lisp:defun list-thing-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results thing-type-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/thing-types"
                                                        "ListThingTypes"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-thing-types))
(common-lisp:progn
 (common-lisp:defun list-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results attribute-name
                     attribute-value thing-type-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results attribute-name
     attribute-value thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/things"
                                                        "ListThings"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-things))
(common-lisp:progn
 (common-lisp:defun list-topic-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key topic max-results next-token
                     rule-disabled)
   (common-lisp:declare
    (common-lisp:ignorable topic max-results next-token rule-disabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-topic-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/rules"
                                                        "ListTopicRules"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-topic-rules))
(common-lisp:progn
 (common-lisp:defun register-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate verification-certificate
                     set-as-active allow-auto-registration)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate verification-certificate
     set-as-active allow-auto-registration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/cacertificate"
                                                        "RegisterCACertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'register-cacertificate))
(common-lisp:progn
 (common-lisp:defun register-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-pem ca-certificate-pem
                     set-as-active status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-pem ca-certificate-pem set-as-active
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/certificate/register"
                                                        "RegisterCertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'register-certificate))
(common-lisp:progn
 (common-lisp:defun reject-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id reject-reason)
   (common-lisp:declare (common-lisp:ignorable certificate-id reject-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/reject-certificate-transfer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "RejectCertificateTransfer"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reject-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun replace-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload)
   (common-lisp:declare (common-lisp:ignorable rule-name topic-rule-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replace-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "ReplaceTopicRule"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-topic-rule))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "SetDefaultPolicyVersion"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun set-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options-payload)
   (common-lisp:declare (common-lisp:ignorable logging-options-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/loggingOptions"
                                                        "SetLoggingOptions"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'set-logging-options))
(common-lisp:progn
 (common-lisp:defun transfer-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id target-aws-account
                     transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id target-aws-account transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/transfer-certificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "TransferCertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'transfer-certificate))
(common-lisp:progn
 (common-lisp:defun update-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status
                     new-auto-registration-status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id new-status
     new-auto-registration-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cacertificate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ca-certificate-id))))
                                                        "UpdateCACertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-cacertificate))
(common-lisp:progn
 (common-lisp:defun update-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status)
   (common-lisp:declare (common-lisp:ignorable certificate-id new-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'certificate-id))))
                                                        "UpdateCertificate"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-certificate))
(common-lisp:progn
 (common-lisp:defun update-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload expected-version remove-thing-type)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload
     expected-version remove-thing-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iot-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/things/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'thing-name))))
                                                        "UpdateThing"
                                                        "2015-05-28"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-thing))

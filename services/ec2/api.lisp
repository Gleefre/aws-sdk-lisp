;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ec2/api
  (:use)
  (:nicknames #:aws/ec2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request))
(common-lisp:in-package #:aws-sdk/services/ec2/api)
(common-lisp:progn
 (common-lisp:defclass ec2-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "ec2"))
 (common-lisp:export 'ec2-request))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-reserved-instances-exchange-quote-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-accept-reserved-instances-exchange-quote-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (reserved-instance-ids
    (common-lisp:error ":reserved-instance-ids is required") :type
    (common-lisp:or reserved-instance-id-set common-lisp:null))
   (target-configurations common-lisp:nil :type
    (common-lisp:or target-configuration-request-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-reserved-instances-exchange-quote-request
                    'make-accept-reserved-instances-exchange-quote-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-instances-exchange-quote-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-instances-exchange-quote-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configurations))
      (common-lisp:list
       (common-lisp:cons "TargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-instances-exchange-quote-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-reserved-instances-exchange-quote-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-accept-reserved-instances-exchange-quote-result-"))
   (exchange-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-reserved-instances-exchange-quote-result
                    'make-accept-reserved-instances-exchange-quote-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-instances-exchange-quote-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-instances-exchange-quote-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exchange-id))
      (common-lisp:list
       (common-lisp:cons "ExchangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-reserved-instances-exchange-quote-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-vpc-peering-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-vpc-peering-connection-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-vpc-peering-connection-request
                    'make-accept-vpc-peering-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-vpc-peering-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-vpc-peering-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-vpc-peering-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-vpc-peering-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-vpc-peering-connection-result-"))
   (vpc-peering-connection common-lisp:nil :type
    (common-lisp:or vpc-peering-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-vpc-peering-connection-result
                    'make-accept-vpc-peering-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-vpc-peering-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-vpc-peering-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-vpc-peering-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-attribute-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (attribute-values common-lisp:nil :type
    (common-lisp:or account-attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-attribute 'make-account-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-attribute-list ()
   '(trivial-types:proper-list account-attribute))
 (common-lisp:defun |make-account-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-attribute-name-string-list ()
   '(trivial-types:proper-list account-attribute-name))
 (common-lisp:defun |make-account-attribute-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (account-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-attribute-value-"))
   (attribute-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-attribute-value 'make-account-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-attribute-value-list ()
   '(trivial-types:proper-list account-attribute-value))
 (common-lisp:defun |make-account-attribute-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (active-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-instance-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (spot-instance-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-health common-lisp:nil :type
    (common-lisp:or instance-health-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'active-instance 'make-active-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input active-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input active-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-health))
      (common-lisp:list
       (common-lisp:cons "InstanceHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input active-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-instance-set ()
   '(trivial-types:proper-list active-instance))
 (common-lisp:defun |make-active-instance-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list active-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype activity-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (address (:copier common-lisp:nil) (:conc-name "struct-shape-address-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or domain-type common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-owner-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype address-list () '(trivial-types:proper-list address))
 (common-lisp:defun |make-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype affinity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-address-request-"))
   (domain common-lisp:nil :type (common-lisp:or domain-type common-lisp:null))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-address-request 'make-allocate-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-address-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-address-result-"))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type
    (common-lisp:or domain-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-address-result 'make-allocate-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-hosts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-hosts-request-"))
   (auto-placement common-lisp:nil :type
    (common-lisp:or auto-placement common-lisp:null))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or string common-lisp:null))
   (quantity (common-lisp:error ":quantity is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-hosts-request 'make-allocate-hosts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-placement))
      (common-lisp:list
       (common-lisp:cons "AutoPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-hosts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-hosts-result-"))
   (host-ids common-lisp:nil :type
    (common-lisp:or response-host-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-hosts-result 'make-allocate-hosts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-ids))
      (common-lisp:list
       (common-lisp:cons "HostIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype allocation-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-allocation-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allocation-state () 'common-lisp:string)
(common-lisp:deftype allocation-strategy () 'common-lisp:string)
(common-lisp:deftype architecture-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assign-ipv6addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assign-ipv6addresses-request-"))
   (ipv6address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or ipv6address-list common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assign-ipv6addresses-request
                    'make-assign-ipv6addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assign-ipv6addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assign-ipv6addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assign-ipv6addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assign-ipv6addresses-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-assign-ipv6addresses-result-"))
   (assigned-ipv6addresses common-lisp:nil :type
    (common-lisp:or ipv6address-list common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assign-ipv6addresses-result
                    'make-assign-ipv6addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assign-ipv6addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assign-ipv6addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assigned-ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "AssignedIpv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assign-ipv6addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assign-private-ip-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assign-private-ip-addresses-request-"))
   (allow-reassignment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or private-ip-address-string-list common-lisp:null))
   (secondary-private-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assign-private-ip-addresses-request
                    'make-assign-private-ip-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assign-private-ip-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assign-private-ip-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-reassignment))
      (common-lisp:list
       (common-lisp:cons "AllowReassignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-private-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "SecondaryPrivateIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assign-private-ip-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-address-request-"))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allow-reassociation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-address-request
                    'make-associate-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-reassociation))
      (common-lisp:list
       (common-lisp:cons "AllowReassociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-address-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-address-result-"))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-address-result 'make-associate-address-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-address-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-address-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-address-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-dhcp-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-dhcp-options-request-"))
   (dhcp-options-id (common-lisp:error ":dhcp-options-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-dhcp-options-request
                    'make-associate-dhcp-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-dhcp-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-dhcp-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-id))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-dhcp-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-iam-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-iam-instance-profile-request-"))
   (iam-instance-profile
    (common-lisp:error ":iam-instance-profile is required") :type
    (common-lisp:or iam-instance-profile-specification common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-iam-instance-profile-request
                    'make-associate-iam-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-iam-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-iam-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-iam-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-iam-instance-profile-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-iam-instance-profile-result-"))
   (iam-instance-profile-association common-lisp:nil :type
    (common-lisp:or iam-instance-profile-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-iam-instance-profile-result
                    'make-associate-iam-instance-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-iam-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-iam-instance-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-association))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfileAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-iam-instance-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-route-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-route-table-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-route-table-request
                    'make-associate-route-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-route-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-route-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-route-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-route-table-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-route-table-result-"))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-route-table-result
                    'make-associate-route-table-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-route-table-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-route-table-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-route-table-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-subnet-cidr-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-subnet-cidr-block-request-"))
   (ipv6cidr-block (common-lisp:error ":ipv6cidr-block is required") :type
    (common-lisp:or string common-lisp:null))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-subnet-cidr-block-request
                    'make-associate-subnet-cidr-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-subnet-cidr-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-subnet-cidr-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-subnet-cidr-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-subnet-cidr-block-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-subnet-cidr-block-result-"))
   (ipv6cidr-block-association common-lisp:nil :type
    (common-lisp:or subnet-ipv6cidr-block-association common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-subnet-cidr-block-result
                    'make-associate-subnet-cidr-block-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-subnet-cidr-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-subnet-cidr-block-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-subnet-cidr-block-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-vpc-cidr-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-vpc-cidr-block-request-"))
   (amazon-provided-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-vpc-cidr-block-request
                    'make-associate-vpc-cidr-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpc-cidr-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpc-cidr-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-provided-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "AmazonProvidedIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpc-cidr-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-vpc-cidr-block-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-vpc-cidr-block-result-"))
   (ipv6cidr-block-association common-lisp:nil :type
    (common-lisp:or vpc-ipv6cidr-block-association common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-vpc-cidr-block-result
                    'make-associate-vpc-cidr-block-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpc-cidr-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpc-cidr-block-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpc-cidr-block-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-association-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-classic-link-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-classic-link-vpc-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or group-id-string-list common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-classic-link-vpc-request
                    'make-attach-classic-link-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-classic-link-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-classic-link-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-classic-link-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-classic-link-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-classic-link-vpc-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-classic-link-vpc-result
                    'make-attach-classic-link-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-classic-link-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-classic-link-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-classic-link-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-internet-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-internet-gateway-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (internet-gateway-id (common-lisp:error ":internet-gateway-id is required")
    :type (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-internet-gateway-request
                    'make-attach-internet-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-internet-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-internet-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-internet-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-network-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-network-interface-request-"))
   (device-index (common-lisp:error ":device-index is required") :type
    (common-lisp:or integer common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-network-interface-request
                    'make-attach-network-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-network-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-network-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-network-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-network-interface-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-network-interface-result-"))
   (attachment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-network-interface-result
                    'make-attach-network-interface-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-network-interface-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-network-interface-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-network-interface-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-volume-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-volume-request-"))
   (device (common-lisp:error ":device is required") :type
    (common-lisp:or string common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-volume-request 'make-attach-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-vpn-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-vpn-gateway-request-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpn-gateway-id (common-lisp:error ":vpn-gateway-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-vpn-gateway-request
                    'make-attach-vpn-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-vpn-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-vpn-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-vpn-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-vpn-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-vpn-gateway-result-"))
   (vpc-attachment common-lisp:nil :type
    (common-lisp:or vpc-attachment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-vpn-gateway-result
                    'make-attach-vpn-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-vpn-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-vpn-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-vpn-gateway-result))
   common-lisp:nil))
(common-lisp:deftype attachment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-boolean-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-boolean-value-"))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-boolean-value 'make-attribute-boolean-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attribute-boolean-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attribute-boolean-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attribute-boolean-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-value-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-security-group-egress-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorize-security-group-egress-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (ip-permissions common-lisp:nil :type
    (common-lisp:or ip-permission-list common-lisp:null))
   (cidr-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (ip-protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (source-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-security-group-egress-request
                    'make-authorize-security-group-egress-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-security-group-egress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-security-group-egress-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-name))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-security-group-egress-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-security-group-ingress-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorize-security-group-ingress-request-"))
   (cidr-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-permissions common-lisp:nil :type
    (common-lisp:or ip-permission-list common-lisp:null))
   (ip-protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-security-group-ingress-request
                    'make-authorize-security-group-ingress-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-security-group-ingress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-security-group-ingress-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-name))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-security-group-ingress-request))
   common-lisp:nil))
(common-lisp:deftype auto-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (state common-lisp:nil :type
    (common-lisp:or availability-zone-state common-lisp:null))
   (messages common-lisp:nil :type
    (common-lisp:or availability-zone-message-list common-lisp:null))
   (region-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (zone-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "ZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-message-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone-message
                    'make-availability-zone-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          availability-zone-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          availability-zone-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          availability-zone-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-message-list ()
   '(trivial-types:proper-list availability-zone-message))
 (common-lisp:defun |make-availability-zone-message-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            availability-zone-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype availability-zone-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (available-capacity (:copier common-lisp:nil)
      (:conc-name "struct-shape-available-capacity-"))
   (available-instance-capacity common-lisp:nil :type
    (common-lisp:or available-instance-capacity-list common-lisp:null))
   (available-vcpus common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'available-capacity 'make-available-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input available-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input available-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-instance-capacity))
      (common-lisp:list
       (common-lisp:cons "AvailableInstanceCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-vcpus))
      (common-lisp:list
       (common-lisp:cons "AvailableVCpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input available-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype available-instance-capacity-list ()
   '(trivial-types:proper-list instance-capacity))
 (common-lisp:defun |make-available-instance-capacity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-capacity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype batch-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype billing-product-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-billing-product-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (blob-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-blob-attribute-value-"))
   (value common-lisp:nil :type (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blob-attribute-value 'make-blob-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blob-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blob-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blob-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (block-device-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-block-device-mapping-"))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or ebs-block-device common-lisp:null))
   (no-device common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'block-device-mapping 'make-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype block-device-mapping-list ()
   '(trivial-types:proper-list block-device-mapping))
 (common-lisp:defun |make-block-device-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype block-device-mapping-request-list ()
   '(trivial-types:proper-list block-device-mapping))
 (common-lisp:defun |make-block-device-mapping-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype bundle-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-bundle-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (bundle-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-bundle-instance-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (storage (common-lisp:error ":storage is required") :type
    (common-lisp:or storage common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bundle-instance-request 'make-bundle-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bundle-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bundle-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bundle-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bundle-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-bundle-instance-result-"))
   (bundle-task common-lisp:nil :type
    (common-lisp:or bundle-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bundle-instance-result 'make-bundle-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bundle-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bundle-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-task))
      (common-lisp:list
       (common-lisp:cons "BundleTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bundle-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bundle-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-bundle-task-"))
   (bundle-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (bundle-task-error common-lisp:nil :type
    (common-lisp:or bundle-task-error common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or bundle-task-state common-lisp:null))
   (storage common-lisp:nil :type (common-lisp:or storage common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bundle-task 'make-bundle-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-task-error))
      (common-lisp:list
       (common-lisp:cons "BundleTaskError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bundle-task-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-bundle-task-error-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bundle-task-error 'make-bundle-task-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle-task-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle-task-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle-task-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bundle-task-list ()
   '(trivial-types:proper-list bundle-task))
 (common-lisp:defun |make-bundle-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bundle-task-state () 'common-lisp:string)
(common-lisp:deftype cancel-batch-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-bundle-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-bundle-task-request-"))
   (bundle-id (common-lisp:error ":bundle-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-bundle-task-request
                    'make-cancel-bundle-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-bundle-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-bundle-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-bundle-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-bundle-task-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-bundle-task-result-"))
   (bundle-task common-lisp:nil :type
    (common-lisp:or bundle-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-bundle-task-result
                    'make-cancel-bundle-task-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-bundle-task-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-bundle-task-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-task))
      (common-lisp:list
       (common-lisp:cons "BundleTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-bundle-task-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-conversion-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-conversion-request-"))
   (conversion-task-id (common-lisp:error ":conversion-task-id is required")
    :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (reason-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-conversion-request
                    'make-cancel-conversion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-conversion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-conversion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "ConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-message))
      (common-lisp:list
       (common-lisp:cons "ReasonMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-conversion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-export-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-export-task-request-"))
   (export-task-id (common-lisp:error ":export-task-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-export-task-request
                    'make-cancel-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-task-id))
      (common-lisp:list
       (common-lisp:cons "ExportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-import-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-import-task-request-"))
   (cancel-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (import-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-import-task-request
                    'make-cancel-import-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel-reason))
      (common-lisp:list
       (common-lisp:cons "CancelReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "ImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-import-task-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-import-task-result-"))
   (import-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (previous-state common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-import-task-result
                    'make-cancel-import-task-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-import-task-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-import-task-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "ImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-state))
      (common-lisp:list
       (common-lisp:cons "PreviousState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-import-task-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-reserved-instances-listing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-reserved-instances-listing-request-"))
   (reserved-instances-listing-id
    (common-lisp:error ":reserved-instances-listing-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-reserved-instances-listing-request
                    'make-cancel-reserved-instances-listing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-reserved-instances-listing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-reserved-instances-listing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-listing-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesListingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-reserved-instances-listing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-reserved-instances-listing-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-reserved-instances-listing-result-"))
   (reserved-instances-listings common-lisp:nil :type
    (common-lisp:or reserved-instances-listing-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-reserved-instances-listing-result
                    'make-cancel-reserved-instances-listing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-reserved-instances-listing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-reserved-instances-listing-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-listings))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-reserved-instances-listing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-fleet-requests-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-fleet-requests-error-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or cancel-batch-error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-fleet-requests-error
                    'make-cancel-spot-fleet-requests-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-fleet-requests-error-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-fleet-requests-error-item-"))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or cancel-spot-fleet-requests-error common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-fleet-requests-error-item
                    'make-cancel-spot-fleet-requests-error-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-error-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-error-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-error-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cancel-spot-fleet-requests-error-set ()
   '(trivial-types:proper-list cancel-spot-fleet-requests-error-item))
 (common-lisp:defun |make-cancel-spot-fleet-requests-error-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cancel-spot-fleet-requests-error-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-fleet-requests-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-fleet-requests-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (spot-fleet-request-ids
    (common-lisp:error ":spot-fleet-request-ids is required") :type
    (common-lisp:or value-string-list common-lisp:null))
   (terminate-instances (common-lisp:error ":terminate-instances is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-fleet-requests-request
                    'make-cancel-spot-fleet-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-ids))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-instances))
      (common-lisp:list
       (common-lisp:cons "TerminateInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-fleet-requests-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-fleet-requests-response-"))
   (successful-fleet-requests common-lisp:nil :type
    (common-lisp:or cancel-spot-fleet-requests-success-set common-lisp:null))
   (unsuccessful-fleet-requests common-lisp:nil :type
    (common-lisp:or cancel-spot-fleet-requests-error-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-fleet-requests-response
                    'make-cancel-spot-fleet-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'successful-fleet-requests))
      (common-lisp:list
       (common-lisp:cons "SuccessfulFleetRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsuccessful-fleet-requests))
      (common-lisp:list
       (common-lisp:cons "UnsuccessfulFleetRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-fleet-requests-success-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-fleet-requests-success-item-"))
   (current-spot-fleet-request-state
    (common-lisp:error ":current-spot-fleet-request-state is required") :type
    (common-lisp:or batch-state common-lisp:null))
   (previous-spot-fleet-request-state
    (common-lisp:error ":previous-spot-fleet-request-state is required") :type
    (common-lisp:or batch-state common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-fleet-requests-success-item
                    'make-cancel-spot-fleet-requests-success-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-success-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-success-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-spot-fleet-request-state))
      (common-lisp:list
       (common-lisp:cons "CurrentSpotFleetRequestState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-spot-fleet-request-state))
      (common-lisp:list
       (common-lisp:cons "PreviousSpotFleetRequestState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-fleet-requests-success-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cancel-spot-fleet-requests-success-set ()
   '(trivial-types:proper-list cancel-spot-fleet-requests-success-item))
 (common-lisp:defun |make-cancel-spot-fleet-requests-success-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cancel-spot-fleet-requests-success-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cancel-spot-instance-request-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-instance-requests-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-instance-requests-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (spot-instance-request-ids
    (common-lisp:error ":spot-instance-request-ids is required") :type
    (common-lisp:or spot-instance-request-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-instance-requests-request
                    'make-cancel-spot-instance-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-instance-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-instance-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-request-ids))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequestIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-instance-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-spot-instance-requests-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-spot-instance-requests-result-"))
   (cancelled-spot-instance-requests common-lisp:nil :type
    (common-lisp:or cancelled-spot-instance-request-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-spot-instance-requests-result
                    'make-cancel-spot-instance-requests-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-instance-requests-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-instance-requests-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancelled-spot-instance-requests))
      (common-lisp:list
       (common-lisp:cons "CancelledSpotInstanceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-spot-instance-requests-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancelled-spot-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancelled-spot-instance-request-"))
   (spot-instance-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or cancel-spot-instance-request-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancelled-spot-instance-request
                    'make-cancelled-spot-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancelled-spot-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancelled-spot-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancelled-spot-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cancelled-spot-instance-request-list ()
   '(trivial-types:proper-list cancelled-spot-instance-request))
 (common-lisp:defun |make-cancelled-spot-instance-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cancelled-spot-instance-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (classic-link-dns-support (:copier common-lisp:nil)
      (:conc-name "struct-shape-classic-link-dns-support-"))
   (classic-link-dns-supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classic-link-dns-support 'make-classic-link-dns-support))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classic-link-dns-support))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classic-link-dns-support))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-dns-supported))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkDnsSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classic-link-dns-support))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype classic-link-dns-support-list ()
   '(trivial-types:proper-list classic-link-dns-support))
 (common-lisp:defun |make-classic-link-dns-support-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            classic-link-dns-support))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (classic-link-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-classic-link-instance-"))
   (groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classic-link-instance 'make-classic-link-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classic-link-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classic-link-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classic-link-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype classic-link-instance-list ()
   '(trivial-types:proper-list classic-link-instance))
 (common-lisp:defun |make-classic-link-instance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list classic-link-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (client-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-client-data-"))
   (comment common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upload-end common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (upload-size common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (upload-start common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'client-data 'make-client-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-end))
      (common-lisp:list
       (common-lisp:cons "UploadEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-size))
      (common-lisp:list
       (common-lisp:cons "UploadSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-start))
      (common-lisp:list
       (common-lisp:cons "UploadStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-product-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-product-instance-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (product-code (common-lisp:error ":product-code is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-product-instance-request
                    'make-confirm-product-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-product-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-product-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "ProductCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-product-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-product-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-product-instance-result-"))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-product-instance-result
                    'make-confirm-product-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-product-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-product-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-product-instance-result))
   common-lisp:nil))
(common-lisp:deftype container-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype conversion-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-conversion-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (conversion-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-conversion-task-"))
   (conversion-task-id (common-lisp:error ":conversion-task-id is required")
    :type (common-lisp:or string common-lisp:null))
   (expiration-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (import-instance common-lisp:nil :type
    (common-lisp:or import-instance-task-details common-lisp:null))
   (import-volume common-lisp:nil :type
    (common-lisp:or import-volume-task-details common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or conversion-task-state common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'conversion-task 'make-conversion-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conversion-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conversion-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "ConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-instance))
      (common-lisp:list
       (common-lisp:cons "ImportInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-volume))
      (common-lisp:list
       (common-lisp:cons "ImportVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conversion-task))
   common-lisp:nil))
(common-lisp:deftype conversion-task-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (copy-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-image-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (source-image-id (common-lisp:error ":source-image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (source-region (common-lisp:error ":source-region is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-image-request 'make-copy-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-id))
      (common-lisp:list
       (common-lisp:cons "SourceImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-image-result-"))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-image-result 'make-copy-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-snapshot-request-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (destination-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (presigned-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-region (common-lisp:error ":source-region is required") :type
    (common-lisp:or string common-lisp:null))
   (source-snapshot-id (common-lisp:error ":source-snapshot-id is required")
    :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-request 'make-copy-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presigned-url))
      (common-lisp:list
       (common-lisp:cons "PresignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SourceSnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-snapshot-result-"))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-result 'make-copy-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-customer-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-customer-gateway-request-"))
   (bgp-asn (common-lisp:error ":bgp-asn is required") :type
    (common-lisp:or integer common-lisp:null))
   (public-ip (common-lisp:error ":public-ip is required") :type
    (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or gateway-type common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-customer-gateway-request
                    'make-create-customer-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-customer-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-customer-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-asn))
      (common-lisp:list
       (common-lisp:cons "BgpAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-customer-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-customer-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-customer-gateway-result-"))
   (customer-gateway common-lisp:nil :type
    (common-lisp:or customer-gateway common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-customer-gateway-result
                    'make-create-customer-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-customer-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-customer-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway))
      (common-lisp:list
       (common-lisp:cons "CustomerGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-customer-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-default-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-default-vpc-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-default-vpc-request
                    'make-create-default-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-default-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-default-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-default-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-default-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-default-vpc-result-"))
   (vpc common-lisp:nil :type (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-default-vpc-result
                    'make-create-default-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-default-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-default-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-default-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dhcp-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dhcp-options-request-"))
   (dhcp-configurations (common-lisp:error ":dhcp-configurations is required")
    :type (common-lisp:or new-dhcp-configuration-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dhcp-options-request
                    'make-create-dhcp-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dhcp-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dhcp-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-configurations))
      (common-lisp:list
       (common-lisp:cons "DhcpConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dhcp-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dhcp-options-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dhcp-options-result-"))
   (dhcp-options common-lisp:nil :type
    (common-lisp:or dhcp-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dhcp-options-result
                    'make-create-dhcp-options-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dhcp-options-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dhcp-options-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options))
      (common-lisp:list
       (common-lisp:cons "DhcpOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dhcp-options-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-egress-only-internet-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-egress-only-internet-gateway-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-egress-only-internet-gateway-request
                    'make-create-egress-only-internet-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-egress-only-internet-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-egress-only-internet-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-egress-only-internet-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-egress-only-internet-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-egress-only-internet-gateway-result-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (egress-only-internet-gateway common-lisp:nil :type
    (common-lisp:or egress-only-internet-gateway common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-egress-only-internet-gateway-result
                    'make-create-egress-only-internet-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-egress-only-internet-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-egress-only-internet-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-egress-only-internet-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-flow-logs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-flow-logs-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deliver-logs-permission-arn
    (common-lisp:error ":deliver-logs-permission-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (log-group-name (common-lisp:error ":log-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-ids (common-lisp:error ":resource-ids is required") :type
    (common-lisp:or value-string-list common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or flow-logs-resource-type common-lisp:null))
   (traffic-type (common-lisp:error ":traffic-type is required") :type
    (common-lisp:or traffic-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-flow-logs-request 'make-create-flow-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deliver-logs-permission-arn))
      (common-lisp:list
       (common-lisp:cons "DeliverLogsPermissionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-type))
      (common-lisp:list
       (common-lisp:cons "TrafficType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-flow-logs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-flow-logs-result-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (flow-log-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (unsuccessful common-lisp:nil :type
    (common-lisp:or unsuccessful-item-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-flow-logs-result 'make-create-flow-logs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-logs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-logs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-log-ids))
      (common-lisp:list
       (common-lisp:cons "FlowLogIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unsuccessful))
      (common-lisp:list
       (common-lisp:cons "Unsuccessful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-logs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-fpga-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-fpga-image-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (input-storage-location
    (common-lisp:error ":input-storage-location is required") :type
    (common-lisp:or storage-location common-lisp:null))
   (logs-storage-location common-lisp:nil :type
    (common-lisp:or storage-location common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-fpga-image-request
                    'make-create-fpga-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fpga-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fpga-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-storage-location))
      (common-lisp:list
       (common-lisp:cons "InputStorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logs-storage-location))
      (common-lisp:list
       (common-lisp:cons "LogsStorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fpga-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-fpga-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-fpga-image-result-"))
   (fpga-image-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (fpga-image-global-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-fpga-image-result 'make-create-fpga-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fpga-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fpga-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpga-image-id))
      (common-lisp:list
       (common-lisp:cons "FpgaImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fpga-image-global-id))
      (common-lisp:list
       (common-lisp:cons "FpgaImageGlobalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fpga-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-request-"))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-request-list common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (no-reboot common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-request 'make-create-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-reboot))
      (common-lisp:list
       (common-lisp:cons "NoReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-result-"))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-result 'make-create-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-export-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-export-task-request-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (export-to-s3task common-lisp:nil :type
    (common-lisp:or export-to-s3task-specification common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (target-environment common-lisp:nil :type
    (common-lisp:or export-environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-export-task-request
                    'make-create-instance-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-to-s3task))
      (common-lisp:list
       (common-lisp:cons "ExportToS3Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-environment))
      (common-lisp:list
       (common-lisp:cons "TargetEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-export-task-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-export-task-result-"))
   (export-task common-lisp:nil :type
    (common-lisp:or export-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-export-task-result
                    'make-create-instance-export-task-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-export-task-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-export-task-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-task))
      (common-lisp:list
       (common-lisp:cons "ExportTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-export-task-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-internet-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-internet-gateway-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-internet-gateway-request
                    'make-create-internet-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-internet-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-internet-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-internet-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-internet-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-internet-gateway-result-"))
   (internet-gateway common-lisp:nil :type
    (common-lisp:or internet-gateway common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-internet-gateway-result
                    'make-create-internet-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-internet-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-internet-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway))
      (common-lisp:list
       (common-lisp:cons "InternetGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-internet-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-pair-request-"))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-pair-request 'make-create-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-nat-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-nat-gateway-request-"))
   (allocation-id (common-lisp:error ":allocation-id is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-nat-gateway-request
                    'make-create-nat-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nat-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nat-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nat-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-nat-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-nat-gateway-result-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nat-gateway common-lisp:nil :type
    (common-lisp:or nat-gateway common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-nat-gateway-result
                    'make-create-nat-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-nat-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-nat-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway))
      (common-lisp:list
       (common-lisp:cons "NatGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-nat-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-acl-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-acl-entry-request-"))
   (cidr-block common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress (common-lisp:error ":egress is required") :type
    (common-lisp:or boolean common-lisp:null))
   (icmp-type-code common-lisp:nil :type
    (common-lisp:or icmp-type-code common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-acl-id (common-lisp:error ":network-acl-id is required") :type
    (common-lisp:or string common-lisp:null))
   (port-range common-lisp:nil :type
    (common-lisp:or port-range common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or string common-lisp:null))
   (rule-action (common-lisp:error ":rule-action is required") :type
    (common-lisp:or rule-action common-lisp:null))
   (rule-number (common-lisp:error ":rule-number is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-acl-entry-request
                    'make-create-network-acl-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icmp-type-code))
      (common-lisp:list
       (common-lisp:cons "IcmpTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "PortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-action))
      (common-lisp:list
       (common-lisp:cons "RuleAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "RuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-acl-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-acl-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-acl-request
                    'make-create-network-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-acl-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-acl-result-"))
   (network-acl common-lisp:nil :type
    (common-lisp:or network-acl common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-acl-result
                    'make-create-network-acl-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl))
      (common-lisp:list
       (common-lisp:cons "NetworkAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-acl-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-interface-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-interface-permission-request-"))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (permission (common-lisp:error ":permission is required") :type
    (common-lisp:or interface-permission-type common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-interface-permission-request
                    'make-create-network-interface-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-service))
      (common-lisp:list
       (common-lisp:cons "AwsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-interface-permission-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-interface-permission-result-"))
   (interface-permission common-lisp:nil :type
    (common-lisp:or network-interface-permission common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-interface-permission-result
                    'make-create-network-interface-permission-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-permission-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-permission-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interface-permission))
      (common-lisp:list
       (common-lisp:cons "InterfacePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-permission-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-interface-request-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or security-group-id-string-list common-lisp:null))
   (ipv6address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or instance-ipv6address-list common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or private-ip-address-specification-list common-lisp:null))
   (secondary-private-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-interface-request
                    'make-create-network-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-private-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "SecondaryPrivateIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-network-interface-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-network-interface-result-"))
   (network-interface common-lisp:nil :type
    (common-lisp:or network-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-network-interface-result
                    'make-create-network-interface-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interface))
      (common-lisp:list
       (common-lisp:cons "NetworkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-interface-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-placement-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-placement-group-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (strategy (common-lisp:error ":strategy is required") :type
    (common-lisp:or placement-strategy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-placement-group-request
                    'make-create-placement-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-placement-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-placement-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "Strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-placement-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-reserved-instances-listing-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-reserved-instances-listing-request-"))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or string common-lisp:null))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (price-schedules (common-lisp:error ":price-schedules is required") :type
    (common-lisp:or price-schedule-specification-list common-lisp:null))
   (reserved-instances-id
    (common-lisp:error ":reserved-instances-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-reserved-instances-listing-request
                    'make-create-reserved-instances-listing-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-reserved-instances-listing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-reserved-instances-listing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-schedules))
      (common-lisp:list
       (common-lisp:cons "PriceSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-reserved-instances-listing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-reserved-instances-listing-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-reserved-instances-listing-result-"))
   (reserved-instances-listings common-lisp:nil :type
    (common-lisp:or reserved-instances-listing-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-reserved-instances-listing-result
                    'make-create-reserved-instances-listing-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-reserved-instances-listing-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-reserved-instances-listing-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-listings))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-reserved-instances-listing-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-request-"))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress-only-internet-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (gateway-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (nat-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-request 'make-create-route-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-result 'make-create-route-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-table-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-table-request
                    'make-create-route-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-route-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-route-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-route-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-table-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-table-result-"))
   (route-table common-lisp:nil :type
    (common-lisp:or route-table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-table-result
                    'make-create-route-table-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-route-table-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-route-table-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table))
      (common-lisp:list
       (common-lisp:cons "RouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-route-table-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-group-request-"))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-group-request
                    'make-create-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-group-result-"))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-group-result
                    'make-create-security-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-request-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-request 'make-create-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-spot-datafeed-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-spot-datafeed-subscription-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-spot-datafeed-subscription-request
                    'make-create-spot-datafeed-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-spot-datafeed-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-spot-datafeed-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-spot-datafeed-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-spot-datafeed-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-spot-datafeed-subscription-result-"))
   (spot-datafeed-subscription common-lisp:nil :type
    (common-lisp:or spot-datafeed-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-spot-datafeed-subscription-result
                    'make-create-spot-datafeed-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-spot-datafeed-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-spot-datafeed-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-datafeed-subscription))
      (common-lisp:list
       (common-lisp:cons "SpotDatafeedSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-spot-datafeed-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subnet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subnet-request-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cidr-block (common-lisp:error ":cidr-block is required") :type
    (common-lisp:or string common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subnet-request 'make-create-subnet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subnet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subnet-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subnet-result-"))
   (subnet common-lisp:nil :type (common-lisp:or subnet common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subnet-result 'make-create-subnet-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-subnet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-subnet-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet))
      (common-lisp:list
       (common-lisp:cons "Subnet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-subnet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or resource-id-list common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-volume-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-volume-permission-"))
   (group common-lisp:nil :type
    (common-lisp:or permission-group common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-volume-permission 'make-create-volume-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-volume-permission-list ()
   '(trivial-types:proper-list create-volume-permission))
 (common-lisp:defun |make-create-volume-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-volume-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-volume-permission-modifications (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-volume-permission-modifications-"))
   (add common-lisp:nil :type
    (common-lisp:or create-volume-permission-list common-lisp:null))
   (remove common-lisp:nil :type
    (common-lisp:or create-volume-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-volume-permission-modifications
                    'make-create-volume-permission-modifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-permission-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-permission-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add))
      (common-lisp:list
       (common-lisp:cons "Add"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove))
      (common-lisp:list
       (common-lisp:cons "Remove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-permission-modifications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-volume-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-volume-request-"))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (tag-specifications common-lisp:nil :type
    (common-lisp:or tag-specification-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-volume-request 'make-create-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-specifications))
      (common-lisp:list
       (common-lisp:cons "TagSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-endpoint-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (route-table-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-endpoint-request
                    'make-create-vpc-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-endpoint-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-endpoint-result-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-endpoint common-lisp:nil :type
    (common-lisp:or vpc-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-endpoint-result
                    'make-create-vpc-endpoint-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-peering-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-peering-connection-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (peer-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (peer-vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-peering-connection-request
                    'make-create-vpc-peering-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-owner-id))
      (common-lisp:list
       (common-lisp:cons "PeerOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-peering-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-peering-connection-result-"))
   (vpc-peering-connection common-lisp:nil :type
    (common-lisp:or vpc-peering-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-peering-connection-result
                    'make-create-vpc-peering-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-request-"))
   (cidr-block (common-lisp:error ":cidr-block is required") :type
    (common-lisp:or string common-lisp:null))
   (amazon-provided-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-tenancy common-lisp:nil :type
    (common-lisp:or tenancy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-request 'make-create-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-provided-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "AmazonProvidedIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tenancy))
      (common-lisp:list
       (common-lisp:cons "InstanceTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-result-"))
   (vpc common-lisp:nil :type (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-result 'make-create-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpn-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpn-connection-request-"))
   (customer-gateway-id (common-lisp:error ":customer-gateway-id is required")
    :type (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (vpn-gateway-id (common-lisp:error ":vpn-gateway-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or vpn-connection-options-specification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpn-connection-request
                    'make-create-vpn-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpn-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpn-connection-result-"))
   (vpn-connection common-lisp:nil :type
    (common-lisp:or vpn-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpn-connection-result
                    'make-create-vpn-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection))
      (common-lisp:list
       (common-lisp:cons "VpnConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpn-connection-route-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpn-connection-route-request-"))
   (destination-cidr-block
    (common-lisp:error ":destination-cidr-block is required") :type
    (common-lisp:or string common-lisp:null))
   (vpn-connection-id (common-lisp:error ":vpn-connection-id is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpn-connection-route-request
                    'make-create-vpn-connection-route-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-route-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-route-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-connection-route-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpn-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpn-gateway-request-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or gateway-type common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpn-gateway-request
                    'make-create-vpn-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpn-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpn-gateway-result-"))
   (vpn-gateway common-lisp:nil :type
    (common-lisp:or vpn-gateway common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpn-gateway-result
                    'make-create-vpn-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway))
      (common-lisp:list
       (common-lisp:cons "VpnGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpn-gateway-result))
   common-lisp:nil))
(common-lisp:deftype currency-code-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (customer-gateway (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-gateway-"))
   (bgp-asn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (customer-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ip-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-gateway 'make-customer-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input customer-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input customer-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-asn))
      (common-lisp:list
       (common-lisp:cons "BgpAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input customer-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype customer-gateway-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-customer-gateway-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype customer-gateway-list ()
   '(trivial-types:proper-list customer-gateway))
 (common-lisp:defun |make-customer-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype datafeed-subscription-state () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-customer-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-customer-gateway-request-"))
   (customer-gateway-id (common-lisp:error ":customer-gateway-id is required")
    :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-customer-gateway-request
                    'make-delete-customer-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-customer-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-customer-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-customer-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dhcp-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dhcp-options-request-"))
   (dhcp-options-id (common-lisp:error ":dhcp-options-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dhcp-options-request
                    'make-delete-dhcp-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dhcp-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dhcp-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-id))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dhcp-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-egress-only-internet-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-egress-only-internet-gateway-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress-only-internet-gateway-id
    (common-lisp:error ":egress-only-internet-gateway-id is required") :type
    (common-lisp:or egress-only-internet-gateway-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-egress-only-internet-gateway-request
                    'make-delete-egress-only-internet-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-egress-only-internet-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-egress-only-internet-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-egress-only-internet-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-egress-only-internet-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-egress-only-internet-gateway-result-"))
   (return-code common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-egress-only-internet-gateway-result
                    'make-delete-egress-only-internet-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-egress-only-internet-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-egress-only-internet-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-code))
      (common-lisp:list
       (common-lisp:cons "ReturnCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-egress-only-internet-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-flow-logs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-flow-logs-request-"))
   (flow-log-ids (common-lisp:error ":flow-log-ids is required") :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-flow-logs-request 'make-delete-flow-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-log-ids))
      (common-lisp:list
       (common-lisp:cons "FlowLogIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-flow-logs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-flow-logs-result-"))
   (unsuccessful common-lisp:nil :type
    (common-lisp:or unsuccessful-item-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-flow-logs-result 'make-delete-flow-logs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-logs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-logs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unsuccessful))
      (common-lisp:list
       (common-lisp:cons "Unsuccessful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-logs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-internet-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-internet-gateway-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (internet-gateway-id (common-lisp:error ":internet-gateway-id is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-internet-gateway-request
                    'make-delete-internet-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-internet-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-internet-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-internet-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-key-pair-request-"))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-key-pair-request 'make-delete-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-nat-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-nat-gateway-request-"))
   (nat-gateway-id (common-lisp:error ":nat-gateway-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-nat-gateway-request
                    'make-delete-nat-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nat-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nat-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nat-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-nat-gateway-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-nat-gateway-result-"))
   (nat-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-nat-gateway-result
                    'make-delete-nat-gateway-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-nat-gateway-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-nat-gateway-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-nat-gateway-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-network-acl-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-network-acl-entry-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress (common-lisp:error ":egress is required") :type
    (common-lisp:or boolean common-lisp:null))
   (network-acl-id (common-lisp:error ":network-acl-id is required") :type
    (common-lisp:or string common-lisp:null))
   (rule-number (common-lisp:error ":rule-number is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-network-acl-entry-request
                    'make-delete-network-acl-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-acl-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-acl-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "RuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-acl-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-network-acl-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-network-acl-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-acl-id (common-lisp:error ":network-acl-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-network-acl-request
                    'make-delete-network-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-network-interface-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-network-interface-permission-request-"))
   (network-interface-permission-id
    (common-lisp:error ":network-interface-permission-id is required") :type
    (common-lisp:or string common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-network-interface-permission-request
                    'make-delete-network-interface-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-permission-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfacePermissionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-network-interface-permission-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-network-interface-permission-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-network-interface-permission-result
                    'make-delete-network-interface-permission-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-permission-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-permission-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-permission-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-network-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-network-interface-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-network-interface-request
                    'make-delete-network-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-placement-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-placement-group-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-placement-group-request
                    'make-delete-placement-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-placement-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-placement-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-placement-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-route-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-route-request-"))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-route-request 'make-delete-route-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-route-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-route-table-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-route-table-request
                    'make-delete-route-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-route-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-security-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-security-group-request-"))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-security-group-request
                    'make-delete-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-request-"))
   (snapshot-id (common-lisp:error ":snapshot-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-request 'make-delete-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-spot-datafeed-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-spot-datafeed-subscription-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-spot-datafeed-subscription-request
                    'make-delete-spot-datafeed-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-spot-datafeed-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-spot-datafeed-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-spot-datafeed-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subnet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subnet-request-"))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subnet-request 'make-delete-subnet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subnet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or resource-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-volume-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-volume-request-"))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-volume-request 'make-delete-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-endpoints-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-endpoint-ids (common-lisp:error ":vpc-endpoint-ids is required") :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-endpoints-request
                    'make-delete-vpc-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-ids))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-endpoints-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-endpoints-result-"))
   (unsuccessful common-lisp:nil :type
    (common-lisp:or unsuccessful-item-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-endpoints-result
                    'make-delete-vpc-endpoints-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoints-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoints-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unsuccessful))
      (common-lisp:list
       (common-lisp:cons "Unsuccessful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoints-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-peering-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-peering-connection-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-peering-connection-id
    (common-lisp:error ":vpc-peering-connection-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-peering-connection-request
                    'make-delete-vpc-peering-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-peering-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-peering-connection-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-peering-connection-result
                    'make-delete-vpc-peering-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-request-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-request 'make-delete-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpn-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpn-connection-request-"))
   (vpn-connection-id (common-lisp:error ":vpn-connection-id is required")
    :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpn-connection-request
                    'make-delete-vpn-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpn-connection-route-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpn-connection-route-request-"))
   (destination-cidr-block
    (common-lisp:error ":destination-cidr-block is required") :type
    (common-lisp:or string common-lisp:null))
   (vpn-connection-id (common-lisp:error ":vpn-connection-id is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpn-connection-route-request
                    'make-delete-vpn-connection-route-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-connection-route-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-connection-route-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-connection-route-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpn-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpn-gateway-request-"))
   (vpn-gateway-id (common-lisp:error ":vpn-gateway-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpn-gateway-request
                    'make-delete-vpn-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpn-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-image-request-"))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-image-request 'make-deregister-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-attributes-request-"))
   (attribute-names common-lisp:nil :type
    (common-lisp:or account-attribute-name-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-request
                    'make-describe-account-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-attributes-result-"))
   (account-attributes common-lisp:nil :type
    (common-lisp:or account-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-result
                    'make-describe-account-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-attributes))
      (common-lisp:list
       (common-lisp:cons "AccountAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addresses-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (public-ips common-lisp:nil :type
    (common-lisp:or public-ip-string-list common-lisp:null))
   (allocation-ids common-lisp:nil :type
    (common-lisp:or allocation-id-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-request
                    'make-describe-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ips))
      (common-lisp:list
       (common-lisp:cons "PublicIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-ids))
      (common-lisp:list
       (common-lisp:cons "AllocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-addresses-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-addresses-result-"))
   (addresses common-lisp:nil :type
    (common-lisp:or address-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-addresses-result
                    'make-describe-addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-availability-zones-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-availability-zones-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (zone-names common-lisp:nil :type
    (common-lisp:or zone-name-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-availability-zones-request
                    'make-describe-availability-zones-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-zones-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-zones-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-names))
      (common-lisp:list
       (common-lisp:cons "ZoneNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-zones-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-availability-zones-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-availability-zones-result-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-availability-zones-result
                    'make-describe-availability-zones-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-zones-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-zones-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-availability-zones-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-bundle-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-bundle-tasks-request-"))
   (bundle-ids common-lisp:nil :type
    (common-lisp:or bundle-id-string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-bundle-tasks-request
                    'make-describe-bundle-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-ids))
      (common-lisp:list
       (common-lisp:cons "BundleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-bundle-tasks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-bundle-tasks-result-"))
   (bundle-tasks common-lisp:nil :type
    (common-lisp:or bundle-task-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-bundle-tasks-result
                    'make-describe-bundle-tasks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-tasks))
      (common-lisp:list
       (common-lisp:cons "BundleTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-classic-link-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-classic-link-instances-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-classic-link-instances-request
                    'make-describe-classic-link-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-classic-link-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-classic-link-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-classic-link-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-classic-link-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-classic-link-instances-result-"))
   (instances common-lisp:nil :type
    (common-lisp:or classic-link-instance-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-classic-link-instances-result
                    'make-describe-classic-link-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-classic-link-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-classic-link-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-classic-link-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-conversion-task-list ()
   '(trivial-types:proper-list conversion-task))
 (common-lisp:defun |make-describe-conversion-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conversion-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-conversion-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-conversion-tasks-request-"))
   (conversion-task-ids common-lisp:nil :type
    (common-lisp:or conversion-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-conversion-tasks-request
                    'make-describe-conversion-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversion-task-ids))
      (common-lisp:list
       (common-lisp:cons "ConversionTaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-conversion-tasks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-conversion-tasks-result-"))
   (conversion-tasks common-lisp:nil :type
    (common-lisp:or describe-conversion-task-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-conversion-tasks-result
                    'make-describe-conversion-tasks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversion-tasks))
      (common-lisp:list
       (common-lisp:cons "ConversionTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-customer-gateways-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-customer-gateways-request-"))
   (customer-gateway-ids common-lisp:nil :type
    (common-lisp:or customer-gateway-id-string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-customer-gateways-request
                    'make-describe-customer-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-ids))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-customer-gateways-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-customer-gateways-result-"))
   (customer-gateways common-lisp:nil :type
    (common-lisp:or customer-gateway-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-customer-gateways-result
                    'make-describe-customer-gateways-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-gateways-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-gateways-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateways))
      (common-lisp:list
       (common-lisp:cons "CustomerGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-customer-gateways-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dhcp-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dhcp-options-request-"))
   (dhcp-options-ids common-lisp:nil :type
    (common-lisp:or dhcp-options-id-string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dhcp-options-request
                    'make-describe-dhcp-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dhcp-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dhcp-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-ids))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dhcp-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dhcp-options-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dhcp-options-result-"))
   (dhcp-options common-lisp:nil :type
    (common-lisp:or dhcp-options-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dhcp-options-result
                    'make-describe-dhcp-options-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dhcp-options-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dhcp-options-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options))
      (common-lisp:list
       (common-lisp:cons "DhcpOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dhcp-options-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-egress-only-internet-gateways-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-egress-only-internet-gateways-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress-only-internet-gateway-ids common-lisp:nil :type
    (common-lisp:or egress-only-internet-gateway-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-egress-only-internet-gateways-request
                    'make-describe-egress-only-internet-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-egress-only-internet-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-egress-only-internet-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-ids))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-egress-only-internet-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-egress-only-internet-gateways-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-egress-only-internet-gateways-result-"))
   (egress-only-internet-gateways common-lisp:nil :type
    (common-lisp:or egress-only-internet-gateway-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-egress-only-internet-gateways-result
                    'make-describe-egress-only-internet-gateways-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-egress-only-internet-gateways-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-egress-only-internet-gateways-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateways))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-egress-only-internet-gateways-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elastic-gpus-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-elastic-gpus-request-"))
   (elastic-gpu-ids common-lisp:nil :type
    (common-lisp:or elastic-gpu-id-set common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elastic-gpus-request
                    'make-describe-elastic-gpus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-gpus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-gpus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-ids))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-gpus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elastic-gpus-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-elastic-gpus-result-"))
   (elastic-gpu-set common-lisp:nil :type
    (common-lisp:or elastic-gpu-set common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elastic-gpus-result
                    'make-describe-elastic-gpus-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-gpus-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-gpus-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-set))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-gpus-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-request-"))
   (export-task-ids common-lisp:nil :type
    (common-lisp:or export-task-id-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-request
                    'make-describe-export-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-task-ids))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-result-"))
   (export-tasks common-lisp:nil :type
    (common-lisp:or export-task-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-result
                    'make-describe-export-tasks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-tasks))
      (common-lisp:list
       (common-lisp:cons "ExportTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-logs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-logs-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter-list common-lisp:null))
   (flow-log-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-logs-request
                    'make-describe-flow-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-log-ids))
      (common-lisp:list
       (common-lisp:cons "FlowLogIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-logs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-logs-result-"))
   (flow-logs common-lisp:nil :type
    (common-lisp:or flow-log-set common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-logs-result
                    'make-describe-flow-logs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-logs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-logs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs))
      (common-lisp:list
       (common-lisp:cons "FlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-logs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-fpga-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-fpga-images-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (fpga-image-ids common-lisp:nil :type
    (common-lisp:or fpga-image-id-list common-lisp:null))
   (owners common-lisp:nil :type
    (common-lisp:or owner-string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-fpga-images-request
                    'make-describe-fpga-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fpga-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fpga-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpga-image-ids))
      (common-lisp:list
       (common-lisp:cons "FpgaImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owners))
      (common-lisp:list
       (common-lisp:cons "Owners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fpga-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-fpga-images-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-fpga-images-result-"))
   (fpga-images common-lisp:nil :type
    (common-lisp:or fpga-image-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-fpga-images-result
                    'make-describe-fpga-images-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fpga-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fpga-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpga-images))
      (common-lisp:list
       (common-lisp:cons "FpgaImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fpga-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-host-reservation-offerings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-host-reservation-offerings-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter-list common-lisp:null))
   (max-duration common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (min-duration common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-host-reservation-offerings-request
                    'make-describe-host-reservation-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservation-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservation-offerings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duration))
      (common-lisp:list
       (common-lisp:cons "MaxDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-duration))
      (common-lisp:list
       (common-lisp:cons "MinDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservation-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-host-reservation-offerings-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-host-reservation-offerings-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offering-set common-lisp:nil :type
    (common-lisp:or host-offering-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-host-reservation-offerings-result
                    'make-describe-host-reservation-offerings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservation-offerings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservation-offerings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-set))
      (common-lisp:list
       (common-lisp:cons "OfferingSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservation-offerings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-host-reservations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-host-reservations-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter-list common-lisp:null))
   (host-reservation-id-set common-lisp:nil :type
    (common-lisp:or host-reservation-id-set common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-host-reservations-request
                    'make-describe-host-reservations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-reservation-id-set))
      (common-lisp:list
       (common-lisp:cons "HostReservationIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-host-reservations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-host-reservations-result-"))
   (host-reservation-set common-lisp:nil :type
    (common-lisp:or host-reservation-set common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-host-reservations-result
                    'make-describe-host-reservations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-reservation-set))
      (common-lisp:list
       (common-lisp:cons "HostReservationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-reservations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hosts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hosts-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter-list common-lisp:null))
   (host-ids common-lisp:nil :type
    (common-lisp:or request-host-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hosts-request 'make-describe-hosts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-ids))
      (common-lisp:list
       (common-lisp:cons "HostIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hosts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hosts-result-"))
   (hosts common-lisp:nil :type (common-lisp:or host-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hosts-result 'make-describe-hosts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosts))
      (common-lisp:list
       (common-lisp:cons "Hosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-iam-instance-profile-associations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-iam-instance-profile-associations-request-"))
   (association-ids common-lisp:nil :type
    (common-lisp:or association-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-iam-instance-profile-associations-request
                    'make-describe-iam-instance-profile-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-iam-instance-profile-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-iam-instance-profile-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-ids))
      (common-lisp:list
       (common-lisp:cons "AssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-iam-instance-profile-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-iam-instance-profile-associations-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-iam-instance-profile-associations-result-"))
   (iam-instance-profile-associations common-lisp:nil :type
    (common-lisp:or iam-instance-profile-association-set common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-iam-instance-profile-associations-result
                    'make-describe-iam-instance-profile-associations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-iam-instance-profile-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-iam-instance-profile-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-associations))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfileAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-iam-instance-profile-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-id-format-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-id-format-request-"))
   (resource common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-id-format-request
                    'make-describe-id-format-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-id-format-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-id-format-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-id-format-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-id-format-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-id-format-result-"))
   (statuses common-lisp:nil :type
    (common-lisp:or id-format-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-id-format-result
                    'make-describe-id-format-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-id-format-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-id-format-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "Statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-id-format-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-identity-id-format-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-identity-id-format-request-"))
   (principal-arn (common-lisp:error ":principal-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-id-format-request
                    'make-describe-identity-id-format-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-id-format-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-id-format-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-id-format-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-identity-id-format-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-identity-id-format-result-"))
   (statuses common-lisp:nil :type
    (common-lisp:or id-format-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-id-format-result
                    'make-describe-identity-id-format-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-id-format-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-id-format-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "Statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-id-format-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-image-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-image-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or image-attribute-name common-lisp:null))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-image-attribute-request
                    'make-describe-image-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-images-request-"))
   (executable-users common-lisp:nil :type
    (common-lisp:or executable-by-string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (image-ids common-lisp:nil :type
    (common-lisp:or image-id-string-list common-lisp:null))
   (owners common-lisp:nil :type
    (common-lisp:or owner-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-images-request 'make-describe-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executable-users))
      (common-lisp:list
       (common-lisp:cons "ExecutableUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "ImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owners))
      (common-lisp:list
       (common-lisp:cons "Owners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-images-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-images-result-"))
   (images common-lisp:nil :type (common-lisp:or image-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-images-result 'make-describe-images-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'images))
      (common-lisp:list
       (common-lisp:cons "Images"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-import-image-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-import-image-tasks-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (import-task-ids common-lisp:nil :type
    (common-lisp:or import-task-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-import-image-tasks-request
                    'make-describe-import-image-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-image-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-image-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-ids))
      (common-lisp:list
       (common-lisp:cons "ImportTaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-image-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-import-image-tasks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-import-image-tasks-result-"))
   (import-image-tasks common-lisp:nil :type
    (common-lisp:or import-image-task-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-import-image-tasks-result
                    'make-describe-import-image-tasks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-image-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-image-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-image-tasks))
      (common-lisp:list
       (common-lisp:cons "ImportImageTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-image-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-import-snapshot-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-import-snapshot-tasks-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (import-task-ids common-lisp:nil :type
    (common-lisp:or import-task-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-import-snapshot-tasks-request
                    'make-describe-import-snapshot-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-snapshot-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-snapshot-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-ids))
      (common-lisp:list
       (common-lisp:cons "ImportTaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-snapshot-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-import-snapshot-tasks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-import-snapshot-tasks-result-"))
   (import-snapshot-tasks common-lisp:nil :type
    (common-lisp:or import-snapshot-task-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-import-snapshot-tasks-result
                    'make-describe-import-snapshot-tasks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-snapshot-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-snapshot-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-snapshot-tasks))
      (common-lisp:list
       (common-lisp:cons "ImportSnapshotTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-snapshot-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or instance-attribute-name common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-attribute-request
                    'make-describe-instance-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-status-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (include-all-instances common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-status-request
                    'make-describe-instance-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-all-instances))
      (common-lisp:list
       (common-lisp:cons "IncludeAllInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instance-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instance-status-result-"))
   (instance-statuses common-lisp:nil :type
    (common-lisp:or instance-status-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-status-result
                    'make-describe-instance-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-statuses))
      (common-lisp:list
       (common-lisp:cons "InstanceStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instances-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (instance-ids common-lisp:nil :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-request
                    'make-describe-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-instances-result-"))
   (reservations common-lisp:nil :type
    (common-lisp:or reservation-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-result
                    'make-describe-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-internet-gateways-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-internet-gateways-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (internet-gateway-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-internet-gateways-request
                    'make-describe-internet-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-internet-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-internet-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-gateway-ids))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-internet-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-internet-gateways-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-internet-gateways-result-"))
   (internet-gateways common-lisp:nil :type
    (common-lisp:or internet-gateway-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-internet-gateways-result
                    'make-describe-internet-gateways-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-internet-gateways-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-internet-gateways-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateways))
      (common-lisp:list
       (common-lisp:cons "InternetGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-internet-gateways-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-key-pairs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-key-pairs-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (key-names common-lisp:nil :type
    (common-lisp:or key-name-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-key-pairs-request
                    'make-describe-key-pairs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-pairs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-pairs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-names))
      (common-lisp:list
       (common-lisp:cons "KeyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-pairs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-key-pairs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-key-pairs-result-"))
   (key-pairs common-lisp:nil :type
    (common-lisp:or key-pair-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-key-pairs-result
                    'make-describe-key-pairs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-pairs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-pairs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pairs))
      (common-lisp:list
       (common-lisp:cons "KeyPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-pairs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-moving-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-moving-addresses-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (public-ips common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-moving-addresses-request
                    'make-describe-moving-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-moving-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-moving-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ips))
      (common-lisp:list
       (common-lisp:cons "PublicIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-moving-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-moving-addresses-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-moving-addresses-result-"))
   (moving-address-statuses common-lisp:nil :type
    (common-lisp:or moving-address-status-set common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-moving-addresses-result
                    'make-describe-moving-addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-moving-addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-moving-addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'moving-address-statuses))
      (common-lisp:list
       (common-lisp:cons "MovingAddressStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-moving-addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-nat-gateways-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-nat-gateways-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (nat-gateway-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-nat-gateways-request
                    'make-describe-nat-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nat-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nat-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-ids))
      (common-lisp:list
       (common-lisp:cons "NatGatewayIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nat-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-nat-gateways-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-nat-gateways-result-"))
   (nat-gateways common-lisp:nil :type
    (common-lisp:or nat-gateway-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-nat-gateways-result
                    'make-describe-nat-gateways-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-nat-gateways-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-nat-gateways-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateways))
      (common-lisp:list
       (common-lisp:cons "NatGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-nat-gateways-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-acls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-network-acls-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-acl-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-acls-request
                    'make-describe-network-acls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-acls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-acls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkAclIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-acls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-acls-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-network-acls-result-"))
   (network-acls common-lisp:nil :type
    (common-lisp:or network-acl-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-acls-result
                    'make-describe-network-acls-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-acls-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-acls-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acls))
      (common-lisp:list
       (common-lisp:cons "NetworkAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-acls-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-interface-attribute-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-network-interface-attribute-request-"))
   (attribute common-lisp:nil :type
    (common-lisp:or network-interface-attribute common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-interface-attribute-request
                    'make-describe-network-interface-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-interface-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-network-interface-attribute-result-"))
   (attachment common-lisp:nil :type
    (common-lisp:or network-interface-attachment common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-interface-attribute-result
                    'make-describe-network-interface-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-interface-permissions-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-network-interface-permissions-request-"))
   (network-interface-permission-ids common-lisp:nil :type
    (common-lisp:or network-interface-permission-id-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-interface-permissions-request
                    'make-describe-network-interface-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-permission-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfacePermissionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-interface-permissions-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-network-interface-permissions-result-"))
   (network-interface-permissions common-lisp:nil :type
    (common-lisp:or network-interface-permission-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-interface-permissions-result
                    'make-describe-network-interface-permissions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-permissions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-permissions))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfacePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interface-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-interfaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-network-interfaces-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-interface-ids common-lisp:nil :type
    (common-lisp:or network-interface-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-interfaces-request
                    'make-describe-network-interfaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-network-interfaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-network-interfaces-result-"))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or network-interface-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-network-interfaces-result
                    'make-describe-network-interfaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interfaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interfaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-network-interfaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-placement-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-placement-groups-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (group-names common-lisp:nil :type
    (common-lisp:or placement-group-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-placement-groups-request
                    'make-describe-placement-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-placement-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-placement-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-names))
      (common-lisp:list
       (common-lisp:cons "GroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-placement-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-placement-groups-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-placement-groups-result-"))
   (placement-groups common-lisp:nil :type
    (common-lisp:or placement-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-placement-groups-result
                    'make-describe-placement-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-placement-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-placement-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-groups))
      (common-lisp:list
       (common-lisp:cons "PlacementGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-placement-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-prefix-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-prefix-lists-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (prefix-list-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-prefix-lists-request
                    'make-describe-prefix-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-prefix-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-prefix-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "PrefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-prefix-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-prefix-lists-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-prefix-lists-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (prefix-lists common-lisp:nil :type
    (common-lisp:or prefix-list-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-prefix-lists-result
                    'make-describe-prefix-lists-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-prefix-lists-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-prefix-lists-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-lists))
      (common-lisp:list
       (common-lisp:cons "PrefixLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-prefix-lists-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-regions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-regions-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (region-names common-lisp:nil :type
    (common-lisp:or region-name-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-regions-request 'make-describe-regions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-names))
      (common-lisp:list
       (common-lisp:cons "RegionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-regions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-regions-result-"))
   (regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-regions-result 'make-describe-regions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-listings-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-instances-listings-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (reserved-instances-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-instances-listing-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-listings-request
                    'make-describe-reserved-instances-listings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-listings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-listings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-listing-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesListingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-listings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-listings-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-instances-listings-result-"))
   (reserved-instances-listings common-lisp:nil :type
    (common-lisp:or reserved-instances-listing-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-listings-result
                    'make-describe-reserved-instances-listings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-listings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-listings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-listings))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesListings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-listings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-modifications-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-instances-modifications-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (reserved-instances-modification-ids common-lisp:nil :type
    (common-lisp:or reserved-instances-modification-id-string-list
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-modifications-request
                    'make-describe-reserved-instances-modifications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-modifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-modifications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-modification-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesModificationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-modifications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-modifications-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-instances-modifications-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-instances-modifications common-lisp:nil :type
    (common-lisp:or reserved-instances-modification-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-modifications-result
                    'make-describe-reserved-instances-modifications-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-modifications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-modifications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-modifications))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-modifications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-offerings-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-instances-offerings-request-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (include-marketplace common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (max-duration common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (max-instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (min-duration common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (offering-class common-lisp:nil :type
    (common-lisp:or offering-class-type common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or riproduct-description common-lisp:null))
   (reserved-instances-offering-ids common-lisp:nil :type
    (common-lisp:or reserved-instances-offering-id-string-list
                    common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-tenancy common-lisp:nil :type
    (common-lisp:or tenancy common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-offerings-request
                    'make-describe-reserved-instances-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-offerings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-marketplace))
      (common-lisp:list
       (common-lisp:cons "IncludeMarketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duration))
      (common-lisp:list
       (common-lisp:cons "MaxDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-instance-count))
      (common-lisp:list
       (common-lisp:cons "MaxInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-duration))
      (common-lisp:list
       (common-lisp:cons "MinDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "OfferingClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-offering-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesOfferingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tenancy))
      (common-lisp:list
       (common-lisp:cons "InstanceTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-offerings-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-instances-offerings-result-"))
   (reserved-instances-offerings common-lisp:nil :type
    (common-lisp:or reserved-instances-offering-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-offerings-result
                    'make-describe-reserved-instances-offerings-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-offerings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-offerings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-offerings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-instances-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (offering-class common-lisp:nil :type
    (common-lisp:or offering-class-type common-lisp:null))
   (reserved-instances-ids common-lisp:nil :type
    (common-lisp:or reserved-instances-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-request
                    'make-describe-reserved-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "OfferingClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-instances-result-"))
   (reserved-instances common-lisp:nil :type
    (common-lisp:or reserved-instances-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-result
                    'make-describe-reserved-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-instances))
      (common-lisp:list
       (common-lisp:cons "ReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-route-tables-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-route-tables-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-route-tables-request
                    'make-describe-route-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-route-tables-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-route-tables-result-"))
   (route-tables common-lisp:nil :type
    (common-lisp:or route-table-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-route-tables-result
                    'make-describe-route-tables-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-tables-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-tables-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-tables))
      (common-lisp:list
       (common-lisp:cons "RouteTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-tables-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-instance-availability-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-scheduled-instance-availability-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (first-slot-start-time-range
    (common-lisp:error ":first-slot-start-time-range is required") :type
    (common-lisp:or slot-date-time-range-request common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (max-slot-duration-in-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (min-slot-duration-in-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (recurrence (common-lisp:error ":recurrence is required") :type
    (common-lisp:or scheduled-instance-recurrence-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-instance-availability-request
                    'make-describe-scheduled-instance-availability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instance-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instance-availability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-slot-start-time-range))
      (common-lisp:list
       (common-lisp:cons "FirstSlotStartTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-slot-duration-in-hours))
      (common-lisp:list
       (common-lisp:cons "MaxSlotDurationInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-slot-duration-in-hours))
      (common-lisp:list
       (common-lisp:cons "MinSlotDurationInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instance-availability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-instance-availability-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-scheduled-instance-availability-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scheduled-instance-availability-set common-lisp:nil :type
    (common-lisp:or scheduled-instance-availability-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-instance-availability-result
                    'make-describe-scheduled-instance-availability-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instance-availability-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instance-availability-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-instance-availability-set))
      (common-lisp:list
       (common-lisp:cons "ScheduledInstanceAvailabilitySet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instance-availability-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scheduled-instances-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scheduled-instance-ids common-lisp:nil :type
    (common-lisp:or scheduled-instance-id-request-set common-lisp:null))
   (slot-start-time-range common-lisp:nil :type
    (common-lisp:or slot-start-time-range-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-instances-request
                    'make-describe-scheduled-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-instance-ids))
      (common-lisp:list
       (common-lisp:cons "ScheduledInstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-start-time-range))
      (common-lisp:list
       (common-lisp:cons "SlotStartTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scheduled-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scheduled-instances-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scheduled-instance-set common-lisp:nil :type
    (common-lisp:or scheduled-instance-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scheduled-instances-result
                    'make-describe-scheduled-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-instance-set))
      (common-lisp:list
       (common-lisp:cons "ScheduledInstanceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scheduled-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-group-references-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-group-references-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-group-references-request
                    'make-describe-security-group-references-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-group-references-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-group-references-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-group-references-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-group-references-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-group-references-result-"))
   (security-group-reference-set common-lisp:nil :type
    (common-lisp:or security-group-references common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-group-references-result
                    'make-describe-security-group-references-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-group-references-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-group-references-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-reference-set))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupReferenceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-group-references-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-groups-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (group-ids common-lisp:nil :type
    (common-lisp:or group-id-string-list common-lisp:null))
   (group-names common-lisp:nil :type
    (common-lisp:or group-name-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-groups-request
                    'make-describe-security-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-ids))
      (common-lisp:list
       (common-lisp:cons "GroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-names))
      (common-lisp:list
       (common-lisp:cons "GroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-groups-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-groups-result-"))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-groups-result
                    'make-describe-security-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshot-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshot-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or snapshot-attribute-name common-lisp:null))
   (snapshot-id (common-lisp:error ":snapshot-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshot-attribute-request
                    'make-describe-snapshot-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshot-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshot-attribute-result-"))
   (create-volume-permissions common-lisp:nil :type
    (common-lisp:or create-volume-permission-list common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshot-attribute-result
                    'make-describe-snapshot-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-volume-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateVolumePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshots-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-ids common-lisp:nil :type
    (common-lisp:or owner-string-list common-lisp:null))
   (restorable-by-user-ids common-lisp:nil :type
    (common-lisp:or restorable-by-string-list common-lisp:null))
   (snapshot-ids common-lisp:nil :type
    (common-lisp:or snapshot-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-request
                    'make-describe-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-ids))
      (common-lisp:list
       (common-lisp:cons "OwnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restorable-by-user-ids))
      (common-lisp:list
       (common-lisp:cons "RestorableByUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-ids))
      (common-lisp:list
       (common-lisp:cons "SnapshotIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshots-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshots-result-"))
   (snapshots common-lisp:nil :type
    (common-lisp:or snapshot-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-result
                    'make-describe-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-datafeed-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-datafeed-subscription-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-datafeed-subscription-request
                    'make-describe-spot-datafeed-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-datafeed-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-datafeed-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-datafeed-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-datafeed-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-datafeed-subscription-result-"))
   (spot-datafeed-subscription common-lisp:nil :type
    (common-lisp:or spot-datafeed-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-datafeed-subscription-result
                    'make-describe-spot-datafeed-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-datafeed-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-datafeed-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-datafeed-subscription))
      (common-lisp:list
       (common-lisp:cons "SpotDatafeedSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-datafeed-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-fleet-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-fleet-instances-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-fleet-instances-request
                    'make-describe-spot-fleet-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-fleet-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-fleet-instances-response-"))
   (active-instances (common-lisp:error ":active-instances is required") :type
    (common-lisp:or active-instance-set common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-fleet-instances-response
                    'make-describe-spot-fleet-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-instances))
      (common-lisp:list
       (common-lisp:cons "ActiveInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-fleet-request-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-fleet-request-history-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (event-type common-lisp:nil :type
    (common-lisp:or event-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-fleet-request-history-request
                    'make-describe-spot-fleet-request-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-request-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-request-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-request-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-fleet-request-history-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-spot-fleet-request-history-response-"))
   (history-records (common-lisp:error ":history-records is required") :type
    (common-lisp:or history-records common-lisp:null))
   (last-evaluated-time (common-lisp:error ":last-evaluated-time is required")
    :type (common-lisp:or date-time common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-fleet-request-history-response
                    'make-describe-spot-fleet-request-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-request-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-request-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'history-records))
      (common-lisp:list
       (common-lisp:cons "HistoryRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-time))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-request-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-fleet-requests-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-fleet-requests-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-fleet-request-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-fleet-requests-request
                    'make-describe-spot-fleet-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-ids))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-fleet-requests-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-fleet-requests-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-fleet-request-configs
    (common-lisp:error ":spot-fleet-request-configs is required") :type
    (common-lisp:or spot-fleet-request-config-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-fleet-requests-response
                    'make-describe-spot-fleet-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-configs))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-fleet-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-instance-requests-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-instance-requests-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (spot-instance-request-ids common-lisp:nil :type
    (common-lisp:or spot-instance-request-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-instance-requests-request
                    'make-describe-spot-instance-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-instance-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-instance-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-request-ids))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequestIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-instance-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-instance-requests-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-instance-requests-result-"))
   (spot-instance-requests common-lisp:nil :type
    (common-lisp:or spot-instance-request-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-instance-requests-result
                    'make-describe-spot-instance-requests-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-instance-requests-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-instance-requests-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-requests))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-instance-requests-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-price-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-price-history-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or instance-type-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-descriptions common-lisp:nil :type
    (common-lisp:or product-description-list common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-price-history-request
                    'make-describe-spot-price-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-price-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-price-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-descriptions))
      (common-lisp:list
       (common-lisp:cons "ProductDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-price-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-spot-price-history-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-spot-price-history-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-price-history common-lisp:nil :type
    (common-lisp:or spot-price-history-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-spot-price-history-result
                    'make-describe-spot-price-history-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-price-history-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-price-history-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price-history))
      (common-lisp:list
       (common-lisp:cons "SpotPriceHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-spot-price-history-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stale-security-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stale-security-groups-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stale-security-groups-request
                    'make-describe-stale-security-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stale-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stale-security-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stale-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stale-security-groups-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stale-security-groups-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (stale-security-group-set common-lisp:nil :type
    (common-lisp:or stale-security-group-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stale-security-groups-result
                    'make-describe-stale-security-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stale-security-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stale-security-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stale-security-group-set))
      (common-lisp:list
       (common-lisp:cons "StaleSecurityGroupSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stale-security-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subnets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subnets-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subnets-request 'make-describe-subnets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subnets-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subnets-result-"))
   (subnets common-lisp:nil :type
    (common-lisp:or subnet-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subnets-result 'make-describe-subnets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subnets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or tag-description-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-result 'make-describe-tags-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volume-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volume-attribute-request-"))
   (attribute common-lisp:nil :type
    (common-lisp:or volume-attribute-name common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volume-attribute-request
                    'make-describe-volume-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volume-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volume-attribute-result-"))
   (auto-enable-io common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volume-attribute-result
                    'make-describe-volume-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable-io))
      (common-lisp:list
       (common-lisp:cons "AutoEnableIO"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volume-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volume-status-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-ids common-lisp:nil :type
    (common-lisp:or volume-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volume-status-request
                    'make-describe-volume-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-ids))
      (common-lisp:list
       (common-lisp:cons "VolumeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volume-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volume-status-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-statuses common-lisp:nil :type
    (common-lisp:or volume-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volume-status-result
                    'make-describe-volume-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-statuses))
      (common-lisp:list
       (common-lisp:cons "VolumeStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volume-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volumes-modifications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volumes-modifications-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (volume-ids common-lisp:nil :type
    (common-lisp:or volume-id-string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-modifications-request
                    'make-describe-volumes-modifications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-modifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-modifications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-ids))
      (common-lisp:list
       (common-lisp:cons "VolumeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-modifications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volumes-modifications-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volumes-modifications-result-"))
   (volumes-modifications common-lisp:nil :type
    (common-lisp:or volume-modification-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-modifications-result
                    'make-describe-volumes-modifications-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-modifications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-modifications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volumes-modifications))
      (common-lisp:list
       (common-lisp:cons "VolumesModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-modifications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volumes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volumes-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (volume-ids common-lisp:nil :type
    (common-lisp:or volume-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-request 'make-describe-volumes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-ids))
      (common-lisp:list
       (common-lisp:cons "VolumeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-volumes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-volumes-result-"))
   (volumes common-lisp:nil :type
    (common-lisp:or volume-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-result 'make-describe-volumes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or vpc-attribute-name common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-attribute-request
                    'make-describe-vpc-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-attribute-result-"))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-dns-hostnames common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (enable-dns-support common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-attribute-result
                    'make-describe-vpc-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-dns-hostnames))
      (common-lisp:list
       (common-lisp:cons "EnableDnsHostnames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-dns-support))
      (common-lisp:list
       (common-lisp:cons "EnableDnsSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-classic-link-dns-support-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-vpc-classic-link-dns-support-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vpc-ids common-lisp:nil :type
    (common-lisp:or vpc-classic-link-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-classic-link-dns-support-request
                    'make-describe-vpc-classic-link-dns-support-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-dns-support-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-dns-support-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-ids))
      (common-lisp:list
       (common-lisp:cons "VpcIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-dns-support-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-classic-link-dns-support-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-vpc-classic-link-dns-support-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vpcs common-lisp:nil :type
    (common-lisp:or classic-link-dns-support-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-classic-link-dns-support-result
                    'make-describe-vpc-classic-link-dns-support-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-dns-support-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-dns-support-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcs))
      (common-lisp:list
       (common-lisp:cons "Vpcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-dns-support-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-classic-link-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-classic-link-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-ids common-lisp:nil :type
    (common-lisp:or vpc-classic-link-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-classic-link-request
                    'make-describe-vpc-classic-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-ids))
      (common-lisp:list
       (common-lisp:cons "VpcIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-classic-link-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-classic-link-result-"))
   (vpcs common-lisp:nil :type
    (common-lisp:or vpc-classic-link-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-classic-link-result
                    'make-describe-vpc-classic-link-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcs))
      (common-lisp:list
       (common-lisp:cons "Vpcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-classic-link-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-endpoint-services-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-endpoint-services-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoint-services-request
                    'make-describe-vpc-endpoint-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoint-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoint-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoint-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-endpoint-services-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-endpoint-services-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (service-names common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoint-services-result
                    'make-describe-vpc-endpoint-services-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoint-services-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoint-services-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-names))
      (common-lisp:list
       (common-lisp:cons "ServiceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoint-services-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-endpoints-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-endpoint-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoints-request
                    'make-describe-vpc-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-ids))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-endpoints-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-endpoints-result-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-endpoints common-lisp:nil :type
    (common-lisp:or vpc-endpoint-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoints-result
                    'make-describe-vpc-endpoints-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-peering-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-peering-connections-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-peering-connection-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-peering-connections-request
                    'make-describe-vpc-peering-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-ids))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-peering-connections-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-peering-connections-result-"))
   (vpc-peering-connections common-lisp:nil :type
    (common-lisp:or vpc-peering-connection-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-peering-connections-result
                    'make-describe-vpc-peering-connections-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connections))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpcs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpcs-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (vpc-ids common-lisp:nil :type
    (common-lisp:or vpc-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpcs-request 'make-describe-vpcs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpcs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpcs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-ids))
      (common-lisp:list
       (common-lisp:cons "VpcIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpcs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpcs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpcs-result-"))
   (vpcs common-lisp:nil :type (common-lisp:or vpc-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpcs-result 'make-describe-vpcs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-vpcs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-vpcs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcs))
      (common-lisp:list
       (common-lisp:cons "Vpcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-vpcs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpn-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpn-connections-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (vpn-connection-ids common-lisp:nil :type
    (common-lisp:or vpn-connection-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpn-connections-request
                    'make-describe-vpn-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-ids))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpn-connections-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpn-connections-result-"))
   (vpn-connections common-lisp:nil :type
    (common-lisp:or vpn-connection-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpn-connections-result
                    'make-describe-vpn-connections-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-connections-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-connections-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connections))
      (common-lisp:list
       (common-lisp:cons "VpnConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-connections-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpn-gateways-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpn-gateways-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (vpn-gateway-ids common-lisp:nil :type
    (common-lisp:or vpn-gateway-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpn-gateways-request
                    'make-describe-vpn-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-ids))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpn-gateways-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpn-gateways-result-"))
   (vpn-gateways common-lisp:nil :type
    (common-lisp:or vpn-gateway-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpn-gateways-result
                    'make-describe-vpn-gateways-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-gateways-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-gateways-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateways))
      (common-lisp:list
       (common-lisp:cons "VpnGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpn-gateways-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-classic-link-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-classic-link-vpc-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-classic-link-vpc-request
                    'make-detach-classic-link-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-classic-link-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-classic-link-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-classic-link-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-classic-link-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-classic-link-vpc-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-classic-link-vpc-result
                    'make-detach-classic-link-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-classic-link-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-classic-link-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-classic-link-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-internet-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-internet-gateway-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (internet-gateway-id (common-lisp:error ":internet-gateway-id is required")
    :type (common-lisp:or string common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-internet-gateway-request
                    'make-detach-internet-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-internet-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-internet-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-internet-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-network-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-network-interface-request-"))
   (attachment-id (common-lisp:error ":attachment-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-network-interface-request
                    'make-detach-network-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-network-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-network-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-network-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-volume-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-volume-request-"))
   (device common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-volume-request 'make-detach-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-vpn-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-vpn-gateway-request-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpn-gateway-id (common-lisp:error ":vpn-gateway-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-vpn-gateway-request
                    'make-detach-vpn-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-vpn-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-vpn-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-vpn-gateway-request))
   common-lisp:nil))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dhcp-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-dhcp-configuration-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or dhcp-configuration-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dhcp-configuration 'make-dhcp-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dhcp-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dhcp-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dhcp-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dhcp-configuration-list ()
   '(trivial-types:proper-list dhcp-configuration))
 (common-lisp:defun |make-dhcp-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dhcp-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dhcp-configuration-value-list ()
   '(trivial-types:proper-list attribute-value))
 (common-lisp:defun |make-dhcp-configuration-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dhcp-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-dhcp-options-"))
   (dhcp-configurations common-lisp:nil :type
    (common-lisp:or dhcp-configuration-list common-lisp:null))
   (dhcp-options-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dhcp-options 'make-dhcp-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dhcp-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dhcp-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-configurations))
      (common-lisp:list
       (common-lisp:cons "DhcpConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-id))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dhcp-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dhcp-options-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-dhcp-options-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dhcp-options-list ()
   '(trivial-types:proper-list dhcp-options))
 (common-lisp:defun |make-dhcp-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dhcp-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-vgw-route-propagation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-vgw-route-propagation-request-"))
   (gateway-id (common-lisp:error ":gateway-id is required") :type
    (common-lisp:or string common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-vgw-route-propagation-request
                    'make-disable-vgw-route-propagation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-vgw-route-propagation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-vgw-route-propagation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-vgw-route-propagation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-vpc-classic-link-dns-support-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disable-vpc-classic-link-dns-support-request-"))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-vpc-classic-link-dns-support-request
                    'make-disable-vpc-classic-link-dns-support-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-dns-support-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-dns-support-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-dns-support-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-vpc-classic-link-dns-support-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-vpc-classic-link-dns-support-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-vpc-classic-link-dns-support-result
                    'make-disable-vpc-classic-link-dns-support-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-dns-support-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-dns-support-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-dns-support-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-vpc-classic-link-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-vpc-classic-link-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-vpc-classic-link-request
                    'make-disable-vpc-classic-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-vpc-classic-link-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-vpc-classic-link-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-vpc-classic-link-result
                    'make-disable-vpc-classic-link-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-vpc-classic-link-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-address-request-"))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-address-request
                    'make-disassociate-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-iam-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-iam-instance-profile-request-"))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-iam-instance-profile-request
                    'make-disassociate-iam-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-iam-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-iam-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-iam-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-iam-instance-profile-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-iam-instance-profile-result-"))
   (iam-instance-profile-association common-lisp:nil :type
    (common-lisp:or iam-instance-profile-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-iam-instance-profile-result
                    'make-disassociate-iam-instance-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-iam-instance-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-iam-instance-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-association))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfileAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-iam-instance-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-route-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-route-table-request-"))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-route-table-request
                    'make-disassociate-route-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-route-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-route-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-route-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-subnet-cidr-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-subnet-cidr-block-request-"))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-subnet-cidr-block-request
                    'make-disassociate-subnet-cidr-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-subnet-cidr-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-subnet-cidr-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-subnet-cidr-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-subnet-cidr-block-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-subnet-cidr-block-result-"))
   (ipv6cidr-block-association common-lisp:nil :type
    (common-lisp:or subnet-ipv6cidr-block-association common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-subnet-cidr-block-result
                    'make-disassociate-subnet-cidr-block-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-subnet-cidr-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-subnet-cidr-block-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-subnet-cidr-block-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-vpc-cidr-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-vpc-cidr-block-request-"))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-vpc-cidr-block-request
                    'make-disassociate-vpc-cidr-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpc-cidr-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpc-cidr-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpc-cidr-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-vpc-cidr-block-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-vpc-cidr-block-result-"))
   (ipv6cidr-block-association common-lisp:nil :type
    (common-lisp:or vpc-ipv6cidr-block-association common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-vpc-cidr-block-result
                    'make-disassociate-vpc-cidr-block-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpc-cidr-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpc-cidr-block-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpc-cidr-block-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-image-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image common-lisp:nil :type
    (common-lisp:or disk-image-detail common-lisp:null))
   (volume common-lisp:nil :type
    (common-lisp:or volume-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disk-image 'make-disk-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-image-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-image-description-"))
   (checksum common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or disk-image-format common-lisp:null))
   (import-manifest-url (common-lisp:error ":import-manifest-url is required")
    :type (common-lisp:or string common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disk-image-description 'make-disk-image-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disk-image-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disk-image-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "Checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-manifest-url))
      (common-lisp:list
       (common-lisp:cons "ImportManifestUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disk-image-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-image-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-image-detail-"))
   (bytes (common-lisp:error ":bytes is required") :type
    (common-lisp:or long common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or disk-image-format common-lisp:null))
   (import-manifest-url (common-lisp:error ":import-manifest-url is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disk-image-detail 'make-disk-image-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-image-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-image-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "Bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-manifest-url))
      (common-lisp:list
       (common-lisp:cons "ImportManifestUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-image-detail))
   common-lisp:nil))
(common-lisp:deftype disk-image-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype disk-image-list ()
   '(trivial-types:proper-list disk-image))
 (common-lisp:defun |make-disk-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-image-volume-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-image-volume-description-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disk-image-volume-description
                    'make-disk-image-volume-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disk-image-volume-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disk-image-volume-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disk-image-volume-description))
   common-lisp:nil))
(common-lisp:deftype domain-type () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-block-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-block-device-"))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-block-device 'make-ebs-block-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-block-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-block-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-block-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-instance-block-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-instance-block-device-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-instance-block-device
                    'make-ebs-instance-block-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-instance-block-device-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-instance-block-device-specification-"))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-instance-block-device-specification
                    'make-ebs-instance-block-device-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (egress-only-internet-gateway (:copier common-lisp:nil)
      (:conc-name "struct-shape-egress-only-internet-gateway-"))
   (attachments common-lisp:nil :type
    (common-lisp:or internet-gateway-attachment-list common-lisp:null))
   (egress-only-internet-gateway-id common-lisp:nil :type
    (common-lisp:or egress-only-internet-gateway-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'egress-only-internet-gateway
                    'make-egress-only-internet-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          egress-only-internet-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          egress-only-internet-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          egress-only-internet-gateway))
   common-lisp:nil))
(common-lisp:deftype egress-only-internet-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype egress-only-internet-gateway-id-list ()
   '(trivial-types:proper-list egress-only-internet-gateway-id))
 (common-lisp:defun |make-egress-only-internet-gateway-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            egress-only-internet-gateway-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype egress-only-internet-gateway-list ()
   '(trivial-types:proper-list egress-only-internet-gateway))
 (common-lisp:defun |make-egress-only-internet-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            egress-only-internet-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (elastic-gpu-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-elastic-gpu-association-"))
   (elastic-gpu-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-gpu-association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-gpu-association-state common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-gpu-association-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elastic-gpu-association 'make-elastic-gpu-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elastic-gpu-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elastic-gpu-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-id))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-association-id))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-association-state))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuAssociationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-association-time))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuAssociationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elastic-gpu-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elastic-gpu-association-list ()
   '(trivial-types:proper-list elastic-gpu-association))
 (common-lisp:defun |make-elastic-gpu-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elastic-gpu-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (elastic-gpu-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-elastic-gpu-health-"))
   (status common-lisp:nil :type
    (common-lisp:or elastic-gpu-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elastic-gpu-health 'make-elastic-gpu-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elastic-gpu-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elastic-gpu-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elastic-gpu-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elastic-gpu-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-elastic-gpu-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype elastic-gpu-set ()
   '(trivial-types:proper-list elastic-gpus))
 (common-lisp:defun |make-elastic-gpu-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elastic-gpus))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (elastic-gpu-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-elastic-gpu-specification-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elastic-gpu-specification
                    'make-elastic-gpu-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elastic-gpu-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elastic-gpu-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elastic-gpu-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elastic-gpu-specifications ()
   '(trivial-types:proper-list elastic-gpu-specification))
 (common-lisp:defun |make-elastic-gpu-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            elastic-gpu-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype elastic-gpu-state () 'common-lisp:string)
(common-lisp:deftype elastic-gpu-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (elastic-gpus (:copier common-lisp:nil)
      (:conc-name "struct-shape-elastic-gpus-"))
   (elastic-gpu-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-gpu-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-gpu-health common-lisp:nil :type
    (common-lisp:or elastic-gpu-health common-lisp:null))
   (elastic-gpu-state common-lisp:nil :type
    (common-lisp:or elastic-gpu-state common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'elastic-gpus 'make-elastic-gpus))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elastic-gpus))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elastic-gpus))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-id))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-type))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-health))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-gpu-state))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elastic-gpus))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-vgw-route-propagation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-vgw-route-propagation-request-"))
   (gateway-id (common-lisp:error ":gateway-id is required") :type
    (common-lisp:or string common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-vgw-route-propagation-request
                    'make-enable-vgw-route-propagation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-vgw-route-propagation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-vgw-route-propagation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-vgw-route-propagation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-volume-iorequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-volume-iorequest-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-volume-iorequest 'make-enable-volume-iorequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-volume-iorequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-volume-iorequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-volume-iorequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-vpc-classic-link-dns-support-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-vpc-classic-link-dns-support-request-"))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-vpc-classic-link-dns-support-request
                    'make-enable-vpc-classic-link-dns-support-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-dns-support-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-dns-support-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-dns-support-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-vpc-classic-link-dns-support-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-vpc-classic-link-dns-support-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-vpc-classic-link-dns-support-result
                    'make-enable-vpc-classic-link-dns-support-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-dns-support-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-dns-support-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-dns-support-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-vpc-classic-link-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-vpc-classic-link-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-vpc-classic-link-request
                    'make-enable-vpc-classic-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-vpc-classic-link-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-vpc-classic-link-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-vpc-classic-link-result
                    'make-enable-vpc-classic-link-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-vpc-classic-link-result))
   common-lisp:nil))
(common-lisp:deftype event-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-information-"))
   (event-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (event-sub-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-information 'make-event-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-description))
      (common-lisp:list
       (common-lisp:cons "EventDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-sub-type))
      (common-lisp:list
       (common-lisp:cons "EventSubType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-information))
   common-lisp:nil))
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:deftype excess-capacity-termination-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype executable-by-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-executable-by-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype export-environment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-task-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (export-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (export-to-s3task common-lisp:nil :type
    (common-lisp:or export-to-s3task common-lisp:null))
   (instance-export-details common-lisp:nil :type
    (common-lisp:or instance-export-details common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or export-task-state common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'export-task 'make-export-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-task-id))
      (common-lisp:list
       (common-lisp:cons "ExportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-to-s3task))
      (common-lisp:list
       (common-lisp:cons "ExportToS3Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-export-details))
      (common-lisp:list
       (common-lisp:cons "InstanceExportDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-task-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-export-task-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype export-task-list ()
   '(trivial-types:proper-list export-task))
 (common-lisp:defun |make-export-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype export-task-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-to-s3task (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-to-s3task-"))
   (container-format common-lisp:nil :type
    (common-lisp:or container-format common-lisp:null))
   (disk-image-format common-lisp:nil :type
    (common-lisp:or disk-image-format common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-to-s3task 'make-export-to-s3task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-to-s3task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-to-s3task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-format))
      (common-lisp:list
       (common-lisp:cons "ContainerFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-image-format))
      (common-lisp:list
       (common-lisp:cons "DiskImageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-to-s3task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-to-s3task-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-to-s3task-specification-"))
   (container-format common-lisp:nil :type
    (common-lisp:or container-format common-lisp:null))
   (disk-image-format common-lisp:nil :type
    (common-lisp:or disk-image-format common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3prefix common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-to-s3task-specification
                    'make-export-to-s3task-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-to-s3task-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-to-s3task-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-format))
      (common-lisp:list
       (common-lisp:cons "ContainerFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-image-format))
      (common-lisp:list
       (common-lisp:cons "DiskImageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-to-s3task-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-type () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (flow-log (:copier common-lisp:nil) (:conc-name "struct-shape-flow-log-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (deliver-logs-error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deliver-logs-permission-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deliver-logs-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (flow-log-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (flow-log-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (traffic-type common-lisp:nil :type
    (common-lisp:or traffic-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'flow-log 'make-flow-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flow-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flow-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deliver-logs-error-message))
      (common-lisp:list
       (common-lisp:cons "DeliverLogsErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deliver-logs-permission-arn))
      (common-lisp:list
       (common-lisp:cons "DeliverLogsPermissionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deliver-logs-status))
      (common-lisp:list
       (common-lisp:cons "DeliverLogsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-log-id))
      (common-lisp:list
       (common-lisp:cons "FlowLogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-log-status))
      (common-lisp:list
       (common-lisp:cons "FlowLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-type))
      (common-lisp:list
       (common-lisp:cons "TrafficType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flow-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype flow-log-set () '(trivial-types:proper-list flow-log))
 (common-lisp:defun |make-flow-log-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list flow-log))
   aws-sdk/generator/shape::members))
(common-lisp:deftype flow-logs-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fpga-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-fpga-image-"))
   (fpga-image-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (fpga-image-global-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (shell-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pci-id common-lisp:nil :type (common-lisp:or pci-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or fpga-image-state common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-alias common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'fpga-image 'make-fpga-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fpga-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fpga-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fpga-image-id))
      (common-lisp:list
       (common-lisp:cons "FpgaImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fpga-image-global-id))
      (common-lisp:list
       (common-lisp:cons "FpgaImageGlobalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shell-version))
      (common-lisp:list
       (common-lisp:cons "ShellVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pci-id))
      (common-lisp:list
       (common-lisp:cons "PciId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-alias))
      (common-lisp:list
       (common-lisp:cons "OwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fpga-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fpga-image-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-fpga-image-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fpga-image-list ()
   '(trivial-types:proper-list fpga-image))
 (common-lisp:defun |make-fpga-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fpga-image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (fpga-image-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-fpga-image-state-"))
   (code common-lisp:nil :type
    (common-lisp:or fpga-image-state-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fpga-image-state 'make-fpga-image-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fpga-image-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fpga-image-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fpga-image-state))
   common-lisp:nil))
(common-lisp:deftype fpga-image-state-code () 'common-lisp:string)
(common-lisp:deftype gateway-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-console-output-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-console-output-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-console-output-request
                    'make-get-console-output-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-console-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-console-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-console-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-console-output-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-console-output-result-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (output common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-console-output-result
                    'make-get-console-output-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-console-output-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-console-output-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-console-output-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-console-screenshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-console-screenshot-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (wake-up common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-console-screenshot-request
                    'make-get-console-screenshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-console-screenshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-console-screenshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wake-up))
      (common-lisp:list
       (common-lisp:cons "WakeUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-console-screenshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-console-screenshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-console-screenshot-result-"))
   (image-data common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-console-screenshot-result
                    'make-get-console-screenshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-console-screenshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-console-screenshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-data))
      (common-lisp:list
       (common-lisp:cons "ImageData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-console-screenshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-host-reservation-purchase-preview-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-host-reservation-purchase-preview-request-"))
   (host-id-set (common-lisp:error ":host-id-set is required") :type
    (common-lisp:or request-host-id-set common-lisp:null))
   (offering-id (common-lisp:error ":offering-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-host-reservation-purchase-preview-request
                    'make-get-host-reservation-purchase-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-host-reservation-purchase-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-host-reservation-purchase-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id-set))
      (common-lisp:list
       (common-lisp:cons "HostIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-host-reservation-purchase-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-host-reservation-purchase-preview-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-host-reservation-purchase-preview-result-"))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (purchase common-lisp:nil :type
    (common-lisp:or purchase-set common-lisp:null))
   (total-hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-upfront-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-host-reservation-purchase-preview-result
                    'make-get-host-reservation-purchase-preview-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-host-reservation-purchase-preview-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-host-reservation-purchase-preview-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchase))
      (common-lisp:list
       (common-lisp:cons "Purchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-hourly-price))
      (common-lisp:list
       (common-lisp:cons "TotalHourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-upfront-price))
      (common-lisp:list
       (common-lisp:cons "TotalUpfrontPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-host-reservation-purchase-preview-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-password-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-password-data-request-"))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-password-data-request
                    'make-get-password-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-password-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-password-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-password-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-password-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-password-data-result-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (password-data common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-password-data-result 'make-get-password-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-password-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-password-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-data))
      (common-lisp:list
       (common-lisp:cons "PasswordData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-password-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reserved-instances-exchange-quote-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-reserved-instances-exchange-quote-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (reserved-instance-ids
    (common-lisp:error ":reserved-instance-ids is required") :type
    (common-lisp:or reserved-instance-id-set common-lisp:null))
   (target-configurations common-lisp:nil :type
    (common-lisp:or target-configuration-request-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reserved-instances-exchange-quote-request
                    'make-get-reserved-instances-exchange-quote-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-instances-exchange-quote-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-instances-exchange-quote-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configurations))
      (common-lisp:list
       (common-lisp:cons "TargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-instances-exchange-quote-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reserved-instances-exchange-quote-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-reserved-instances-exchange-quote-result-"))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-valid-exchange common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (output-reserved-instances-will-expire-at common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (payment-due common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-instance-value-rollup common-lisp:nil :type
    (common-lisp:or reservation-value common-lisp:null))
   (reserved-instance-value-set common-lisp:nil :type
    (common-lisp:or reserved-instance-reservation-value-set common-lisp:null))
   (target-configuration-value-rollup common-lisp:nil :type
    (common-lisp:or reservation-value common-lisp:null))
   (target-configuration-value-set common-lisp:nil :type
    (common-lisp:or target-reservation-value-set common-lisp:null))
   (validation-failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reserved-instances-exchange-quote-result
                    'make-get-reserved-instances-exchange-quote-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-instances-exchange-quote-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-instances-exchange-quote-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-valid-exchange))
      (common-lisp:list
       (common-lisp:cons "IsValidExchange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-reserved-instances-will-expire-at))
      (common-lisp:list
       (common-lisp:cons "OutputReservedInstancesWillExpireAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-due))
      (common-lisp:list
       (common-lisp:cons "PaymentDue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-value-rollup))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceValueRollup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-value-set))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceValueSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration-value-rollup))
      (common-lisp:list
       (common-lisp:cons "TargetConfigurationValueRollup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration-value-set))
      (common-lisp:list
       (common-lisp:cons "TargetConfigurationValueSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-failure-reason))
      (common-lisp:list
       (common-lisp:cons "ValidationFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reserved-instances-exchange-quote-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-group-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (group-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-identifier-"))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-identifier 'make-group-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-identifier-list ()
   '(trivial-types:proper-list group-identifier))
 (common-lisp:defun |make-group-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype group-ids () '(trivial-types:proper-list string))
 (common-lisp:defun |make-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype group-name-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-group-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (history-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-history-record-"))
   (event-information (common-lisp:error ":event-information is required")
    :type (common-lisp:or event-information common-lisp:null))
   (event-type (common-lisp:error ":event-type is required") :type
    (common-lisp:or event-type common-lisp:null))
   (timestamp (common-lisp:error ":timestamp is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'history-record 'make-history-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input history-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input history-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-information))
      (common-lisp:list
       (common-lisp:cons "EventInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input history-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype history-records ()
   '(trivial-types:proper-list history-record))
 (common-lisp:defun |make-history-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list history-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (host (:copier common-lisp:nil) (:conc-name "struct-shape-host-"))
   (auto-placement common-lisp:nil :type
    (common-lisp:or auto-placement common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (available-capacity common-lisp:nil :type
    (common-lisp:or available-capacity common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (host-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (host-properties common-lisp:nil :type
    (common-lisp:or host-properties common-lisp:null))
   (host-reservation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or host-instance-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or allocation-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'host 'make-host))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-placement))
      (common-lisp:list
       (common-lisp:cons "AutoPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-capacity))
      (common-lisp:list
       (common-lisp:cons "AvailableCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id))
      (common-lisp:list
       (common-lisp:cons "HostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-properties))
      (common-lisp:list
       (common-lisp:cons "HostProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-reservation-id))
      (common-lisp:list
       (common-lisp:cons "HostReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (host-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-host-instance-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'host-instance 'make-host-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-instance-list ()
   '(trivial-types:proper-list host-instance))
 (common-lisp:defun |make-host-instance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype host-list () '(trivial-types:proper-list host))
 (common-lisp:defun |make-host-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (host-offering (:copier common-lisp:nil)
      (:conc-name "struct-shape-host-offering-"))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (upfront-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'host-offering 'make-host-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-price))
      (common-lisp:list
       (common-lisp:cons "HourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-price))
      (common-lisp:list
       (common-lisp:cons "UpfrontPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-offering-set ()
   '(trivial-types:proper-list host-offering))
 (common-lisp:defun |make-host-offering-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (host-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-host-properties-"))
   (cores common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sockets common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (total-vcpus common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'host-properties 'make-host-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cores))
      (common-lisp:list
       (common-lisp:cons "Cores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sockets))
      (common-lisp:list
       (common-lisp:cons "Sockets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-vcpus))
      (common-lisp:list
       (common-lisp:cons "TotalVCpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (host-reservation (:copier common-lisp:nil)
      (:conc-name "struct-shape-host-reservation-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (host-id-set common-lisp:nil :type
    (common-lisp:or response-host-id-set common-lisp:null))
   (host-reservation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or reservation-state common-lisp:null))
   (upfront-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'host-reservation 'make-host-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id-set))
      (common-lisp:list
       (common-lisp:cons "HostIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-reservation-id))
      (common-lisp:list
       (common-lisp:cons "HostReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-price))
      (common-lisp:list
       (common-lisp:cons "HourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-price))
      (common-lisp:list
       (common-lisp:cons "UpfrontPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-reservation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-reservation-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-host-reservation-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype host-reservation-set ()
   '(trivial-types:proper-list host-reservation))
 (common-lisp:defun |make-host-reservation-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-reservation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype host-tenancy () 'common-lisp:string)
(common-lisp:deftype hypervisor-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iam-instance-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-iam-instance-profile-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iam-instance-profile 'make-iam-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iam-instance-profile-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-iam-instance-profile-association-"))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or iam-instance-profile common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or iam-instance-profile-association-state common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iam-instance-profile-association
                    'make-iam-instance-profile-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-instance-profile-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-instance-profile-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-instance-profile-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iam-instance-profile-association-set ()
   '(trivial-types:proper-list iam-instance-profile-association))
 (common-lisp:defun |make-iam-instance-profile-association-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            iam-instance-profile-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iam-instance-profile-association-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iam-instance-profile-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-iam-instance-profile-specification-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iam-instance-profile-specification
                    'make-iam-instance-profile-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-instance-profile-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-instance-profile-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-instance-profile-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (icmp-type-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-icmp-type-code-"))
   (code common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'icmp-type-code 'make-icmp-type-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icmp-type-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (id-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-id-format-"))
   (deadline common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (use-long-ids common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'id-format 'make-id-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input id-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input id-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deadline))
      (common-lisp:list
       (common-lisp:cons "Deadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-long-ids))
      (common-lisp:list
       (common-lisp:cons "UseLongIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input id-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype id-format-list () '(trivial-types:proper-list id-format))
 (common-lisp:defun |make-id-format-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id-format))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image (:copier common-lisp:nil) (:conc-name "struct-shape-image-"))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture-values common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image-location common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (image-type common-lisp:nil :type
    (common-lisp:or image-type-values common-lisp:null))
   (public common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or platform-values common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or image-state common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-list common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ena-support common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (hypervisor common-lisp:nil :type
    (common-lisp:or hypervisor-type common-lisp:null))
   (image-owner-alias common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (root-device-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (root-device-type common-lisp:nil :type
    (common-lisp:or device-type common-lisp:null))
   (sriov-net-support common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state-reason common-lisp:nil :type
    (common-lisp:or state-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtualization-type common-lisp:nil :type
    (common-lisp:or virtualization-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-location))
      (common-lisp:list
       (common-lisp:cons "ImageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-type))
      (common-lisp:list
       (common-lisp:cons "ImageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public))
      (common-lisp:list
       (common-lisp:cons "Public"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ena-support))
      (common-lisp:list
       (common-lisp:cons "EnaSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hypervisor))
      (common-lisp:list
       (common-lisp:cons "Hypervisor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-owner-alias))
      (common-lisp:list
       (common-lisp:cons "ImageOwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-name))
      (common-lisp:list
       (common-lisp:cons "RootDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-type))
      (common-lisp:list
       (common-lisp:cons "RootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sriov-net-support))
      (common-lisp:list
       (common-lisp:cons "SriovNetSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-attribute-"))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-list common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (launch-permissions common-lisp:nil :type
    (common-lisp:or launch-permission-list common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (kernel-id common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (ramdisk-id common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (sriov-net-support common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-attribute 'make-image-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-permissions))
      (common-lisp:list
       (common-lisp:cons "LaunchPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sriov-net-support))
      (common-lisp:list
       (common-lisp:cons "SriovNetSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-attribute))
   common-lisp:nil))
(common-lisp:deftype image-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-disk-container (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-disk-container-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-bucket common-lisp:nil :type
    (common-lisp:or user-bucket common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-disk-container 'make-image-disk-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-disk-container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-disk-container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-bucket))
      (common-lisp:list
       (common-lisp:cons "UserBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-disk-container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-disk-container-list ()
   '(trivial-types:proper-list image-disk-container))
 (common-lisp:defun |make-image-disk-container-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-disk-container))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-image-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-list () '(trivial-types:proper-list image))
 (common-lisp:defun |make-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-state () 'common-lisp:string)
(common-lisp:deftype image-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-image-request-"))
   (architecture common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (client-data common-lisp:nil :type
    (common-lisp:or client-data common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (disk-containers common-lisp:nil :type
    (common-lisp:or image-disk-container-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (hypervisor common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (role-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-image-request 'make-import-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-data))
      (common-lisp:list
       (common-lisp:cons "ClientData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-containers))
      (common-lisp:list
       (common-lisp:cons "DiskContainers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hypervisor))
      (common-lisp:list
       (common-lisp:cons "Hypervisor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "LicenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-image-result-"))
   (architecture common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hypervisor common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-details common-lisp:nil :type
    (common-lisp:or snapshot-detail-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-image-result 'make-import-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hypervisor))
      (common-lisp:list
       (common-lisp:cons "Hypervisor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "ImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "LicenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-details))
      (common-lisp:list
       (common-lisp:cons "SnapshotDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-image-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-image-task-"))
   (architecture common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hypervisor common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-details common-lisp:nil :type
    (common-lisp:or snapshot-detail-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-image-task 'make-import-image-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-image-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-image-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hypervisor))
      (common-lisp:list
       (common-lisp:cons "Hypervisor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "ImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "LicenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-details))
      (common-lisp:list
       (common-lisp:cons "SnapshotDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-image-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-image-task-list ()
   '(trivial-types:proper-list import-image-task))
 (common-lisp:defun |make-import-image-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-image-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-instance-launch-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-instance-launch-specification-"))
   (additional-info common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture-values common-lisp:null))
   (group-ids common-lisp:nil :type
    (common-lisp:or security-group-id-string-list common-lisp:null))
   (group-names common-lisp:nil :type
    (common-lisp:or security-group-string-list common-lisp:null))
   (instance-initiated-shutdown-behavior common-lisp:nil :type
    (common-lisp:or shutdown-behavior common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (monitoring common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or placement common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or user-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-instance-launch-specification
                    'make-import-instance-launch-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-launch-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-launch-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-ids))
      (common-lisp:list
       (common-lisp:cons "GroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-names))
      (common-lisp:list
       (common-lisp:cons "GroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-initiated-shutdown-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInitiatedShutdownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-launch-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-instance-request-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (disk-images common-lisp:nil :type
    (common-lisp:or disk-image-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (launch-specification common-lisp:nil :type
    (common-lisp:or import-instance-launch-specification common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-instance-request 'make-import-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-images))
      (common-lisp:list
       (common-lisp:cons "DiskImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-instance-result-"))
   (conversion-task common-lisp:nil :type
    (common-lisp:or conversion-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-instance-result 'make-import-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversion-task))
      (common-lisp:list
       (common-lisp:cons "ConversionTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-instance-task-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-instance-task-details-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or platform-values common-lisp:null))
   (volumes (common-lisp:error ":volumes is required") :type
    (common-lisp:or import-instance-volume-detail-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-instance-task-details
                    'make-import-instance-task-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-instance-volume-detail-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-instance-volume-detail-item-"))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or string common-lisp:null))
   (bytes-converted (common-lisp:error ":bytes-converted is required") :type
    (common-lisp:or long common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or disk-image-description common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (volume (common-lisp:error ":volume is required") :type
    (common-lisp:or disk-image-volume-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-instance-volume-detail-item
                    'make-import-instance-volume-detail-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-volume-detail-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-volume-detail-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-converted))
      (common-lisp:list
       (common-lisp:cons "BytesConverted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-instance-volume-detail-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-instance-volume-detail-set ()
   '(trivial-types:proper-list import-instance-volume-detail-item))
 (common-lisp:defun |make-import-instance-volume-detail-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-instance-volume-detail-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-key-pair-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or string common-lisp:null))
   (public-key-material (common-lisp:error ":public-key-material is required")
    :type (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-key-pair-request 'make-import-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-material))
      (common-lisp:list
       (common-lisp:cons "PublicKeyMaterial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-key-pair-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-key-pair-result-"))
   (key-fingerprint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-key-pair-result 'make-import-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-snapshot-request-"))
   (client-data common-lisp:nil :type
    (common-lisp:or client-data common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (disk-container common-lisp:nil :type
    (common-lisp:or snapshot-disk-container common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (role-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-snapshot-request 'make-import-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-data))
      (common-lisp:list
       (common-lisp:cons "ClientData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-container))
      (common-lisp:list
       (common-lisp:cons "DiskContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-snapshot-result-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-task-detail common-lisp:nil :type
    (common-lisp:or snapshot-task-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-snapshot-result 'make-import-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "ImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-task-detail))
      (common-lisp:list
       (common-lisp:cons "SnapshotTaskDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-snapshot-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-snapshot-task-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (import-task-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-task-detail common-lisp:nil :type
    (common-lisp:or snapshot-task-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-snapshot-task 'make-import-snapshot-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-snapshot-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-snapshot-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "ImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-task-detail))
      (common-lisp:list
       (common-lisp:cons "SnapshotTaskDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-snapshot-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-snapshot-task-list ()
   '(trivial-types:proper-list import-snapshot-task))
 (common-lisp:defun |make-import-snapshot-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-snapshot-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-task-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-import-task-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-volume-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-volume-request-"))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or disk-image-detail common-lisp:null))
   (volume (common-lisp:error ":volume is required") :type
    (common-lisp:or volume-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-volume-request 'make-import-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-volume-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-volume-result-"))
   (conversion-task common-lisp:nil :type
    (common-lisp:or conversion-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-volume-result 'make-import-volume-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-volume-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-volume-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversion-task))
      (common-lisp:list
       (common-lisp:cons "ConversionTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-volume-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-volume-task-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-volume-task-details-"))
   (availability-zone (common-lisp:error ":availability-zone is required")
    :type (common-lisp:or string common-lisp:null))
   (bytes-converted (common-lisp:error ":bytes-converted is required") :type
    (common-lisp:or long common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or disk-image-description common-lisp:null))
   (volume (common-lisp:error ":volume is required") :type
    (common-lisp:or disk-image-volume-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-volume-task-details
                    'make-import-volume-task-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-volume-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-volume-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-converted))
      (common-lisp:list
       (common-lisp:cons "BytesConverted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-volume-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (ami-launch-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (launch-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or monitoring common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or placement common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or platform-values common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (public-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null))
   (state-transition-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture-values common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mapping-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ena-support common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (hypervisor common-lisp:nil :type
    (common-lisp:or hypervisor-type common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or iam-instance-profile common-lisp:null))
   (instance-lifecycle common-lisp:nil :type
    (common-lisp:or instance-lifecycle-type common-lisp:null))
   (elastic-gpu-associations common-lisp:nil :type
    (common-lisp:or elastic-gpu-association-list common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or instance-network-interface-list common-lisp:null))
   (root-device-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (root-device-type common-lisp:nil :type
    (common-lisp:or device-type common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (spot-instance-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sriov-net-support common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state-reason common-lisp:nil :type
    (common-lisp:or state-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtualization-type common-lisp:nil :type
    (common-lisp:or virtualization-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-launch-index))
      (common-lisp:list
       (common-lisp:cons "AmiLaunchIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "PublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-transition-reason))
      (common-lisp:list
       (common-lisp:cons "StateTransitionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ena-support))
      (common-lisp:list
       (common-lisp:cons "EnaSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hypervisor))
      (common-lisp:list
       (common-lisp:cons "Hypervisor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-lifecycle))
      (common-lisp:list
       (common-lisp:cons "InstanceLifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-associations))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-name))
      (common-lisp:list
       (common-lisp:cons "RootDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-type))
      (common-lisp:list
       (common-lisp:cons "RootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sriov-net-support))
      (common-lisp:list
       (common-lisp:cons "SriovNetSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-attribute-"))
   (groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mapping-list common-lisp:null))
   (disable-api-termination common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (ena-support common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-initiated-shutdown-behavior common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (kernel-id common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-list common-lisp:null))
   (ramdisk-id common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (root-device-name common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (sriov-net-support common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-attribute 'make-instance-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-api-termination))
      (common-lisp:list
       (common-lisp:cons "DisableApiTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ena-support))
      (common-lisp:list
       (common-lisp:cons "EnaSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-initiated-shutdown-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInitiatedShutdownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-name))
      (common-lisp:list
       (common-lisp:cons "RootDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sriov-net-support))
      (common-lisp:list
       (common-lisp:cons "SriovNetSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-attribute))
   common-lisp:nil))
(common-lisp:deftype instance-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-block-device-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-block-device-mapping-"))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or ebs-instance-block-device common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-block-device-mapping
                    'make-instance-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-block-device-mapping-list ()
   '(trivial-types:proper-list instance-block-device-mapping))
 (common-lisp:defun |make-instance-block-device-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-block-device-mapping-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-block-device-mapping-specification-"))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or ebs-instance-block-device-specification common-lisp:null))
   (no-device common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-block-device-mapping-specification
                    'make-instance-block-device-mapping-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-block-device-mapping-specification-list ()
   '(trivial-types:proper-list instance-block-device-mapping-specification))
 (common-lisp:defun |make-instance-block-device-mapping-specification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-block-device-mapping-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-capacity (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-capacity-"))
   (available-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-capacity 'make-instance-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-capacity))
      (common-lisp:list
       (common-lisp:cons "AvailableCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-capacity))
      (common-lisp:list
       (common-lisp:cons "TotalCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-count (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-count-"))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or listing-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-count 'make-instance-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-count-list ()
   '(trivial-types:proper-list instance-count))
 (common-lisp:defun |make-instance-count-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-count))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-export-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-export-details-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (target-environment common-lisp:nil :type
    (common-lisp:or export-environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-export-details 'make-instance-export-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-export-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-export-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-environment))
      (common-lisp:list
       (common-lisp:cons "TargetEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-export-details))
   common-lisp:nil))
(common-lisp:deftype instance-health-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-id-set () '(trivial-types:proper-list string))
 (common-lisp:defun |make-instance-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-instance-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-ipv6address (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-ipv6address-"))
   (ipv6address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-ipv6address 'make-instance-ipv6address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-ipv6address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-ipv6address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "Ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-ipv6address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-ipv6address-list ()
   '(trivial-types:proper-list instance-ipv6address))
 (common-lisp:defun |make-instance-ipv6address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-ipv6address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-lifecycle-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-monitoring (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-monitoring-"))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or monitoring common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-monitoring 'make-instance-monitoring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-monitoring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-monitoring-list ()
   '(trivial-types:proper-list instance-monitoring))
 (common-lisp:defun |make-instance-monitoring-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-monitoring))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-network-interface-"))
   (association common-lisp:nil :type
    (common-lisp:or instance-network-interface-association common-lisp:null))
   (attachment common-lisp:nil :type
    (common-lisp:or instance-network-interface-attachment common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or instance-ipv6address-list common-lisp:null))
   (mac-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or instance-private-ip-address-list common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or network-interface-status common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-network-interface
                    'make-instance-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "Association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-network-interface-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-network-interface-association-"))
   (ip-owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (public-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-network-interface-association
                    'make-instance-network-interface-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-owner-id))
      (common-lisp:list
       (common-lisp:cons "IpOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-network-interface-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-network-interface-attachment-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (attachment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (device-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-network-interface-attachment
                    'make-instance-network-interface-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-network-interface-list ()
   '(trivial-types:proper-list instance-network-interface))
 (common-lisp:defun |make-instance-network-interface-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-network-interface-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-network-interface-specification-"))
   (associate-public-ip-address common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (device-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or security-group-id-string-list common-lisp:null))
   (ipv6address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or instance-ipv6address-list common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or private-ip-address-specification-list common-lisp:null))
   (secondary-private-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-network-interface-specification
                    'make-instance-network-interface-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-private-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "SecondaryPrivateIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-network-interface-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-network-interface-specification-list ()
   '(trivial-types:proper-list instance-network-interface-specification))
 (common-lisp:defun |make-instance-network-interface-specification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-network-interface-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-private-ip-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-private-ip-address-"))
   (association common-lisp:nil :type
    (common-lisp:or instance-network-interface-association common-lisp:null))
   (primary common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-private-ip-address
                    'make-instance-private-ip-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-private-ip-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-private-ip-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "Association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-private-ip-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-private-ip-address-list ()
   '(trivial-types:proper-list instance-private-ip-address))
 (common-lisp:defun |make-instance-private-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-private-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-state-"))
   (code common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or instance-state-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-state 'make-instance-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-state-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-state-change-"))
   (current-state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (previous-state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-state-change 'make-instance-state-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-state))
      (common-lisp:list
       (common-lisp:cons "CurrentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-state))
      (common-lisp:list
       (common-lisp:cons "PreviousState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-state-change-list ()
   '(trivial-types:proper-list instance-state-change))
 (common-lisp:defun |make-instance-state-change-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-state-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-status-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or instance-status-event-list common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null))
   (instance-status common-lisp:nil :type
    (common-lisp:or instance-status-summary common-lisp:null))
   (system-status common-lisp:nil :type
    (common-lisp:or instance-status-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-status 'make-instance-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-status))
      (common-lisp:list
       (common-lisp:cons "InstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-status))
      (common-lisp:list
       (common-lisp:cons "SystemStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-status-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-status-details-"))
   (impaired-since common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or status-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-status-details 'make-instance-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impaired-since))
      (common-lisp:list
       (common-lisp:cons "ImpairedSince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-status-details-list ()
   '(trivial-types:proper-list instance-status-details))
 (common-lisp:defun |make-instance-status-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-status-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-status-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-status-event-"))
   (code common-lisp:nil :type (common-lisp:or event-code common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (not-after common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (not-before common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-status-event 'make-instance-status-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-status-event-list ()
   '(trivial-types:proper-list instance-status-event))
 (common-lisp:defun |make-instance-status-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-status-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-status-list ()
   '(trivial-types:proper-list instance-status))
 (common-lisp:defun |make-instance-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-status-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-status-summary-"))
   (details common-lisp:nil :type
    (common-lisp:or instance-status-details-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or summary-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-status-summary 'make-instance-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-status-summary))
   common-lisp:nil))
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-type-list ()
   '(trivial-types:proper-list instance-type))
 (common-lisp:defun |make-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype interface-permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (internet-gateway (:copier common-lisp:nil)
      (:conc-name "struct-shape-internet-gateway-"))
   (attachments common-lisp:nil :type
    (common-lisp:or internet-gateway-attachment-list common-lisp:null))
   (internet-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internet-gateway 'make-internet-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input internet-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input internet-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "InternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input internet-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (internet-gateway-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-internet-gateway-attachment-"))
   (state common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internet-gateway-attachment
                    'make-internet-gateway-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internet-gateway-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internet-gateway-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internet-gateway-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype internet-gateway-attachment-list ()
   '(trivial-types:proper-list internet-gateway-attachment))
 (common-lisp:defun |make-internet-gateway-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            internet-gateway-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype internet-gateway-list ()
   '(trivial-types:proper-list internet-gateway))
 (common-lisp:defun |make-internet-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list internet-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-permission-"))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (ip-protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-ranges common-lisp:nil :type
    (common-lisp:or ip-range-list common-lisp:null))
   (ipv6ranges common-lisp:nil :type
    (common-lisp:or ipv6range-list common-lisp:null))
   (prefix-list-ids common-lisp:nil :type
    (common-lisp:or prefix-list-id-list common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (user-id-group-pairs common-lisp:nil :type
    (common-lisp:or user-id-group-pair-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-permission 'make-ip-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6ranges))
      (common-lisp:list
       (common-lisp:cons "Ipv6Ranges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "PrefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id-group-pairs))
      (common-lisp:list
       (common-lisp:cons "UserIdGroupPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-permission-list ()
   '(trivial-types:proper-list ip-permission))
 (common-lisp:defun |make-ip-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-range (:copier common-lisp:nil) (:conc-name "struct-shape-ip-range-"))
   (cidr-ip common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-range 'make-ip-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-range-list () '(trivial-types:proper-list ip-range))
 (common-lisp:defun |make-ip-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ip-ranges () '(trivial-types:proper-list string))
 (common-lisp:defun |make-ip-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipv6address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipv6address-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-ipv6address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ipv6cidr-block (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipv6cidr-block-"))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipv6cidr-block 'make-ipv6cidr-block))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipv6cidr-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipv6cidr-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipv6cidr-block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipv6cidr-block-set ()
   '(trivial-types:proper-list ipv6cidr-block))
 (common-lisp:defun |make-ipv6cidr-block-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipv6cidr-block))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ipv6range (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipv6range-"))
   (cidr-ipv6 common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipv6range 'make-ipv6range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipv6range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipv6range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ipv6))
      (common-lisp:list
       (common-lisp:cons "CidrIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipv6range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipv6range-list () '(trivial-types:proper-list ipv6range))
 (common-lisp:defun |make-ipv6range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipv6range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype key-name-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (key-pair (:copier common-lisp:nil) (:conc-name "struct-shape-key-pair-"))
   (key-fingerprint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (key-material common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-material))
      (common-lisp:list
       (common-lisp:cons "KeyMaterial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (key-pair-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-pair-info-"))
   (key-fingerprint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-pair-info 'make-key-pair-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-pair-list ()
   '(trivial-types:proper-list key-pair-info))
 (common-lisp:defun |make-key-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-pair-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-permission-"))
   (group common-lisp:nil :type
    (common-lisp:or permission-group common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-permission 'make-launch-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-permission-list ()
   '(trivial-types:proper-list launch-permission))
 (common-lisp:defun |make-launch-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-permission-modifications (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-permission-modifications-"))
   (add common-lisp:nil :type
    (common-lisp:or launch-permission-list common-lisp:null))
   (remove common-lisp:nil :type
    (common-lisp:or launch-permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-permission-modifications
                    'make-launch-permission-modifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add))
      (common-lisp:list
       (common-lisp:cons "Add"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove))
      (common-lisp:list
       (common-lisp:cons "Remove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-modifications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-specification-"))
   (user-data common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (addressing-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-list common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or iam-instance-profile-specification common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or instance-network-interface-specification-list
                    common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or spot-placement common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or run-instances-monitoring-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-specification 'make-launch-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addressing-type))
      (common-lisp:list
       (common-lisp:cons "AddressingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-specs-list ()
   '(trivial-types:proper-list spot-fleet-launch-specification))
 (common-lisp:defun |make-launch-specs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            spot-fleet-launch-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype listing-state () 'common-lisp:string)
(common-lisp:deftype listing-status () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (modify-hosts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-hosts-request-"))
   (auto-placement (common-lisp:error ":auto-placement is required") :type
    (common-lisp:or auto-placement common-lisp:null))
   (host-ids (common-lisp:error ":host-ids is required") :type
    (common-lisp:or request-host-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-hosts-request 'make-modify-hosts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-hosts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-hosts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-placement))
      (common-lisp:list
       (common-lisp:cons "AutoPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-ids))
      (common-lisp:list
       (common-lisp:cons "HostIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-hosts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-hosts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-hosts-result-"))
   (successful common-lisp:nil :type
    (common-lisp:or response-host-id-list common-lisp:null))
   (unsuccessful common-lisp:nil :type
    (common-lisp:or unsuccessful-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-hosts-result 'make-modify-hosts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-hosts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-hosts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unsuccessful))
      (common-lisp:list
       (common-lisp:cons "Unsuccessful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-hosts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-id-format-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-id-format-request-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or string common-lisp:null))
   (use-long-ids (common-lisp:error ":use-long-ids is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-id-format-request 'make-modify-id-format-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-id-format-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-id-format-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-long-ids))
      (common-lisp:list
       (common-lisp:cons "UseLongIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-id-format-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-identity-id-format-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-identity-id-format-request-"))
   (principal-arn (common-lisp:error ":principal-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or string common-lisp:null))
   (use-long-ids (common-lisp:error ":use-long-ids is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-identity-id-format-request
                    'make-modify-identity-id-format-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-identity-id-format-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-identity-id-format-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "PrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-long-ids))
      (common-lisp:list
       (common-lisp:cons "UseLongIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-identity-id-format-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-image-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-image-attribute-request-"))
   (attribute common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (launch-permission common-lisp:nil :type
    (common-lisp:or launch-permission-modifications common-lisp:null))
   (operation-type common-lisp:nil :type
    (common-lisp:or operation-type common-lisp:null))
   (product-codes common-lisp:nil :type
    (common-lisp:or product-code-string-list common-lisp:null))
   (user-groups common-lisp:nil :type
    (common-lisp:or user-group-string-list common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-string-list common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-image-attribute-request
                    'make-modify-image-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-image-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-image-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-permission))
      (common-lisp:list
       (common-lisp:cons "LaunchPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-codes))
      (common-lisp:list
       (common-lisp:cons "ProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "UserGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-image-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-instance-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-instance-attribute-request-"))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (attribute common-lisp:nil :type
    (common-lisp:or instance-attribute-name common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mapping-specification-list
                    common-lisp:null))
   (disable-api-termination common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (ena-support common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or group-id-string-list common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (instance-initiated-shutdown-behavior common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (kernel common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (ramdisk common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (sriov-net-support common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or blob-attribute-value common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-instance-attribute-request
                    'make-modify-instance-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-api-termination))
      (common-lisp:list
       (common-lisp:cons "DisableApiTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ena-support))
      (common-lisp:list
       (common-lisp:cons "EnaSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-initiated-shutdown-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInitiatedShutdownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel))
      (common-lisp:list
       (common-lisp:cons "Kernel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk))
      (common-lisp:list
       (common-lisp:cons "Ramdisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sriov-net-support))
      (common-lisp:list
       (common-lisp:cons "SriovNetSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-instance-placement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-instance-placement-request-"))
   (affinity common-lisp:nil :type (common-lisp:or affinity common-lisp:null))
   (host-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null))
   (tenancy common-lisp:nil :type
    (common-lisp:or host-tenancy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-instance-placement-request
                    'make-modify-instance-placement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-placement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-placement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affinity))
      (common-lisp:list
       (common-lisp:cons "Affinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id))
      (common-lisp:list
       (common-lisp:cons "HostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-placement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-instance-placement-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-instance-placement-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-instance-placement-result
                    'make-modify-instance-placement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-placement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-placement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-placement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-network-interface-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-network-interface-attribute-request-"))
   (attachment common-lisp:nil :type
    (common-lisp:or network-interface-attachment-changes common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or security-group-id-string-list common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-network-interface-attribute-request
                    'make-modify-network-interface-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-network-interface-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-network-interface-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-network-interface-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-reserved-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-reserved-instances-request-"))
   (reserved-instances-ids
    (common-lisp:error ":reserved-instances-ids is required") :type
    (common-lisp:or reserved-instances-id-string-list common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-configurations
    (common-lisp:error ":target-configurations is required") :type
    (common-lisp:or reserved-instances-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-reserved-instances-request
                    'make-modify-reserved-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-reserved-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-reserved-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configurations))
      (common-lisp:list
       (common-lisp:cons "TargetConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-reserved-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-reserved-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-reserved-instances-result-"))
   (reserved-instances-modification-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-reserved-instances-result
                    'make-modify-reserved-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-reserved-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-reserved-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-modification-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesModificationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-reserved-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-snapshot-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-snapshot-attribute-request-"))
   (attribute common-lisp:nil :type
    (common-lisp:or snapshot-attribute-name common-lisp:null))
   (create-volume-permission common-lisp:nil :type
    (common-lisp:or create-volume-permission-modifications common-lisp:null))
   (group-names common-lisp:nil :type
    (common-lisp:or group-name-string-list common-lisp:null))
   (operation-type common-lisp:nil :type
    (common-lisp:or operation-type common-lisp:null))
   (snapshot-id (common-lisp:error ":snapshot-id is required") :type
    (common-lisp:or string common-lisp:null))
   (user-ids common-lisp:nil :type
    (common-lisp:or user-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-snapshot-attribute-request
                    'make-modify-snapshot-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-volume-permission))
      (common-lisp:list
       (common-lisp:cons "CreateVolumePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-names))
      (common-lisp:list
       (common-lisp:cons "GroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "OperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "UserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-snapshot-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-spot-fleet-request-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-spot-fleet-request-request-"))
   (excess-capacity-termination-policy common-lisp:nil :type
    (common-lisp:or excess-capacity-termination-policy common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null))
   (target-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-spot-fleet-request-request
                    'make-modify-spot-fleet-request-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-spot-fleet-request-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-spot-fleet-request-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excess-capacity-termination-policy))
      (common-lisp:list
       (common-lisp:cons "ExcessCapacityTerminationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-spot-fleet-request-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-spot-fleet-request-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-spot-fleet-request-response-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-spot-fleet-request-response
                    'make-modify-spot-fleet-request-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-spot-fleet-request-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-spot-fleet-request-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-spot-fleet-request-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-subnet-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-subnet-attribute-request-"))
   (assign-ipv6address-on-creation common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (map-public-ip-on-launch common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-subnet-attribute-request
                    'make-modify-subnet-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-subnet-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-subnet-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assign-ipv6address-on-creation))
      (common-lisp:list
       (common-lisp:cons "AssignIpv6AddressOnCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-public-ip-on-launch))
      (common-lisp:list
       (common-lisp:cons "MapPublicIpOnLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-subnet-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-volume-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-volume-attribute-request-"))
   (auto-enable-io common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-volume-attribute-request
                    'make-modify-volume-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-volume-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-volume-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable-io))
      (common-lisp:list
       (common-lisp:cons "AutoEnableIO"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-volume-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-volume-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-volume-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (volume-id (common-lisp:error ":volume-id is required") :type
    (common-lisp:or string common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-volume-request 'make-modify-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-volume-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-volume-result-"))
   (volume-modification common-lisp:nil :type
    (common-lisp:or volume-modification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-volume-result 'make-modify-volume-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-volume-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-volume-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-modification))
      (common-lisp:list
       (common-lisp:cons "VolumeModification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-volume-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-vpc-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-vpc-attribute-request-"))
   (enable-dns-hostnames common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (enable-dns-support common-lisp:nil :type
    (common-lisp:or attribute-boolean-value common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-vpc-attribute-request
                    'make-modify-vpc-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-dns-hostnames))
      (common-lisp:list
       (common-lisp:cons "EnableDnsHostnames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-dns-support))
      (common-lisp:list
       (common-lisp:cons "EnableDnsSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-vpc-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-vpc-endpoint-request-"))
   (add-route-table-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (remove-route-table-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (reset-policy common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-endpoint-id (common-lisp:error ":vpc-endpoint-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-vpc-endpoint-request
                    'make-modify-vpc-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-route-table-ids))
      (common-lisp:list
       (common-lisp:cons "AddRouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RemoveRouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reset-policy))
      (common-lisp:list
       (common-lisp:cons "ResetPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-vpc-endpoint-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-vpc-endpoint-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-vpc-endpoint-result
                    'make-modify-vpc-endpoint-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-endpoint-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-endpoint-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-endpoint-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-vpc-peering-connection-options-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-modify-vpc-peering-connection-options-request-"))
   (accepter-peering-connection-options common-lisp:nil :type
    (common-lisp:or peering-connection-options-request common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (requester-peering-connection-options common-lisp:nil :type
    (common-lisp:or peering-connection-options-request common-lisp:null))
   (vpc-peering-connection-id
    (common-lisp:error ":vpc-peering-connection-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-vpc-peering-connection-options-request
                    'make-modify-vpc-peering-connection-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-peering-connection-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-peering-connection-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepter-peering-connection-options))
      (common-lisp:list
       (common-lisp:cons "AccepterPeeringConnectionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-peering-connection-options))
      (common-lisp:list
       (common-lisp:cons "RequesterPeeringConnectionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-peering-connection-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-vpc-peering-connection-options-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-modify-vpc-peering-connection-options-result-"))
   (accepter-peering-connection-options common-lisp:nil :type
    (common-lisp:or peering-connection-options common-lisp:null))
   (requester-peering-connection-options common-lisp:nil :type
    (common-lisp:or peering-connection-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-vpc-peering-connection-options-result
                    'make-modify-vpc-peering-connection-options-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-peering-connection-options-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-peering-connection-options-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepter-peering-connection-options))
      (common-lisp:list
       (common-lisp:cons "AccepterPeeringConnectionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-peering-connection-options))
      (common-lisp:list
       (common-lisp:cons "RequesterPeeringConnectionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-vpc-peering-connection-options-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitor-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitor-instances-request-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitor-instances-request
                    'make-monitor-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitor-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitor-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitor-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitor-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitor-instances-result-"))
   (instance-monitorings common-lisp:nil :type
    (common-lisp:or instance-monitoring-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitor-instances-result 'make-monitor-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitor-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitor-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-monitorings))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitorings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitor-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-"))
   (state common-lisp:nil :type
    (common-lisp:or monitoring-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'monitoring 'make-monitoring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitoring))
   common-lisp:nil))
(common-lisp:deftype monitoring-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (move-address-to-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-move-address-to-vpc-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (public-ip (common-lisp:error ":public-ip is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'move-address-to-vpc-request
                    'make-move-address-to-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          move-address-to-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          move-address-to-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          move-address-to-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (move-address-to-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-move-address-to-vpc-result-"))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'move-address-to-vpc-result
                    'make-move-address-to-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          move-address-to-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          move-address-to-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          move-address-to-vpc-result))
   common-lisp:nil))
(common-lisp:deftype move-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (moving-address-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-moving-address-status-"))
   (move-status common-lisp:nil :type
    (common-lisp:or move-status common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'moving-address-status 'make-moving-address-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          moving-address-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          moving-address-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'move-status))
      (common-lisp:list
       (common-lisp:cons "MoveStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          moving-address-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype moving-address-status-set ()
   '(trivial-types:proper-list moving-address-status))
 (common-lisp:defun |make-moving-address-status-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list moving-address-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (nat-gateway (:copier common-lisp:nil)
      (:conc-name "struct-shape-nat-gateway-"))
   (create-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (delete-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (failure-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nat-gateway-addresses common-lisp:nil :type
    (common-lisp:or nat-gateway-address-list common-lisp:null))
   (nat-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (provisioned-bandwidth common-lisp:nil :type
    (common-lisp:or provisioned-bandwidth common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or nat-gateway-state common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'nat-gateway 'make-nat-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nat-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nat-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-time))
      (common-lisp:list
       (common-lisp:cons "DeleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nat-gateway-addresses))
      (common-lisp:list
       (common-lisp:cons "NatGatewayAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-bandwidth))
      (common-lisp:list
       (common-lisp:cons "ProvisionedBandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nat-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nat-gateway-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-nat-gateway-address-"))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nat-gateway-address 'make-nat-gateway-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nat-gateway-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nat-gateway-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip))
      (common-lisp:list
       (common-lisp:cons "PrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nat-gateway-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype nat-gateway-address-list ()
   '(trivial-types:proper-list nat-gateway-address))
 (common-lisp:defun |make-nat-gateway-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list nat-gateway-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype nat-gateway-list ()
   '(trivial-types:proper-list nat-gateway))
 (common-lisp:defun |make-nat-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list nat-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype nat-gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-acl (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-acl-"))
   (associations common-lisp:nil :type
    (common-lisp:or network-acl-association-list common-lisp:null))
   (entries common-lisp:nil :type
    (common-lisp:or network-acl-entry-list common-lisp:null))
   (is-default common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-acl-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-acl 'make-network-acl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-acl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-acl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-acl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-acl-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-acl-association-"))
   (network-acl-association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-acl-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-acl-association 'make-network-acl-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-acl-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-acl-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-acl-association-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-acl-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-acl-association-list ()
   '(trivial-types:proper-list network-acl-association))
 (common-lisp:defun |make-network-acl-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-acl-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-acl-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-acl-entry-"))
   (cidr-block common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (egress common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (icmp-type-code common-lisp:nil :type
    (common-lisp:or icmp-type-code common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port-range common-lisp:nil :type
    (common-lisp:or port-range common-lisp:null))
   (protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (rule-action common-lisp:nil :type
    (common-lisp:or rule-action common-lisp:null))
   (rule-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-acl-entry 'make-network-acl-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-acl-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-acl-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icmp-type-code))
      (common-lisp:list
       (common-lisp:cons "IcmpTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "PortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-action))
      (common-lisp:list
       (common-lisp:cons "RuleAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "RuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-acl-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-acl-entry-list ()
   '(trivial-types:proper-list network-acl-entry))
 (common-lisp:defun |make-network-acl-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-acl-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-acl-list ()
   '(trivial-types:proper-list network-acl))
 (common-lisp:defun |make-network-acl-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-acl))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-"))
   (association common-lisp:nil :type
    (common-lisp:or network-interface-association common-lisp:null))
   (attachment common-lisp:nil :type
    (common-lisp:or network-interface-attachment common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (interface-type common-lisp:nil :type
    (common-lisp:or network-interface-type common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or network-interface-ipv6addresses-list common-lisp:null))
   (mac-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or network-interface-private-ip-address-list
                    common-lisp:null))
   (requester-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (requester-managed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or network-interface-status common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tag-set common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "Association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-type))
      (common-lisp:list
       (common-lisp:cons "InterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-id))
      (common-lisp:list
       (common-lisp:cons "RequesterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-managed))
      (common-lisp:list
       (common-lisp:cons "RequesterManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-association-"))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ip-owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (public-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-association
                    'make-network-interface-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-owner-id))
      (common-lisp:list
       (common-lisp:cons "IpOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-attachment-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (attachment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (device-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-attachment
                    'make-network-interface-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-owner-id))
      (common-lisp:list
       (common-lisp:cons "InstanceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-attachment-changes (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-attachment-changes-"))
   (attachment-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-attachment-changes
                    'make-network-interface-attachment-changes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-attachment-changes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-attachment-changes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-attachment-changes))
   common-lisp:nil))
(common-lisp:deftype network-interface-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-interface-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-network-interface-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-ipv6address (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-ipv6address-"))
   (ipv6address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-ipv6address
                    'make-network-interface-ipv6address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-ipv6address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-ipv6address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "Ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-ipv6address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interface-ipv6addresses-list ()
   '(trivial-types:proper-list network-interface-ipv6address))
 (common-lisp:defun |make-network-interface-ipv6addresses-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-interface-ipv6address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-interface-list ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun |make-network-interface-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-permission-"))
   (network-interface-permission-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (aws-service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (permission common-lisp:nil :type
    (common-lisp:or interface-permission-type common-lisp:null))
   (permission-state common-lisp:nil :type
    (common-lisp:or network-interface-permission-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-permission
                    'make-network-interface-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-permission-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfacePermissionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-service))
      (common-lisp:list
       (common-lisp:cons "AwsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-state))
      (common-lisp:list
       (common-lisp:cons "PermissionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interface-permission-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-network-interface-permission-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-interface-permission-list ()
   '(trivial-types:proper-list network-interface-permission))
 (common-lisp:defun |make-network-interface-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-interface-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-permission-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-permission-state-"))
   (state common-lisp:nil :type
    (common-lisp:or network-interface-permission-state-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-permission-state
                    'make-network-interface-permission-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-permission-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-permission-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-permission-state))
   common-lisp:nil))
(common-lisp:deftype network-interface-permission-state-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface-private-ip-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-private-ip-address-"))
   (association common-lisp:nil :type
    (common-lisp:or network-interface-association common-lisp:null))
   (primary common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface-private-ip-address
                    'make-network-interface-private-ip-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-private-ip-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-private-ip-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "Association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-interface-private-ip-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interface-private-ip-address-list ()
   '(trivial-types:proper-list network-interface-private-ip-address))
 (common-lisp:defun |make-network-interface-private-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-interface-private-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-interface-status () 'common-lisp:string)
(common-lisp:deftype network-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (new-dhcp-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-dhcp-configuration-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-dhcp-configuration 'make-new-dhcp-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-dhcp-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-dhcp-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-dhcp-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype new-dhcp-configuration-list ()
   '(trivial-types:proper-list new-dhcp-configuration))
 (common-lisp:defun |make-new-dhcp-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list new-dhcp-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype occurrence-day-request-set ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-occurrence-day-request-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype occurrence-day-set ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-occurrence-day-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offering-class-type () 'common-lisp:string)
(common-lisp:deftype offering-type-values () 'common-lisp:string)
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype owner-string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-owner-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype payment-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pci-id (:copier common-lisp:nil) (:conc-name "struct-shape-pci-id-"))
   (device-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vendor-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subsystem-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subsystem-vendor-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pci-id 'make-pci-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pci-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pci-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-id))
      (common-lisp:list
       (common-lisp:cons "VendorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subsystem-id))
      (common-lisp:list
       (common-lisp:cons "SubsystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subsystem-vendor-id))
      (common-lisp:list
       (common-lisp:cons "SubsystemVendorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pci-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (peering-connection-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-peering-connection-options-"))
   (allow-dns-resolution-from-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-classic-link-to-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-vpc-to-remote-classic-link common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'peering-connection-options
                    'make-peering-connection-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          peering-connection-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          peering-connection-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-dns-resolution-from-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowDnsResolutionFromRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-classic-link-to-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalClassicLinkToRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-vpc-to-remote-classic-link))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalVpcToRemoteClassicLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          peering-connection-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (peering-connection-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-peering-connection-options-request-"))
   (allow-dns-resolution-from-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-classic-link-to-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-vpc-to-remote-classic-link common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'peering-connection-options-request
                    'make-peering-connection-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          peering-connection-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          peering-connection-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-dns-resolution-from-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowDnsResolutionFromRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-classic-link-to-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalClassicLinkToRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-vpc-to-remote-classic-link))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalVpcToRemoteClassicLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          peering-connection-options-request))
   common-lisp:nil))
(common-lisp:deftype permission-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (placement (:copier common-lisp:nil)
      (:conc-name "struct-shape-placement-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (affinity common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (host-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tenancy common-lisp:nil :type (common-lisp:or tenancy common-lisp:null))
   (spread-domain common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'placement 'make-placement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affinity))
      (common-lisp:list
       (common-lisp:cons "Affinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id))
      (common-lisp:list
       (common-lisp:cons "HostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spread-domain))
      (common-lisp:list
       (common-lisp:cons "SpreadDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (placement-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-placement-group-"))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or placement-group-state common-lisp:null))
   (strategy common-lisp:nil :type
    (common-lisp:or placement-strategy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'placement-group 'make-placement-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "Strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype placement-group-list ()
   '(trivial-types:proper-list placement-group))
 (common-lisp:defun |make-placement-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype placement-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype placement-group-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-placement-group-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype placement-strategy () 'common-lisp:string)
(common-lisp:deftype platform-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (port-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-range-"))
   (from common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (prefix-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-prefix-list-"))
   (cidrs common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (prefix-list-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (prefix-list-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prefix-list 'make-prefix-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prefix-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prefix-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-name))
      (common-lisp:list
       (common-lisp:cons "PrefixListName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prefix-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (prefix-list-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-prefix-list-id-"))
   (prefix-list-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prefix-list-id 'make-prefix-list-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prefix-list-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prefix-list-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prefix-list-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prefix-list-id-list ()
   '(trivial-types:proper-list prefix-list-id))
 (common-lisp:defun |make-prefix-list-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prefix-list-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype prefix-list-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-prefix-list-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype prefix-list-set ()
   '(trivial-types:proper-list prefix-list))
 (common-lisp:defun |make-prefix-list-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list prefix-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (price-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-price-schedule-"))
   (active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'price-schedule 'make-price-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input price-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input price-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "Price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "Term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input price-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype price-schedule-list ()
   '(trivial-types:proper-list price-schedule))
 (common-lisp:defun |make-price-schedule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list price-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (price-schedule-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-price-schedule-specification-"))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'price-schedule-specification
                    'make-price-schedule-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          price-schedule-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          price-schedule-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "Price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "Term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          price-schedule-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype price-schedule-specification-list ()
   '(trivial-types:proper-list price-schedule-specification))
 (common-lisp:defun |make-price-schedule-specification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            price-schedule-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pricing-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-pricing-detail-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (price common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pricing-detail 'make-pricing-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pricing-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pricing-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "Price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pricing-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pricing-details-list ()
   '(trivial-types:proper-list pricing-detail))
 (common-lisp:defun |make-pricing-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pricing-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype private-ip-address-config-set ()
   '(trivial-types:proper-list scheduled-instances-private-ip-address-config))
 (common-lisp:defun |make-private-ip-address-config-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-instances-private-ip-address-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (private-ip-address-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-ip-address-specification-"))
   (primary common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (private-ip-address (common-lisp:error ":private-ip-address is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-ip-address-specification
                    'make-private-ip-address-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-ip-address-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-ip-address-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-ip-address-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype private-ip-address-specification-list ()
   '(trivial-types:proper-list private-ip-address-specification))
 (common-lisp:defun |make-private-ip-address-specification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            private-ip-address-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype private-ip-address-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-private-ip-address-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (product-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-product-code-"))
   (product-code-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-code-type common-lisp:nil :type
    (common-lisp:or product-code-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'product-code 'make-product-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code-id))
      (common-lisp:list
       (common-lisp:cons "ProductCodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code-type))
      (common-lisp:list
       (common-lisp:cons "ProductCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-code-list ()
   '(trivial-types:proper-list product-code))
 (common-lisp:defun |make-product-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype product-code-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-product-code-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype product-code-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype product-description-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-product-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (propagating-vgw (:copier common-lisp:nil)
      (:conc-name "struct-shape-propagating-vgw-"))
   (gateway-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'propagating-vgw 'make-propagating-vgw))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input propagating-vgw))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input propagating-vgw))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input propagating-vgw))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype propagating-vgw-list ()
   '(trivial-types:proper-list propagating-vgw))
 (common-lisp:defun |make-propagating-vgw-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list propagating-vgw))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-bandwidth (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-bandwidth-"))
   (provision-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (provisioned common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (request-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (requested common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-bandwidth 'make-provisioned-bandwidth))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-bandwidth))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-bandwidth))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provision-time))
      (common-lisp:list
       (common-lisp:cons "ProvisionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned))
      (common-lisp:list
       (common-lisp:cons "Provisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "RequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested))
      (common-lisp:list
       (common-lisp:cons "Requested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-bandwidth))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-ip-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-public-ip-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase (:copier common-lisp:nil) (:conc-name "struct-shape-purchase-"))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (host-id-set common-lisp:nil :type
    (common-lisp:or response-host-id-set common-lisp:null))
   (host-reservation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (upfront-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'purchase 'make-purchase))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input purchase))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input purchase))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id-set))
      (common-lisp:list
       (common-lisp:cons "HostIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-reservation-id))
      (common-lisp:list
       (common-lisp:cons "HostReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-price))
      (common-lisp:list
       (common-lisp:cons "HourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-price))
      (common-lisp:list
       (common-lisp:cons "UpfrontPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input purchase))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-host-reservation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-host-reservation-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (host-id-set (common-lisp:error ":host-id-set is required") :type
    (common-lisp:or request-host-id-set common-lisp:null))
   (limit-price common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (offering-id (common-lisp:error ":offering-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-host-reservation-request
                    'make-purchase-host-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-host-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-host-reservation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id-set))
      (common-lisp:list
       (common-lisp:cons "HostIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-price))
      (common-lisp:list
       (common-lisp:cons "LimitPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-host-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-host-reservation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-host-reservation-result-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (purchase common-lisp:nil :type
    (common-lisp:or purchase-set common-lisp:null))
   (total-hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-upfront-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-host-reservation-result
                    'make-purchase-host-reservation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-host-reservation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-host-reservation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchase))
      (common-lisp:list
       (common-lisp:cons "Purchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-hourly-price))
      (common-lisp:list
       (common-lisp:cons "TotalHourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-upfront-price))
      (common-lisp:list
       (common-lisp:cons "TotalUpfrontPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-host-reservation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-request-"))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (purchase-token (common-lisp:error ":purchase-token is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-request 'make-purchase-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input purchase-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input purchase-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchase-token))
      (common-lisp:list
       (common-lisp:cons "PurchaseToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input purchase-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype purchase-request-set ()
   '(trivial-types:proper-list purchase-request))
 (common-lisp:defun |make-purchase-request-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list purchase-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-instances-offering-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-purchase-reserved-instances-offering-request-"))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (reserved-instances-offering-id
    (common-lisp:error ":reserved-instances-offering-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (limit-price common-lisp:nil :type
    (common-lisp:or reserved-instance-limit-price common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-instances-offering-request
                    'make-purchase-reserved-instances-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instances-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instances-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-price))
      (common-lisp:list
       (common-lisp:cons "LimitPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instances-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-instances-offering-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-reserved-instances-offering-result-"))
   (reserved-instances-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-instances-offering-result
                    'make-purchase-reserved-instances-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instances-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instances-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instances-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-scheduled-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-scheduled-instances-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (purchase-requests (common-lisp:error ":purchase-requests is required")
    :type (common-lisp:or purchase-request-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-scheduled-instances-request
                    'make-purchase-scheduled-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-scheduled-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-scheduled-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchase-requests))
      (common-lisp:list
       (common-lisp:cons "PurchaseRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-scheduled-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-scheduled-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-scheduled-instances-result-"))
   (scheduled-instance-set common-lisp:nil :type
    (common-lisp:or purchased-scheduled-instance-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-scheduled-instances-result
                    'make-purchase-scheduled-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-scheduled-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-scheduled-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-instance-set))
      (common-lisp:list
       (common-lisp:cons "ScheduledInstanceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-scheduled-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype purchase-set () '(trivial-types:proper-list purchase))
 (common-lisp:defun |make-purchase-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list purchase))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype purchased-scheduled-instance-set ()
   '(trivial-types:proper-list scheduled-instance))
 (common-lisp:defun |make-purchased-scheduled-instance-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype riproduct-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reason-codes-list ()
   '(trivial-types:proper-list report-instance-reason-codes))
 (common-lisp:defun |make-reason-codes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            report-instance-reason-codes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-instances-request-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-instances-request 'make-reboot-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recurring-charge (:copier common-lisp:nil)
      (:conc-name "struct-shape-recurring-charge-"))
   (amount common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (frequency common-lisp:nil :type
    (common-lisp:or recurring-charge-frequency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:deftype recurring-charge-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recurring-charges-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun |make-recurring-charges-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (region (:copier common-lisp:nil) (:conc-name "struct-shape-region-"))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (region-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype region-name-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-region-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (register-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-image-request-"))
   (image-location common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or architecture-values common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-request-list common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ena-support common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (billing-products common-lisp:nil :type
    (common-lisp:or billing-product-list common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (root-device-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sriov-net-support common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (virtualization-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-image-request 'make-register-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-location))
      (common-lisp:list
       (common-lisp:cons "ImageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ena-support))
      (common-lisp:list
       (common-lisp:cons "EnaSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-products))
      (common-lisp:list
       (common-lisp:cons "BillingProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-name))
      (common-lisp:list
       (common-lisp:cons "RootDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sriov-net-support))
      (common-lisp:list
       (common-lisp:cons "SriovNetSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-image-result-"))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-image-result 'make-register-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-vpc-peering-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-vpc-peering-connection-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (vpc-peering-connection-id
    (common-lisp:error ":vpc-peering-connection-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-vpc-peering-connection-request
                    'make-reject-vpc-peering-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-vpc-peering-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-vpc-peering-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-vpc-peering-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-vpc-peering-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-vpc-peering-connection-result-"))
   (return common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-vpc-peering-connection-result
                    'make-reject-vpc-peering-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-vpc-peering-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-vpc-peering-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return))
      (common-lisp:list
       (common-lisp:cons "Return"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-vpc-peering-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-address-request-"))
   (allocation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-address-request 'make-release-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-hosts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-hosts-request-"))
   (host-ids (common-lisp:error ":host-ids is required") :type
    (common-lisp:or request-host-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-hosts-request 'make-release-hosts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-hosts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-hosts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-ids))
      (common-lisp:list
       (common-lisp:cons "HostIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-hosts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-hosts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-hosts-result-"))
   (successful common-lisp:nil :type
    (common-lisp:or response-host-id-list common-lisp:null))
   (unsuccessful common-lisp:nil :type
    (common-lisp:or unsuccessful-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-hosts-result 'make-release-hosts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input release-hosts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input release-hosts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unsuccessful))
      (common-lisp:list
       (common-lisp:cons "Unsuccessful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input release-hosts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-iam-instance-profile-association-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-replace-iam-instance-profile-association-request-"))
   (iam-instance-profile
    (common-lisp:error ":iam-instance-profile is required") :type
    (common-lisp:or iam-instance-profile-specification common-lisp:null))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-iam-instance-profile-association-request
                    'make-replace-iam-instance-profile-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-iam-instance-profile-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-iam-instance-profile-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-iam-instance-profile-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-iam-instance-profile-association-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-replace-iam-instance-profile-association-result-"))
   (iam-instance-profile-association common-lisp:nil :type
    (common-lisp:or iam-instance-profile-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-iam-instance-profile-association-result
                    'make-replace-iam-instance-profile-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-iam-instance-profile-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-iam-instance-profile-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-association))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfileAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-iam-instance-profile-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-network-acl-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-network-acl-association-request-"))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-acl-id (common-lisp:error ":network-acl-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-network-acl-association-request
                    'make-replace-network-acl-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-network-acl-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-network-acl-association-result-"))
   (new-association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-network-acl-association-result
                    'make-replace-network-acl-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-association-id))
      (common-lisp:list
       (common-lisp:cons "NewAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-network-acl-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-network-acl-entry-request-"))
   (cidr-block common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress (common-lisp:error ":egress is required") :type
    (common-lisp:or boolean common-lisp:null))
   (icmp-type-code common-lisp:nil :type
    (common-lisp:or icmp-type-code common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-acl-id (common-lisp:error ":network-acl-id is required") :type
    (common-lisp:or string common-lisp:null))
   (port-range common-lisp:nil :type
    (common-lisp:or port-range common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or string common-lisp:null))
   (rule-action (common-lisp:error ":rule-action is required") :type
    (common-lisp:or rule-action common-lisp:null))
   (rule-number (common-lisp:error ":rule-number is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-network-acl-entry-request
                    'make-replace-network-acl-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icmp-type-code))
      (common-lisp:list
       (common-lisp:cons "IcmpTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "PortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-action))
      (common-lisp:list
       (common-lisp:cons "RuleAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "RuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-network-acl-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-route-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-route-request-"))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (egress-only-internet-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (gateway-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (nat-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-route-request 'make-replace-route-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-route-table-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-route-table-association-request-"))
   (association-id (common-lisp:error ":association-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-id (common-lisp:error ":route-table-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-route-table-association-request
                    'make-replace-route-table-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-table-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-table-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-table-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replace-route-table-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-replace-route-table-association-result-"))
   (new-association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-route-table-association-result
                    'make-replace-route-table-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-table-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-table-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-association-id))
      (common-lisp:list
       (common-lisp:cons "NewAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replace-route-table-association-result))
   common-lisp:nil))
(common-lisp:deftype report-instance-reason-codes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (report-instance-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-report-instance-status-request-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (instances (common-lisp:error ":instances is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (reason-codes (common-lisp:error ":reason-codes is required") :type
    (common-lisp:or reason-codes-list common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or report-status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-instance-status-request
                    'make-report-instance-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          report-instance-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          report-instance-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-codes))
      (common-lisp:list
       (common-lisp:cons "ReasonCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          report-instance-status-request))
   common-lisp:nil))
(common-lisp:deftype report-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype request-host-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-request-host-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype request-host-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-request-host-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (request-spot-fleet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-spot-fleet-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (spot-fleet-request-config
    (common-lisp:error ":spot-fleet-request-config is required") :type
    (common-lisp:or spot-fleet-request-config-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-spot-fleet-request
                    'make-request-spot-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-config))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-spot-fleet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-spot-fleet-response-"))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-spot-fleet-response
                    'make-request-spot-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-spot-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-spot-instances-request-"))
   (availability-zone-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (block-duration-minutes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (launch-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (launch-specification common-lisp:nil :type
    (common-lisp:or request-spot-launch-specification common-lisp:null))
   (spot-price (common-lisp:error ":spot-price is required") :type
    (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or spot-instance-type common-lisp:null))
   (valid-from common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-spot-instances-request
                    'make-request-spot-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-group))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "BlockDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-group))
      (common-lisp:list
       (common-lisp:cons "LaunchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from))
      (common-lisp:list
       (common-lisp:cons "ValidFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-spot-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-spot-instances-result-"))
   (spot-instance-requests common-lisp:nil :type
    (common-lisp:or spot-instance-request-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-spot-instances-result
                    'make-request-spot-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-requests))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-spot-launch-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-spot-launch-specification-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (addressing-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-list common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or iam-instance-profile-specification common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or run-instances-monitoring-enabled common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or instance-network-interface-specification-list
                    common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or spot-placement common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-data common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-spot-launch-specification
                    'make-request-spot-launch-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-launch-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-launch-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addressing-type))
      (common-lisp:list
       (common-lisp:cons "AddressingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-spot-launch-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-"))
   (groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instance-list common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (requester-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reservation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reservation 'make-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-id))
      (common-lisp:list
       (common-lisp:cons "RequesterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-list ()
   '(trivial-types:proper-list reservation))
 (common-lisp:defun |make-reservation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reservation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reservation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-value-"))
   (hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (remaining-total-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (remaining-upfront-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-value 'make-reservation-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-price))
      (common-lisp:list
       (common-lisp:cons "HourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remaining-total-value))
      (common-lisp:list
       (common-lisp:cons "RemainingTotalValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remaining-upfront-value))
      (common-lisp:list
       (common-lisp:cons "RemainingUpfrontValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instance-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-reserved-instance-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instance-limit-price (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instance-limit-price-"))
   (amount common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instance-limit-price
                    'make-reserved-instance-limit-price))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-limit-price))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-limit-price))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-limit-price))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instance-reservation-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instance-reservation-value-"))
   (reservation-value common-lisp:nil :type
    (common-lisp:or reservation-value common-lisp:null))
   (reserved-instance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instance-reservation-value
                    'make-reserved-instance-reservation-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-reservation-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-reservation-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-value))
      (common-lisp:list
       (common-lisp:cons "ReservationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-reservation-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instance-reservation-value-set ()
   '(trivial-types:proper-list reserved-instance-reservation-value))
 (common-lisp:defun |make-reserved-instance-reservation-value-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instance-reservation-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or riproduct-description common-lisp:null))
   (reserved-instances-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or reserved-instance-state common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (instance-tenancy common-lisp:nil :type
    (common-lisp:or tenancy common-lisp:null))
   (offering-class common-lisp:nil :type
    (common-lisp:or offering-class-type common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type-values common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charges-list common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or |scope| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances 'make-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tenancy))
      (common-lisp:list
       (common-lisp:cons "InstanceTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "OfferingClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-configuration-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or |scope| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-configuration
                    'make-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-configuration-list ()
   '(trivial-types:proper-list reserved-instances-configuration))
 (common-lisp:defun |make-reserved-instances-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instances-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-id-"))
   (reserved-instances-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-id 'make-reserved-instances-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-reserved-instances-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-list ()
   '(trivial-types:proper-list reserved-instances))
 (common-lisp:defun |make-reserved-instances-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-instances))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-listing (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-listing-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (instance-counts common-lisp:nil :type
    (common-lisp:or instance-count-list common-lisp:null))
   (price-schedules common-lisp:nil :type
    (common-lisp:or price-schedule-list common-lisp:null))
   (reserved-instances-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-instances-listing-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or listing-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-listing
                    'make-reserved-instances-listing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-listing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-listing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-counts))
      (common-lisp:list
       (common-lisp:cons "InstanceCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-schedules))
      (common-lisp:list
       (common-lisp:cons "PriceSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-listing-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesListingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-listing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-listing-list ()
   '(trivial-types:proper-list reserved-instances-listing))
 (common-lisp:defun |make-reserved-instances-listing-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instances-listing))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-modification (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-modification-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (effective-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (modification-results common-lisp:nil :type
    (common-lisp:or reserved-instances-modification-result-list
                    common-lisp:null))
   (reserved-instances-ids common-lisp:nil :type
    (common-lisp:or reserved-intances-ids common-lisp:null))
   (reserved-instances-modification-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-modification
                    'make-reserved-instances-modification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-modification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-modification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "EffectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modification-results))
      (common-lisp:list
       (common-lisp:cons "ModificationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-ids))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-modification-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesModificationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-modification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-modification-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-reserved-instances-modification-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-modification-list ()
   '(trivial-types:proper-list reserved-instances-modification))
 (common-lisp:defun |make-reserved-instances-modification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instances-modification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-modification-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-modification-result-"))
   (reserved-instances-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-configuration common-lisp:nil :type
    (common-lisp:or reserved-instances-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-modification-result
                    'make-reserved-instances-modification-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-modification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-modification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-modification-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-modification-result-list ()
   '(trivial-types:proper-list reserved-instances-modification-result))
 (common-lisp:defun |make-reserved-instances-modification-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instances-modification-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-offering (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-offering-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or riproduct-description common-lisp:null))
   (reserved-instances-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or currency-code-values common-lisp:null))
   (instance-tenancy common-lisp:nil :type
    (common-lisp:or tenancy common-lisp:null))
   (marketplace common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (offering-class common-lisp:nil :type
    (common-lisp:or offering-class-type common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type-values common-lisp:null))
   (pricing-details common-lisp:nil :type
    (common-lisp:or pricing-details-list common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charges-list common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or |scope| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-offering
                    'make-reserved-instances-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tenancy))
      (common-lisp:list
       (common-lisp:cons "InstanceTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketplace))
      (common-lisp:list
       (common-lisp:cons "Marketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "OfferingClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-details))
      (common-lisp:list
       (common-lisp:cons "PricingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-offering-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-reserved-instances-offering-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reserved-instances-offering-list ()
   '(trivial-types:proper-list reserved-instances-offering))
 (common-lisp:defun |make-reserved-instances-offering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instances-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype reserved-intances-ids ()
   '(trivial-types:proper-list reserved-instances-id))
 (common-lisp:defun |make-reserved-intances-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-instances-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reset-image-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-image-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-image-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or reset-image-attribute-name common-lisp:null))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-image-attribute-request
                    'make-reset-image-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-image-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-image-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-image-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-instance-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-instance-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or instance-attribute-name common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-instance-attribute-request
                    'make-reset-instance-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-instance-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-instance-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-instance-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-network-interface-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-network-interface-attribute-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-network-interface-attribute-request
                    'make-reset-network-interface-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-network-interface-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-network-interface-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-network-interface-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-snapshot-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-snapshot-attribute-request-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or snapshot-attribute-name common-lisp:null))
   (snapshot-id (common-lisp:error ":snapshot-id is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-snapshot-attribute-request
                    'make-reset-snapshot-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-snapshot-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-snapshot-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-snapshot-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype response-host-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-response-host-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype response-host-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-response-host-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype restorable-by-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-restorable-by-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-address-to-classic-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-address-to-classic-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (public-ip (common-lisp:error ":public-ip is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-address-to-classic-request
                    'make-restore-address-to-classic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-address-to-classic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-address-to-classic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-address-to-classic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-address-to-classic-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-address-to-classic-result-"))
   (public-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-address-to-classic-result
                    'make-restore-address-to-classic-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-address-to-classic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-address-to-classic-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-address-to-classic-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-security-group-egress-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-security-group-egress-request-"))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (ip-permissions common-lisp:nil :type
    (common-lisp:or ip-permission-list common-lisp:null))
   (cidr-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (ip-protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (source-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-security-group-egress-request
                    'make-revoke-security-group-egress-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-security-group-egress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-security-group-egress-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-name))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-security-group-egress-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-security-group-ingress-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-security-group-ingress-request-"))
   (cidr-ip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-permissions common-lisp:nil :type
    (common-lisp:or ip-permission-list common-lisp:null))
   (ip-protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-security-group-ingress-request
                    'make-revoke-security-group-ingress-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-security-group-ingress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-security-group-ingress-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-name))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-security-group-ingress-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (route (:copier common-lisp:nil) (:conc-name "struct-shape-route-"))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (destination-prefix-list-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (egress-only-internet-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (gateway-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nat-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (origin common-lisp:nil :type
    (common-lisp:or route-origin common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or route-state common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route 'make-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-owner-id))
      (common-lisp:list
       (common-lisp:cons "InstanceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-list () '(trivial-types:proper-list route))
 (common-lisp:defun |make-route-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route))
   aws-sdk/generator/shape::members))
(common-lisp:deftype route-origin () 'common-lisp:string)
(common-lisp:deftype route-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (route-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-table-"))
   (associations common-lisp:nil :type
    (common-lisp:or route-table-association-list common-lisp:null))
   (propagating-vgws common-lisp:nil :type
    (common-lisp:or propagating-vgw-list common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (routes common-lisp:nil :type (common-lisp:or route-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route-table 'make-route-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagating-vgws))
      (common-lisp:list
       (common-lisp:cons "PropagatingVgws"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "Routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (route-table-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-table-association-"))
   (main common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-table-association 'make-route-table-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-table-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-table-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main))
      (common-lisp:list
       (common-lisp:cons "Main"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-table-association-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-table-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-table-association-list ()
   '(trivial-types:proper-list route-table-association))
 (common-lisp:defun |make-route-table-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-table-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype route-table-list ()
   '(trivial-types:proper-list route-table))
 (common-lisp:defun |make-route-table-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (run-instances-monitoring-enabled (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-instances-monitoring-enabled-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-instances-monitoring-enabled
                    'make-run-instances-monitoring-enabled))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-instances-monitoring-enabled))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-instances-monitoring-enabled))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-instances-monitoring-enabled))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-instances-request-"))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-request-list common-lisp:null))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (ipv6address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or instance-ipv6address-list common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-count (common-lisp:error ":max-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (min-count (common-lisp:error ":min-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or run-instances-monitoring-enabled common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or placement common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-id-string-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-string-list common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-data common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (disable-api-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or iam-instance-profile-specification common-lisp:null))
   (instance-initiated-shutdown-behavior common-lisp:nil :type
    (common-lisp:or shutdown-behavior common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or instance-network-interface-specification-list
                    common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (elastic-gpu-specification common-lisp:nil :type
    (common-lisp:or elastic-gpu-specifications common-lisp:null))
   (tag-specifications common-lisp:nil :type
    (common-lisp:or tag-specification-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-instances-request 'make-run-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-count))
      (common-lisp:list
       (common-lisp:cons "MinCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-api-termination))
      (common-lisp:list
       (common-lisp:cons "DisableApiTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-initiated-shutdown-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInitiatedShutdownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-specification))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-specifications))
      (common-lisp:list
       (common-lisp:cons "TagSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-scheduled-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-scheduled-instances-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (launch-specification
    (common-lisp:error ":launch-specification is required") :type
    (common-lisp:or scheduled-instances-launch-specification common-lisp:null))
   (scheduled-instance-id
    (common-lisp:error ":scheduled-instance-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-scheduled-instances-request
                    'make-run-scheduled-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-scheduled-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-scheduled-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-instance-id))
      (common-lisp:list
       (common-lisp:cons "ScheduledInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-scheduled-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-scheduled-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-scheduled-instances-result-"))
   (instance-id-set common-lisp:nil :type
    (common-lisp:or instance-id-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-scheduled-instances-result
                    'make-run-scheduled-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-scheduled-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-scheduled-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id-set))
      (common-lisp:list
       (common-lisp:cons "InstanceIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-scheduled-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3storage-"))
   (awsaccess-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upload-policy common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (upload-policy-signature common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3storage 'make-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsaccess-key-id))
      (common-lisp:list
       (common-lisp:cons "AWSAccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-policy))
      (common-lisp:list
       (common-lisp:cons "UploadPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upload-policy-signature))
      (common-lisp:list
       (common-lisp:cons "UploadPolicySignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instance-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-platform common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (next-slot-start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (previous-slot-end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (recurrence common-lisp:nil :type
    (common-lisp:or scheduled-instance-recurrence common-lisp:null))
   (scheduled-instance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (slot-duration-in-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (term-end-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (term-start-date common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (total-scheduled-instance-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instance 'make-scheduled-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduled-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduled-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-price))
      (common-lisp:list
       (common-lisp:cons "HourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-platform))
      (common-lisp:list
       (common-lisp:cons "NetworkPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-slot-start-time))
      (common-lisp:list
       (common-lisp:cons "NextSlotStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-slot-end-time))
      (common-lisp:list
       (common-lisp:cons "PreviousSlotEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-instance-id))
      (common-lisp:list
       (common-lisp:cons "ScheduledInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-duration-in-hours))
      (common-lisp:list
       (common-lisp:cons "SlotDurationInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-end-date))
      (common-lisp:list
       (common-lisp:cons "TermEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-start-date))
      (common-lisp:list
       (common-lisp:cons "TermStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-scheduled-instance-hours))
      (common-lisp:list
       (common-lisp:cons "TotalScheduledInstanceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduled-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instance-availability (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instance-availability-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (available-instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (first-slot-start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-term-duration-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (min-term-duration-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (network-platform common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (purchase-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recurrence common-lisp:nil :type
    (common-lisp:or scheduled-instance-recurrence common-lisp:null))
   (slot-duration-in-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-scheduled-instance-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instance-availability
                    'make-scheduled-instance-availability))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-availability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-availability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-instance-count))
      (common-lisp:list
       (common-lisp:cons "AvailableInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-slot-start-time))
      (common-lisp:list
       (common-lisp:cons "FirstSlotStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-price))
      (common-lisp:list
       (common-lisp:cons "HourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-term-duration-in-days))
      (common-lisp:list
       (common-lisp:cons "MaxTermDurationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-term-duration-in-days))
      (common-lisp:list
       (common-lisp:cons "MinTermDurationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-platform))
      (common-lisp:list
       (common-lisp:cons "NetworkPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchase-token))
      (common-lisp:list
       (common-lisp:cons "PurchaseToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-duration-in-hours))
      (common-lisp:list
       (common-lisp:cons "SlotDurationInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-scheduled-instance-hours))
      (common-lisp:list
       (common-lisp:cons "TotalScheduledInstanceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-availability))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-instance-availability-set ()
   '(trivial-types:proper-list scheduled-instance-availability))
 (common-lisp:defun |make-scheduled-instance-availability-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-instance-availability))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype scheduled-instance-id-request-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-scheduled-instance-id-request-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instance-recurrence (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instance-recurrence-"))
   (frequency common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (occurrence-day-set common-lisp:nil :type
    (common-lisp:or occurrence-day-set common-lisp:null))
   (occurrence-relative-to-end common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (occurrence-unit common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instance-recurrence
                    'make-scheduled-instance-recurrence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-recurrence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-recurrence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrence-day-set))
      (common-lisp:list
       (common-lisp:cons "OccurrenceDaySet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'occurrence-relative-to-end))
      (common-lisp:list
       (common-lisp:cons "OccurrenceRelativeToEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrence-unit))
      (common-lisp:list
       (common-lisp:cons "OccurrenceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-recurrence))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instance-recurrence-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instance-recurrence-request-"))
   (frequency common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (occurrence-days common-lisp:nil :type
    (common-lisp:or occurrence-day-request-set common-lisp:null))
   (occurrence-relative-to-end common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (occurrence-unit common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instance-recurrence-request
                    'make-scheduled-instance-recurrence-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-recurrence-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-recurrence-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrence-days))
      (common-lisp:list
       (common-lisp:cons "OccurrenceDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'occurrence-relative-to-end))
      (common-lisp:list
       (common-lisp:cons "OccurrenceRelativeToEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrence-unit))
      (common-lisp:list
       (common-lisp:cons "OccurrenceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instance-recurrence-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-instance-set ()
   '(trivial-types:proper-list scheduled-instance))
 (common-lisp:defun |make-scheduled-instance-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-block-device-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-block-device-mapping-"))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or scheduled-instances-ebs common-lisp:null))
   (no-device common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-block-device-mapping
                    'make-scheduled-instances-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-instances-block-device-mapping-set ()
   '(trivial-types:proper-list scheduled-instances-block-device-mapping))
 (common-lisp:defun |make-scheduled-instances-block-device-mapping-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-instances-block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-ebs (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-ebs-"))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-ebs 'make-scheduled-instances-ebs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-ebs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-ebs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-ebs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-iam-instance-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-iam-instance-profile-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-iam-instance-profile
                    'make-scheduled-instances-iam-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-iam-instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-iam-instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-iam-instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-ipv6address (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-ipv6address-"))
   (ipv6address common-lisp:nil :type
    (common-lisp:or ipv6address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-ipv6address
                    'make-scheduled-instances-ipv6address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-ipv6address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-ipv6address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "Ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-ipv6address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-instances-ipv6address-list ()
   '(trivial-types:proper-list scheduled-instances-ipv6address))
 (common-lisp:defun |make-scheduled-instances-ipv6address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-instances-ipv6address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-launch-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-launch-specification-"))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or scheduled-instances-block-device-mapping-set
                    common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or scheduled-instances-iam-instance-profile common-lisp:null))
   (image-id (common-lisp:error ":image-id is required") :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or scheduled-instances-monitoring common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or scheduled-instances-network-interface-set
                    common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or scheduled-instances-placement common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or scheduled-instances-security-group-id-set
                    common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-data common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-launch-specification
                    'make-scheduled-instances-launch-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-launch-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-launch-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-launch-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-monitoring (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-monitoring-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-monitoring
                    'make-scheduled-instances-monitoring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-monitoring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-network-interface-"))
   (associate-public-ip-address common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (device-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or scheduled-instances-security-group-id-set
                    common-lisp:null))
   (ipv6address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or scheduled-instances-ipv6address-list common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address-configs common-lisp:nil :type
    (common-lisp:or private-ip-address-config-set common-lisp:null))
   (secondary-private-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-network-interface
                    'make-scheduled-instances-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-address-configs))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddressConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-private-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "SecondaryPrivateIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-instances-network-interface-set ()
   '(trivial-types:proper-list scheduled-instances-network-interface))
 (common-lisp:defun |make-scheduled-instances-network-interface-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-instances-network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-placement (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-instances-placement-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-placement
                    'make-scheduled-instances-placement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-placement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-placement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-placement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-instances-private-ip-address-config (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-scheduled-instances-private-ip-address-config-"))
   (primary common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-instances-private-ip-address-config
                    'make-scheduled-instances-private-ip-address-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-private-ip-address-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-private-ip-address-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-instances-private-ip-address-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-instances-security-group-id-set ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-scheduled-instances-security-group-id-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-permissions common-lisp:nil :type
    (common-lisp:or ip-permission-list common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-permissions-egress common-lisp:nil :type
    (common-lisp:or ip-permission-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'security-group 'make-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-permissions-egress))
      (common-lisp:list
       (common-lisp:cons "IpPermissionsEgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-group-list ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun |make-security-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (security-group-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-reference-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (referencing-vpc-id (common-lisp:error ":referencing-vpc-id is required")
    :type (common-lisp:or string common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-group-reference 'make-security-group-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-group-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-group-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'referencing-vpc-id))
      (common-lisp:list
       (common-lisp:cons "ReferencingVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-group-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-references ()
   '(trivial-types:proper-list security-group-reference))
 (common-lisp:defun |make-security-group-references|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-group-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-group-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype shutdown-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (slot-date-time-range-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-slot-date-time-range-request-"))
   (earliest-time (common-lisp:error ":earliest-time is required") :type
    (common-lisp:or date-time common-lisp:null))
   (latest-time (common-lisp:error ":latest-time is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slot-date-time-range-request
                    'make-slot-date-time-range-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-date-time-range-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-date-time-range-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earliest-time))
      (common-lisp:list
       (common-lisp:cons "EarliestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-time))
      (common-lisp:list
       (common-lisp:cons "LatestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-date-time-range-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (slot-start-time-range-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-slot-start-time-range-request-"))
   (earliest-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (latest-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slot-start-time-range-request
                    'make-slot-start-time-range-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-start-time-range-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-start-time-range-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earliest-time))
      (common-lisp:list
       (common-lisp:cons "EarliestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-time))
      (common-lisp:list
       (common-lisp:cons "LatestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-start-time-range-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot (:copier common-lisp:nil) (:conc-name "struct-shape-snapshot-"))
   (data-encryption-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or snapshot-state common-lisp:null))
   (state-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (owner-alias common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-key-id))
      (common-lisp:list
       (common-lisp:cons "DataEncryptionKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-message))
      (common-lisp:list
       (common-lisp:cons "StateMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-alias))
      (common-lisp:list
       (common-lisp:cons "OwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:deftype snapshot-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-detail-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (device-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (disk-image-size common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-bucket common-lisp:nil :type
    (common-lisp:or user-bucket-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot-detail 'make-snapshot-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-image-size))
      (common-lisp:list
       (common-lisp:cons "DiskImageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-bucket))
      (common-lisp:list
       (common-lisp:cons "UserBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snapshot-detail-list ()
   '(trivial-types:proper-list snapshot-detail))
 (common-lisp:defun |make-snapshot-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-disk-container (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-disk-container-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-bucket common-lisp:nil :type
    (common-lisp:or user-bucket common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-disk-container 'make-snapshot-disk-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-disk-container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-disk-container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-bucket))
      (common-lisp:list
       (common-lisp:cons "UserBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-disk-container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snapshot-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-snapshot-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snapshot-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-task-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-task-detail-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (disk-image-size common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-bucket common-lisp:nil :type
    (common-lisp:or user-bucket-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-task-detail 'make-snapshot-task-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-task-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-task-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-image-size))
      (common-lisp:list
       (common-lisp:cons "DiskImageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-bucket))
      (common-lisp:list
       (common-lisp:cons "UserBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-task-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-datafeed-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-datafeed-subscription-"))
   (bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (fault common-lisp:nil :type
    (common-lisp:or spot-instance-state-fault common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or datafeed-subscription-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-datafeed-subscription
                    'make-spot-datafeed-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-datafeed-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-datafeed-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault))
      (common-lisp:list
       (common-lisp:cons "Fault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-datafeed-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-fleet-launch-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-fleet-launch-specification-"))
   (security-groups common-lisp:nil :type
    (common-lisp:or group-identifier-list common-lisp:null))
   (addressing-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or block-device-mapping-list common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or iam-instance-profile-specification common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (kernel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or spot-fleet-monitoring common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or instance-network-interface-specification-list
                    common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or spot-placement common-lisp:null))
   (ramdisk-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (spot-price common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-data common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (weighted-capacity common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (tag-specifications common-lisp:nil :type
    (common-lisp:or spot-fleet-tag-specification-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-fleet-launch-specification
                    'make-spot-fleet-launch-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-launch-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-launch-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addressing-type))
      (common-lisp:list
       (common-lisp:cons "AddressingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-specifications))
      (common-lisp:list
       (common-lisp:cons "TagSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-launch-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-fleet-monitoring (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-fleet-monitoring-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-fleet-monitoring 'make-spot-fleet-monitoring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-monitoring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-monitoring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-monitoring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-fleet-request-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-fleet-request-config-"))
   (activity-status common-lisp:nil :type
    (common-lisp:or activity-status common-lisp:null))
   (create-time (common-lisp:error ":create-time is required") :type
    (common-lisp:or date-time common-lisp:null))
   (spot-fleet-request-config
    (common-lisp:error ":spot-fleet-request-config is required") :type
    (common-lisp:or spot-fleet-request-config-data common-lisp:null))
   (spot-fleet-request-id
    (common-lisp:error ":spot-fleet-request-id is required") :type
    (common-lisp:or string common-lisp:null))
   (spot-fleet-request-state
    (common-lisp:error ":spot-fleet-request-state is required") :type
    (common-lisp:or batch-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-fleet-request-config
                    'make-spot-fleet-request-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-request-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-request-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-config))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-fleet-request-state))
      (common-lisp:list
       (common-lisp:cons "SpotFleetRequestState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-request-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-fleet-request-config-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-fleet-request-config-data-"))
   (allocation-strategy common-lisp:nil :type
    (common-lisp:or allocation-strategy common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (excess-capacity-termination-policy common-lisp:nil :type
    (common-lisp:or excess-capacity-termination-policy common-lisp:null))
   (fulfilled-capacity common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (iam-fleet-role (common-lisp:error ":iam-fleet-role is required") :type
    (common-lisp:or string common-lisp:null))
   (launch-specifications
    (common-lisp:error ":launch-specifications is required") :type
    (common-lisp:or launch-specs-list common-lisp:null))
   (spot-price (common-lisp:error ":spot-price is required") :type
    (common-lisp:or string common-lisp:null))
   (target-capacity (common-lisp:error ":target-capacity is required") :type
    (common-lisp:or integer common-lisp:null))
   (terminate-instances-with-expiration common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or fleet-type common-lisp:null))
   (valid-from common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (replace-unhealthy-instances common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-fleet-request-config-data
                    'make-spot-fleet-request-config-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-request-config-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-request-config-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "AllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excess-capacity-termination-policy))
      (common-lisp:list
       (common-lisp:cons "ExcessCapacityTerminationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fulfilled-capacity))
      (common-lisp:list
       (common-lisp:cons "FulfilledCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-fleet-role))
      (common-lisp:list
       (common-lisp:cons "IamFleetRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specifications))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-capacity))
      (common-lisp:list
       (common-lisp:cons "TargetCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instances-with-expiration))
      (common-lisp:list
       (common-lisp:cons "TerminateInstancesWithExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from))
      (common-lisp:list
       (common-lisp:cons "ValidFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-unhealthy-instances))
      (common-lisp:list
       (common-lisp:cons "ReplaceUnhealthyInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-request-config-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spot-fleet-request-config-set ()
   '(trivial-types:proper-list spot-fleet-request-config))
 (common-lisp:defun |make-spot-fleet-request-config-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            spot-fleet-request-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-fleet-tag-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-fleet-tag-specification-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-fleet-tag-specification
                    'make-spot-fleet-tag-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-tag-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-tag-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-fleet-tag-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spot-fleet-tag-specification-list ()
   '(trivial-types:proper-list spot-fleet-tag-specification))
 (common-lisp:defun |make-spot-fleet-tag-specification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            spot-fleet-tag-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-instance-request-"))
   (actual-block-hourly-price common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zone-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (block-duration-minutes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (fault common-lisp:nil :type
    (common-lisp:or spot-instance-state-fault common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (launch-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (launch-specification common-lisp:nil :type
    (common-lisp:or launch-specification common-lisp:null))
   (launched-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or riproduct-description common-lisp:null))
   (spot-instance-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (spot-price common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or spot-instance-state common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or spot-instance-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or spot-instance-type common-lisp:null))
   (valid-from common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-instance-request 'make-spot-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-block-hourly-price))
      (common-lisp:list
       (common-lisp:cons "ActualBlockHourlyPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-group))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "BlockDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault))
      (common-lisp:list
       (common-lisp:cons "Fault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-group))
      (common-lisp:list
       (common-lisp:cons "LaunchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launched-availability-zone))
      (common-lisp:list
       (common-lisp:cons "LaunchedAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-instance-request-id))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from))
      (common-lisp:list
       (common-lisp:cons "ValidFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spot-instance-request-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-spot-instance-request-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype spot-instance-request-list ()
   '(trivial-types:proper-list spot-instance-request))
 (common-lisp:defun |make-spot-instance-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list spot-instance-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype spot-instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (spot-instance-state-fault (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-instance-state-fault-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-instance-state-fault
                    'make-spot-instance-state-fault))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spot-instance-state-fault))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spot-instance-state-fault))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spot-instance-state-fault))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-instance-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-instance-status-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spot-instance-status 'make-spot-instance-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spot-instance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spot-instance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spot-instance-status))
   common-lisp:nil))
(common-lisp:deftype spot-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (spot-placement (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-placement-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tenancy common-lisp:nil :type (common-lisp:or tenancy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spot-placement 'make-spot-placement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spot-placement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spot-placement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spot-placement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spot-price (:copier common-lisp:nil)
      (:conc-name "struct-shape-spot-price-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or riproduct-description common-lisp:null))
   (spot-price common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spot-price 'make-spot-price))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spot-price))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spot-price))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spot-price))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype spot-price-history-list ()
   '(trivial-types:proper-list spot-price))
 (common-lisp:defun |make-spot-price-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list spot-price))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stale-ip-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-stale-ip-permission-"))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (ip-protocol common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ip-ranges common-lisp:nil :type
    (common-lisp:or ip-ranges common-lisp:null))
   (prefix-list-ids common-lisp:nil :type
    (common-lisp:or prefix-list-id-set common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (user-id-group-pairs common-lisp:nil :type
    (common-lisp:or user-id-group-pair-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stale-ip-permission 'make-stale-ip-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stale-ip-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stale-ip-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "PrefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id-group-pairs))
      (common-lisp:list
       (common-lisp:cons "UserIdGroupPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stale-ip-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stale-ip-permission-set ()
   '(trivial-types:proper-list stale-ip-permission))
 (common-lisp:defun |make-stale-ip-permission-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stale-ip-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stale-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-stale-security-group-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (stale-ip-permissions common-lisp:nil :type
    (common-lisp:or stale-ip-permission-set common-lisp:null))
   (stale-ip-permissions-egress common-lisp:nil :type
    (common-lisp:or stale-ip-permission-set common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stale-security-group 'make-stale-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stale-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stale-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stale-ip-permissions))
      (common-lisp:list
       (common-lisp:cons "StaleIpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stale-ip-permissions-egress))
      (common-lisp:list
       (common-lisp:cons "StaleIpPermissionsEgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stale-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stale-security-group-set ()
   '(trivial-types:proper-list stale-security-group))
 (common-lisp:defun |make-stale-security-group-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stale-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-instances-request-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (additional-info common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-instances-request 'make-start-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-instances-result-"))
   (starting-instances common-lisp:nil :type
    (common-lisp:or instance-state-change-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-instances-result 'make-start-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-instances))
      (common-lisp:list
       (common-lisp:cons "StartingInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instances-result))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (state-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-state-reason-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'state-reason 'make-state-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input state-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input state-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input state-reason))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-name () 'common-lisp:string)
(common-lisp:deftype status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-instances-request-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (force common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-instances-request 'make-stop-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-instances-result-"))
   (stopping-instances common-lisp:nil :type
    (common-lisp:or instance-state-change-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-instances-result 'make-stop-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-instances))
      (common-lisp:list
       (common-lisp:cons "StoppingInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage (:copier common-lisp:nil) (:conc-name "struct-shape-storage-"))
   (s3 common-lisp:nil :type (common-lisp:or s3storage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'storage 'make-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-location-"))
   (bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-location 'make-storage-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-location))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subnet (:copier common-lisp:nil) (:conc-name "struct-shape-subnet-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (available-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (cidr-block common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-for-az common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (map-public-ip-on-launch common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or subnet-state common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (assign-ipv6address-on-creation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ipv6cidr-block-association-set common-lisp:nil :type
    (common-lisp:or subnet-ipv6cidr-block-association-set common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "AvailableIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-for-az))
      (common-lisp:list
       (common-lisp:cons "DefaultForAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-public-ip-on-launch))
      (common-lisp:list
       (common-lisp:cons "MapPublicIpOnLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assign-ipv6address-on-creation))
      (common-lisp:list
       (common-lisp:cons "AssignIpv6AddressOnCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subnet-cidr-block-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-subnet-cidr-block-state-"))
   (state common-lisp:nil :type
    (common-lisp:or subnet-cidr-block-state-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subnet-cidr-block-state 'make-subnet-cidr-block-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subnet-cidr-block-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subnet-cidr-block-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subnet-cidr-block-state))
   common-lisp:nil))
(common-lisp:deftype subnet-cidr-block-state-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subnet-ipv6cidr-block-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-subnet-ipv6cidr-block-association-"))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ipv6cidr-block-state common-lisp:nil :type
    (common-lisp:or subnet-cidr-block-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subnet-ipv6cidr-block-association
                    'make-subnet-ipv6cidr-block-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subnet-ipv6cidr-block-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subnet-ipv6cidr-block-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-state))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subnet-ipv6cidr-block-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subnet-ipv6cidr-block-association-set ()
   '(trivial-types:proper-list subnet-ipv6cidr-block-association))
 (common-lisp:defun |make-subnet-ipv6cidr-block-association-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subnet-ipv6cidr-block-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-state () 'common-lisp:string)
(common-lisp:deftype summary-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-description-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-description-list ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun |make-tag-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-specification-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-specification 'make-tag-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-specification-list ()
   '(trivial-types:proper-list tag-specification))
 (common-lisp:defun |make-tag-specification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-configuration-"))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-configuration 'make-target-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (target-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-configuration-request-"))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (offering-id (common-lisp:error ":offering-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-configuration-request
                    'make-target-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-configuration-request-set ()
   '(trivial-types:proper-list target-configuration-request))
 (common-lisp:defun |make-target-configuration-request-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-reservation-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-reservation-value-"))
   (reservation-value common-lisp:nil :type
    (common-lisp:or reservation-value common-lisp:null))
   (target-configuration common-lisp:nil :type
    (common-lisp:or target-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-reservation-value 'make-target-reservation-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-reservation-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-reservation-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-value))
      (common-lisp:list
       (common-lisp:cons "ReservationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-reservation-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-reservation-value-set ()
   '(trivial-types:proper-list target-reservation-value))
 (common-lisp:defun |make-target-reservation-value-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-reservation-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype telemetry-status () 'common-lisp:string)
(common-lisp:deftype tenancy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-instances-request-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-instances-request
                    'make-terminate-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-instances-result-"))
   (terminating-instances common-lisp:nil :type
    (common-lisp:or instance-state-change-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-instances-result
                    'make-terminate-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminating-instances))
      (common-lisp:list
       (common-lisp:cons "TerminatingInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-instances-result))
   common-lisp:nil))
(common-lisp:deftype traffic-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unassign-ipv6addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-unassign-ipv6addresses-request-"))
   (ipv6addresses (common-lisp:error ":ipv6addresses is required") :type
    (common-lisp:or ipv6address-list common-lisp:null))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unassign-ipv6addresses-request
                    'make-unassign-ipv6addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unassign-ipv6addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unassign-ipv6addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unassign-ipv6addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unassign-ipv6addresses-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-unassign-ipv6addresses-result-"))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (unassigned-ipv6addresses common-lisp:nil :type
    (common-lisp:or ipv6address-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unassign-ipv6addresses-result
                    'make-unassign-ipv6addresses-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unassign-ipv6addresses-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unassign-ipv6addresses-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unassigned-ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "UnassignedIpv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unassign-ipv6addresses-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unassign-private-ip-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-unassign-private-ip-addresses-request-"))
   (network-interface-id
    (common-lisp:error ":network-interface-id is required") :type
    (common-lisp:or string common-lisp:null))
   (private-ip-addresses
    (common-lisp:error ":private-ip-addresses is required") :type
    (common-lisp:or private-ip-address-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unassign-private-ip-addresses-request
                    'make-unassign-private-ip-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unassign-private-ip-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unassign-private-ip-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unassign-private-ip-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unmonitor-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-unmonitor-instances-request-"))
   (instance-ids (common-lisp:error ":instance-ids is required") :type
    (common-lisp:or instance-id-string-list common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unmonitor-instances-request
                    'make-unmonitor-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unmonitor-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unmonitor-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unmonitor-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unmonitor-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-unmonitor-instances-result-"))
   (instance-monitorings common-lisp:nil :type
    (common-lisp:or instance-monitoring-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unmonitor-instances-result
                    'make-unmonitor-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unmonitor-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unmonitor-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-monitorings))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitorings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unmonitor-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unsuccessful-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsuccessful-item-"))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or unsuccessful-item-error common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsuccessful-item 'make-unsuccessful-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unsuccessful-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unsuccessful-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unsuccessful-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unsuccessful-item-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsuccessful-item-error-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsuccessful-item-error 'make-unsuccessful-item-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-item-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-item-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsuccessful-item-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unsuccessful-item-list ()
   '(trivial-types:proper-list unsuccessful-item))
 (common-lisp:defun |make-unsuccessful-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unsuccessful-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unsuccessful-item-set ()
   '(trivial-types:proper-list unsuccessful-item))
 (common-lisp:defun |make-unsuccessful-item-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unsuccessful-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-bucket (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-bucket-"))
   (s3bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-bucket 'make-user-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-bucket-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-bucket-details-"))
   (s3bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3key common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-bucket-details 'make-user-bucket-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-bucket-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-bucket-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-bucket-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-data-"))
   (data common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-data 'make-user-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-group-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-user-group-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (user-id-group-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-id-group-pair-"))
   (group-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (group-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (peering-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-id-group-pair 'make-user-id-group-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-id-group-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-id-group-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-status))
      (common-lisp:list
       (common-lisp:cons "PeeringStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-id-group-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-id-group-pair-list ()
   '(trivial-types:proper-list user-id-group-pair))
 (common-lisp:defun |make-user-id-group-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id-group-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-id-group-pair-set ()
   '(trivial-types:proper-list user-id-group-pair))
 (common-lisp:defun |make-user-id-group-pair-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id-group-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-user-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype value-string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vgw-telemetry (:copier common-lisp:nil)
      (:conc-name "struct-shape-vgw-telemetry-"))
   (accepted-route-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (last-status-change common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (outside-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or telemetry-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vgw-telemetry 'make-vgw-telemetry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vgw-telemetry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vgw-telemetry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepted-route-count))
      (common-lisp:list
       (common-lisp:cons "AcceptedRouteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "LastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outside-ip-address))
      (common-lisp:list
       (common-lisp:cons "OutsideIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vgw-telemetry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vgw-telemetry-list ()
   '(trivial-types:proper-list vgw-telemetry))
 (common-lisp:defun |make-vgw-telemetry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vgw-telemetry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtualization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (volume (:copier common-lisp:nil) (:conc-name "struct-shape-volume-"))
   (attachments common-lisp:nil :type
    (common-lisp:or volume-attachment-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (snapshot-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or volume-state common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (volume-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-attachment-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (device common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or volume-attachment-state common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-attachment 'make-volume-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-attachment-list ()
   '(trivial-types:proper-list volume-attachment))
 (common-lisp:defun |make-volume-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-attachment-state () 'common-lisp:string)
(common-lisp:deftype volume-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (volume-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-detail-"))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'volume-detail 'make-volume-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-volume-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype volume-list () '(trivial-types:proper-list volume))
 (common-lisp:defun |make-volume-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (volume-modification (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-modification-"))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (modification-state common-lisp:nil :type
    (common-lisp:or volume-modification-state common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (target-iops common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (target-volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null))
   (original-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (original-iops common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (original-volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null))
   (progress common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-modification 'make-volume-modification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-modification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-modification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-state))
      (common-lisp:list
       (common-lisp:cons "ModificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-size))
      (common-lisp:list
       (common-lisp:cons "TargetSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-iops))
      (common-lisp:list
       (common-lisp:cons "TargetIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-volume-type))
      (common-lisp:list
       (common-lisp:cons "TargetVolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-size))
      (common-lisp:list
       (common-lisp:cons "OriginalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-iops))
      (common-lisp:list
       (common-lisp:cons "OriginalIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-volume-type))
      (common-lisp:list
       (common-lisp:cons "OriginalVolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-modification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-modification-list ()
   '(trivial-types:proper-list volume-modification))
 (common-lisp:defun |make-volume-modification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-modification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-modification-state () 'common-lisp:string)
(common-lisp:deftype volume-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (volume-status-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-status-action-"))
   (code common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-status-action 'make-volume-status-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-status-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-status-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-status-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-status-actions-list ()
   '(trivial-types:proper-list volume-status-action))
 (common-lisp:defun |make-volume-status-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-status-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (volume-status-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-status-details-"))
   (name common-lisp:nil :type
    (common-lisp:or volume-status-name common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-status-details 'make-volume-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          volume-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          volume-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          volume-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-status-details-list ()
   '(trivial-types:proper-list volume-status-details))
 (common-lisp:defun |make-volume-status-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-status-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (volume-status-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-status-event-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (not-after common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (not-before common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-status-event 'make-volume-status-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-status-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-status-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-status-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-status-events-list ()
   '(trivial-types:proper-list volume-status-event))
 (common-lisp:defun |make-volume-status-events-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-status-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (volume-status-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-status-info-"))
   (details common-lisp:nil :type
    (common-lisp:or volume-status-details-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or volume-status-info-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-status-info 'make-volume-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-status-info))
   common-lisp:nil))
(common-lisp:deftype volume-status-info-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (volume-status-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-status-item-"))
   (actions common-lisp:nil :type
    (common-lisp:or volume-status-actions-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or volume-status-events-list common-lisp:null))
   (volume-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (volume-status common-lisp:nil :type
    (common-lisp:or volume-status-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'volume-status-item 'make-volume-status-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-status-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-status-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-status))
      (common-lisp:list
       (common-lisp:cons "VolumeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-status-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-status-list ()
   '(trivial-types:proper-list volume-status-item))
 (common-lisp:defun |make-volume-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-status-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-status-name () 'common-lisp:string)
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc (:copier common-lisp:nil) (:conc-name "struct-shape-vpc-"))
   (cidr-block common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dhcp-options-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or vpc-state common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-tenancy common-lisp:nil :type
    (common-lisp:or tenancy common-lisp:null))
   (ipv6cidr-block-association-set common-lisp:nil :type
    (common-lisp:or vpc-ipv6cidr-block-association-set common-lisp:null))
   (is-default common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc 'make-vpc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-id))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-tenancy))
      (common-lisp:list
       (common-lisp:cons "InstanceTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-attachment-"))
   (state common-lisp:nil :type
    (common-lisp:or attachment-status common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-attachment 'make-vpc-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-attachment-list ()
   '(trivial-types:proper-list vpc-attachment))
 (common-lisp:defun |make-vpc-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-cidr-block-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-cidr-block-state-"))
   (state common-lisp:nil :type
    (common-lisp:or vpc-cidr-block-state-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-cidr-block-state 'make-vpc-cidr-block-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-cidr-block-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-cidr-block-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-cidr-block-state))
   common-lisp:nil))
(common-lisp:deftype vpc-cidr-block-state-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-classic-link (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-classic-link-"))
   (classic-link-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-classic-link 'make-vpc-classic-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-classic-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-classic-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-enabled))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-classic-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-classic-link-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpc-classic-link-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-classic-link-list ()
   '(trivial-types:proper-list vpc-classic-link))
 (common-lisp:defun |make-vpc-classic-link-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-classic-link))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-endpoint-"))
   (creation-timestamp common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (route-table-ids common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-endpoint 'make-vpc-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-set ()
   '(trivial-types:proper-list vpc-endpoint))
 (common-lisp:defun |make-vpc-endpoint-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpc-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-ipv6cidr-block-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-ipv6cidr-block-association-"))
   (association-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ipv6cidr-block-state common-lisp:nil :type
    (common-lisp:or vpc-cidr-block-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-ipv6cidr-block-association
                    'make-vpc-ipv6cidr-block-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ipv6cidr-block-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ipv6cidr-block-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-state))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ipv6cidr-block-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-ipv6cidr-block-association-set ()
   '(trivial-types:proper-list vpc-ipv6cidr-block-association))
 (common-lisp:defun |make-vpc-ipv6cidr-block-association-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-ipv6cidr-block-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-list () '(trivial-types:proper-list vpc))
 (common-lisp:defun |make-vpc-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-peering-connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-peering-connection-"))
   (accepter-vpc-info common-lisp:nil :type
    (common-lisp:or vpc-peering-connection-vpc-info common-lisp:null))
   (expiration-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (requester-vpc-info common-lisp:nil :type
    (common-lisp:or vpc-peering-connection-vpc-info common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or vpc-peering-connection-state-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-connection 'make-vpc-peering-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepter-vpc-info))
      (common-lisp:list
       (common-lisp:cons "AccepterVpcInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-vpc-info))
      (common-lisp:list
       (common-lisp:cons "RequesterVpcInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-peering-connection-list ()
   '(trivial-types:proper-list vpc-peering-connection))
 (common-lisp:defun |make-vpc-peering-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-peering-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-peering-connection-options-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-peering-connection-options-description-"))
   (allow-dns-resolution-from-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-classic-link-to-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-vpc-to-remote-classic-link common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-connection-options-description
                    'make-vpc-peering-connection-options-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-options-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-options-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-dns-resolution-from-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowDnsResolutionFromRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-classic-link-to-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalClassicLinkToRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-vpc-to-remote-classic-link))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalVpcToRemoteClassicLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-options-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-peering-connection-state-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-peering-connection-state-reason-"))
   (code common-lisp:nil :type
    (common-lisp:or vpc-peering-connection-state-reason-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-connection-state-reason
                    'make-vpc-peering-connection-state-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-state-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-state-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-state-reason))
   common-lisp:nil))
(common-lisp:deftype vpc-peering-connection-state-reason-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-peering-connection-vpc-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-peering-connection-vpc-info-"))
   (cidr-block common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ipv6cidr-block-set common-lisp:nil :type
    (common-lisp:or ipv6cidr-block-set common-lisp:null))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (peering-options common-lisp:nil :type
    (common-lisp:or vpc-peering-connection-options-description
                    common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-connection-vpc-info
                    'make-vpc-peering-connection-vpc-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-vpc-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-vpc-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-options))
      (common-lisp:list
       (common-lisp:cons "PeeringOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-vpc-info))
   common-lisp:nil))
(common-lisp:deftype vpc-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpn-connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpn-connection-"))
   (customer-gateway-configuration common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (customer-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or vpn-state common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or gateway-type common-lisp:null))
   (vpn-connection-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpn-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or vpn-connection-options common-lisp:null))
   (routes common-lisp:nil :type
    (common-lisp:or vpn-static-route-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vgw-telemetry common-lisp:nil :type
    (common-lisp:or vgw-telemetry-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpn-connection 'make-vpn-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpn-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpn-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "Routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vgw-telemetry))
      (common-lisp:list
       (common-lisp:cons "VgwTelemetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpn-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpn-connection-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpn-connection-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpn-connection-list ()
   '(trivial-types:proper-list vpn-connection))
 (common-lisp:defun |make-vpn-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpn-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpn-connection-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpn-connection-options-"))
   (static-routes-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpn-connection-options 'make-vpn-connection-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpn-connection-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpn-connection-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-routes-only))
      (common-lisp:list
       (common-lisp:cons "StaticRoutesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpn-connection-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpn-connection-options-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpn-connection-options-specification-"))
   (static-routes-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpn-connection-options-specification
                    'make-vpn-connection-options-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpn-connection-options-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpn-connection-options-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-routes-only))
      (common-lisp:list
       (common-lisp:cons "StaticRoutesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpn-connection-options-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpn-gateway (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpn-gateway-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or vpn-state common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or gateway-type common-lisp:null))
   (vpc-attachments common-lisp:nil :type
    (common-lisp:or vpc-attachment-list common-lisp:null))
   (vpn-gateway-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpn-gateway 'make-vpn-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpn-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpn-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-attachments))
      (common-lisp:list
       (common-lisp:cons "VpcAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpn-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpn-gateway-id-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpn-gateway-id-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpn-gateway-list ()
   '(trivial-types:proper-list vpn-gateway))
 (common-lisp:defun |make-vpn-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpn-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpn-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpn-static-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpn-static-route-"))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or vpn-static-route-source common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or vpn-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpn-static-route 'make-vpn-static-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpn-static-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpn-static-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpn-static-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpn-static-route-list ()
   '(trivial-types:proper-list vpn-static-route))
 (common-lisp:defun |make-vpn-static-route-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpn-static-route))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpn-static-route-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype zone-name-string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-zone-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |scope| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-reserved-instances-exchange-quote
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run reserved-instance-ids
                     target-configurations)
   (common-lisp:declare
    (common-lisp:ignorable dry-run reserved-instance-ids
     target-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-reserved-instances-exchange-quote-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcceptReservedInstancesExchangeQuote"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'accept-reserved-instances-exchange-quote))
(common-lisp:progn
 (common-lisp:defun accept-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-vpc-peering-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcceptVpcPeeringConnection"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'accept-vpc-peering-connection))
(common-lisp:progn
 (common-lisp:defun allocate-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain address dry-run)
   (common-lisp:declare (common-lisp:ignorable domain address dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-allocate-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateAddress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'allocate-address))
(common-lisp:progn
 (common-lisp:defun allocate-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-placement availability-zone
                     client-token instance-type quantity)
   (common-lisp:declare
    (common-lisp:ignorable auto-placement availability-zone client-token
     instance-type quantity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-allocate-hosts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateHosts"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'allocate-hosts))
(common-lisp:progn
 (common-lisp:defun assign-ipv6addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ipv6address-count ipv6addresses
                     network-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable ipv6address-count ipv6addresses
     network-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assign-ipv6addresses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssignIpv6Addresses"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'assign-ipv6addresses))
(common-lisp:progn
 (common-lisp:defun assign-private-ip-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key allow-reassignment network-interface-id
                     private-ip-addresses secondary-private-ip-address-count)
   (common-lisp:declare
    (common-lisp:ignorable allow-reassignment network-interface-id
     private-ip-addresses secondary-private-ip-address-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assign-private-ip-addresses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssignPrivateIpAddresses"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'assign-private-ip-addresses))
(common-lisp:progn
 (common-lisp:defun associate-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key allocation-id instance-id public-ip
                     allow-reassociation dry-run network-interface-id
                     private-ip-address)
   (common-lisp:declare
    (common-lisp:ignorable allocation-id instance-id public-ip
     allow-reassociation dry-run network-interface-id private-ip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateAddress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'associate-address))
(common-lisp:progn
 (common-lisp:defun associate-dhcp-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dhcp-options-id vpc-id dry-run)
   (common-lisp:declare (common-lisp:ignorable dhcp-options-id vpc-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-dhcp-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateDhcpOptions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'associate-dhcp-options))
(common-lisp:progn
 (common-lisp:defun associate-iam-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-instance-profile instance-id)
   (common-lisp:declare
    (common-lisp:ignorable iam-instance-profile instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-iam-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateIamInstanceProfile"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'associate-iam-instance-profile))
(common-lisp:progn
 (common-lisp:defun associate-route-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run route-table-id subnet-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run route-table-id subnet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-route-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateRouteTable"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'associate-route-table))
(common-lisp:progn
 (common-lisp:defun associate-subnet-cidr-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ipv6cidr-block subnet-id)
   (common-lisp:declare (common-lisp:ignorable ipv6cidr-block subnet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-subnet-cidr-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateSubnetCidrBlock"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'associate-subnet-cidr-block))
(common-lisp:progn
 (common-lisp:defun associate-vpc-cidr-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key amazon-provided-ipv6cidr-block vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable amazon-provided-ipv6cidr-block vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-vpc-cidr-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateVpcCidrBlock"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'associate-vpc-cidr-block))
(common-lisp:progn
 (common-lisp:defun attach-classic-link-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run groups instance-id vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run groups instance-id vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-classic-link-vpc-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachClassicLinkVpc"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-classic-link-vpc))
(common-lisp:progn
 (common-lisp:defun attach-internet-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run internet-gateway-id vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run internet-gateway-id vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-internet-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachInternetGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-internet-gateway))
(common-lisp:progn
 (common-lisp:defun attach-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-index dry-run instance-id
                     network-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable device-index dry-run instance-id
     network-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-network-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachNetworkInterface"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-network-interface))
(common-lisp:progn
 (common-lisp:defun attach-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device instance-id volume-id dry-run)
   (common-lisp:declare
    (common-lisp:ignorable device instance-id volume-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachVolume"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-volume))
(common-lisp:progn
 (common-lisp:defun attach-vpn-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-id vpn-gateway-id dry-run)
   (common-lisp:declare (common-lisp:ignorable vpc-id vpn-gateway-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-vpn-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachVpnGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-vpn-gateway))
(common-lisp:progn
 (common-lisp:defun authorize-security-group-egress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run group-id ip-permissions cidr-ip
                     from-port ip-protocol to-port source-security-group-name
                     source-security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run group-id ip-permissions cidr-ip from-port
     ip-protocol to-port source-security-group-name
     source-security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-security-group-egress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeSecurityGroupEgress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'authorize-security-group-egress))
(common-lisp:progn
 (common-lisp:defun authorize-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-ip from-port group-id group-name
                     ip-permissions ip-protocol source-security-group-name
                     source-security-group-owner-id to-port dry-run)
   (common-lisp:declare
    (common-lisp:ignorable cidr-ip from-port group-id group-name ip-permissions
     ip-protocol source-security-group-name source-security-group-owner-id
     to-port dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-security-group-ingress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeSecurityGroupIngress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'authorize-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun bundle-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id storage dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-id storage dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-bundle-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BundleInstance"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'bundle-instance))
(common-lisp:progn
 (common-lisp:defun cancel-bundle-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-id dry-run)
   (common-lisp:declare (common-lisp:ignorable bundle-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-bundle-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelBundleTask"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-bundle-task))
(common-lisp:progn
 (common-lisp:defun cancel-conversion-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conversion-task-id dry-run
                     reason-message)
   (common-lisp:declare
    (common-lisp:ignorable conversion-task-id dry-run reason-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-conversion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelConversionTask"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-conversion-task))
(common-lisp:progn
 (common-lisp:defun cancel-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-id)
   (common-lisp:declare (common-lisp:ignorable export-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelExportTask"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-export-task))
(common-lisp:progn
 (common-lisp:defun cancel-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cancel-reason dry-run import-task-id)
   (common-lisp:declare
    (common-lisp:ignorable cancel-reason dry-run import-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-import-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelImportTask"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-import-task))
(common-lisp:progn
 (common-lisp:defun cancel-reserved-instances-listing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-instances-listing-id)
   (common-lisp:declare (common-lisp:ignorable reserved-instances-listing-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-reserved-instances-listing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelReservedInstancesListing"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-reserved-instances-listing))
(common-lisp:progn
 (common-lisp:defun cancel-spot-fleet-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run spot-fleet-request-ids
                     terminate-instances)
   (common-lisp:declare
    (common-lisp:ignorable dry-run spot-fleet-request-ids terminate-instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-spot-fleet-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelSpotFleetRequests"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-spot-fleet-requests))
(common-lisp:progn
 (common-lisp:defun cancel-spot-instance-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run spot-instance-request-ids)
   (common-lisp:declare
    (common-lisp:ignorable dry-run spot-instance-request-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-spot-instance-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelSpotInstanceRequests"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-spot-instance-requests))
(common-lisp:progn
 (common-lisp:defun confirm-product-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id product-code dry-run)
   (common-lisp:declare
    (common-lisp:ignorable instance-id product-code dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-product-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmProductInstance"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'confirm-product-instance))
(common-lisp:progn
 (common-lisp:defun copy-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description encrypted
                     kms-key-id name source-image-id source-region dry-run)
   (common-lisp:declare
    (common-lisp:ignorable client-token description encrypted kms-key-id name
     source-image-id source-region dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CopyImage"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'copy-image))
(common-lisp:progn
 (common-lisp:defun copy-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description destination-region encrypted
                     kms-key-id presigned-url source-region source-snapshot-id
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable description destination-region encrypted kms-key-id
     presigned-url source-region source-snapshot-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopySnapshot"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'copy-snapshot))
(common-lisp:progn
 (common-lisp:defun create-customer-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bgp-asn public-ip type dry-run)
   (common-lisp:declare (common-lisp:ignorable bgp-asn public-ip type dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-customer-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomerGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-customer-gateway))
(common-lisp:progn
 (common-lisp:defun create-default-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run)
   (common-lisp:declare (common-lisp:ignorable dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-default-vpc-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDefaultVpc"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-default-vpc))
(common-lisp:progn
 (common-lisp:defun create-dhcp-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dhcp-configurations dry-run)
   (common-lisp:declare (common-lisp:ignorable dhcp-configurations dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dhcp-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDhcpOptions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-dhcp-options))
(common-lisp:progn
 (common-lisp:defun create-egress-only-internet-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dry-run vpc-id)
   (common-lisp:declare (common-lisp:ignorable client-token dry-run vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-egress-only-internet-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEgressOnlyInternetGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-egress-only-internet-gateway))
(common-lisp:progn
 (common-lisp:defun create-flow-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token deliver-logs-permission-arn
                     log-group-name resource-ids resource-type traffic-type)
   (common-lisp:declare
    (common-lisp:ignorable client-token deliver-logs-permission-arn
     log-group-name resource-ids resource-type traffic-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-flow-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFlowLogs"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-flow-logs))
(common-lisp:progn
 (common-lisp:defun create-fpga-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run input-storage-location
                     logs-storage-location description name client-token)
   (common-lisp:declare
    (common-lisp:ignorable dry-run input-storage-location logs-storage-location
     description name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fpga-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFpgaImage"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-fpga-image))
(common-lisp:progn
 (common-lisp:defun create-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key block-device-mappings description dry-run
                     instance-id name no-reboot)
   (common-lisp:declare
    (common-lisp:ignorable block-device-mappings description dry-run
     instance-id name no-reboot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateImage"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-image))
(common-lisp:progn
 (common-lisp:defun create-instance-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description export-to-s3task instance-id
                     target-environment)
   (common-lisp:declare
    (common-lisp:ignorable description export-to-s3task instance-id
     target-environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-instance-export-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceExportTask"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-instance-export-task))
(common-lisp:progn
 (common-lisp:defun create-internet-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run)
   (common-lisp:declare (common-lisp:ignorable dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-internet-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInternetGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-internet-gateway))
(common-lisp:progn
 (common-lisp:defun create-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-name dry-run)
   (common-lisp:declare (common-lisp:ignorable key-name dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateKeyPair"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-key-pair))
(common-lisp:progn
 (common-lisp:defun create-nat-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key allocation-id client-token subnet-id)
   (common-lisp:declare
    (common-lisp:ignorable allocation-id client-token subnet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-nat-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNatGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-nat-gateway))
(common-lisp:progn
 (common-lisp:defun create-network-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-id)
   (common-lisp:declare (common-lisp:ignorable dry-run vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNetworkAcl"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-network-acl))
(common-lisp:progn
 (common-lisp:defun create-network-acl-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-block dry-run egress icmp-type-code
                     ipv6cidr-block network-acl-id port-range protocol
                     rule-action rule-number)
   (common-lisp:declare
    (common-lisp:ignorable cidr-block dry-run egress icmp-type-code
     ipv6cidr-block network-acl-id port-range protocol rule-action
     rule-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-acl-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNetworkAclEntry"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-network-acl-entry))
(common-lisp:progn
 (common-lisp:defun create-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description dry-run groups
                     ipv6address-count ipv6addresses private-ip-address
                     private-ip-addresses secondary-private-ip-address-count
                     subnet-id)
   (common-lisp:declare
    (common-lisp:ignorable description dry-run groups ipv6address-count
     ipv6addresses private-ip-address private-ip-addresses
     secondary-private-ip-address-count subnet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNetworkInterface"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-network-interface))
(common-lisp:progn
 (common-lisp:defun create-network-interface-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-interface-id aws-account-id
                     aws-service permission dry-run)
   (common-lisp:declare
    (common-lisp:ignorable network-interface-id aws-account-id aws-service
     permission dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-network-interface-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNetworkInterfacePermission"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-network-interface-permission))
(common-lisp:progn
 (common-lisp:defun create-placement-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run group-name strategy)
   (common-lisp:declare (common-lisp:ignorable dry-run group-name strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-placement-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePlacementGroup"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-placement-group))
(common-lisp:progn
 (common-lisp:defun create-reserved-instances-listing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token instance-count
                     price-schedules reserved-instances-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token instance-count price-schedules
     reserved-instances-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-reserved-instances-listing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReservedInstancesListing"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-reserved-instances-listing))
(common-lisp:progn
 (common-lisp:defun create-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-cidr-block
                     destination-ipv6cidr-block dry-run
                     egress-only-internet-gateway-id gateway-id instance-id
                     nat-gateway-id network-interface-id route-table-id
                     vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable destination-cidr-block destination-ipv6cidr-block
     dry-run egress-only-internet-gateway-id gateway-id instance-id
     nat-gateway-id network-interface-id route-table-id
     vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-route-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRoute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-route))
(common-lisp:progn
 (common-lisp:defun create-route-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-id)
   (common-lisp:declare (common-lisp:ignorable dry-run vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-route-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRouteTable"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-route-table))
(common-lisp:progn
 (common-lisp:defun create-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description group-name vpc-id dry-run)
   (common-lisp:declare
    (common-lisp:ignorable description group-name vpc-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-security-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSecurityGroup"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-security-group))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description volume-id dry-run)
   (common-lisp:declare (common-lisp:ignorable description volume-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSnapshot"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-spot-datafeed-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket dry-run prefix)
   (common-lisp:declare (common-lisp:ignorable bucket dry-run prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-spot-datafeed-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSpotDatafeedSubscription"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-spot-datafeed-subscription))
(common-lisp:progn
 (common-lisp:defun create-subnet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone cidr-block
                     ipv6cidr-block vpc-id dry-run)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone cidr-block ipv6cidr-block vpc-id
     dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subnet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSubnet"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-subnet))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run resources tags)
   (common-lisp:declare (common-lisp:ignorable dry-run resources tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateTags"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun create-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone encrypted iops
                     kms-key-id size snapshot-id volume-type dry-run
                     tag-specifications)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone encrypted iops kms-key-id size
     snapshot-id volume-type dry-run tag-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVolume"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-volume))
(common-lisp:progn
 (common-lisp:defun create-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-block amazon-provided-ipv6cidr-block
                     dry-run instance-tenancy)
   (common-lisp:declare
    (common-lisp:ignorable cidr-block amazon-provided-ipv6cidr-block dry-run
     instance-tenancy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateVpc"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-vpc))
(common-lisp:progn
 (common-lisp:defun create-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dry-run policy-document
                     route-table-ids service-name vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token dry-run policy-document route-table-ids
     service-name vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpcEndpoint"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun create-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run peer-owner-id peer-vpc-id vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run peer-owner-id peer-vpc-id vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpc-peering-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpcPeeringConnection"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-vpc-peering-connection))
(common-lisp:progn
 (common-lisp:defun create-vpn-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key customer-gateway-id type vpn-gateway-id
                     dry-run options)
   (common-lisp:declare
    (common-lisp:ignorable customer-gateway-id type vpn-gateway-id dry-run
     options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpn-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpnConnection"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-vpn-connection))
(common-lisp:progn
 (common-lisp:defun create-vpn-connection-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-cidr-block vpn-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable destination-cidr-block vpn-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpn-connection-route-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpnConnectionRoute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-vpn-connection-route))
(common-lisp:progn
 (common-lisp:defun create-vpn-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone type dry-run)
   (common-lisp:declare (common-lisp:ignorable availability-zone type dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpn-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpnGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-vpn-gateway))
(common-lisp:progn
 (common-lisp:defun delete-customer-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key customer-gateway-id dry-run)
   (common-lisp:declare (common-lisp:ignorable customer-gateway-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-customer-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomerGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-customer-gateway))
(common-lisp:progn
 (common-lisp:defun delete-dhcp-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dhcp-options-id dry-run)
   (common-lisp:declare (common-lisp:ignorable dhcp-options-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dhcp-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDhcpOptions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-dhcp-options))
(common-lisp:progn
 (common-lisp:defun delete-egress-only-internet-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run egress-only-internet-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run egress-only-internet-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-egress-only-internet-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEgressOnlyInternetGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-egress-only-internet-gateway))
(common-lisp:progn
 (common-lisp:defun delete-flow-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-log-ids)
   (common-lisp:declare (common-lisp:ignorable flow-log-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-flow-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFlowLogs"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-flow-logs))
(common-lisp:progn
 (common-lisp:defun delete-internet-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run internet-gateway-id)
   (common-lisp:declare (common-lisp:ignorable dry-run internet-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-internet-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInternetGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-internet-gateway))
(common-lisp:progn
 (common-lisp:defun delete-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-name dry-run)
   (common-lisp:declare (common-lisp:ignorable key-name dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteKeyPair"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-key-pair))
(common-lisp:progn
 (common-lisp:defun delete-nat-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nat-gateway-id)
   (common-lisp:declare (common-lisp:ignorable nat-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-nat-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNatGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-nat-gateway))
(common-lisp:progn
 (common-lisp:defun delete-network-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run network-acl-id)
   (common-lisp:declare (common-lisp:ignorable dry-run network-acl-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNetworkAcl"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-network-acl))
(common-lisp:progn
 (common-lisp:defun delete-network-acl-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run egress network-acl-id
                     rule-number)
   (common-lisp:declare
    (common-lisp:ignorable dry-run egress network-acl-id rule-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-acl-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNetworkAclEntry"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-network-acl-entry))
(common-lisp:progn
 (common-lisp:defun delete-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run network-interface-id)
   (common-lisp:declare (common-lisp:ignorable dry-run network-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNetworkInterface"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-network-interface))
(common-lisp:progn
 (common-lisp:defun delete-network-interface-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-interface-permission-id force
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable network-interface-permission-id force dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-network-interface-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNetworkInterfacePermission"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-network-interface-permission))
(common-lisp:progn
 (common-lisp:defun delete-placement-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run group-name)
   (common-lisp:declare (common-lisp:ignorable dry-run group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-placement-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePlacementGroup"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-placement-group))
(common-lisp:progn
 (common-lisp:defun delete-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-cidr-block
                     destination-ipv6cidr-block dry-run route-table-id)
   (common-lisp:declare
    (common-lisp:ignorable destination-cidr-block destination-ipv6cidr-block
     dry-run route-table-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-route-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRoute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-route))
(common-lisp:progn
 (common-lisp:defun delete-route-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run route-table-id)
   (common-lisp:declare (common-lisp:ignorable dry-run route-table-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-route-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRouteTable"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-route-table))
(common-lisp:progn
 (common-lisp:defun delete-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id group-name dry-run)
   (common-lisp:declare (common-lisp:ignorable group-id group-name dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-security-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSecurityGroup"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-security-group))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id dry-run)
   (common-lisp:declare (common-lisp:ignorable snapshot-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSnapshot"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-spot-datafeed-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run)
   (common-lisp:declare (common-lisp:ignorable dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-spot-datafeed-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSpotDatafeedSubscription"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-spot-datafeed-subscription))
(common-lisp:progn
 (common-lisp:defun delete-subnet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subnet-id dry-run)
   (common-lisp:declare (common-lisp:ignorable subnet-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subnet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSubnet"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-subnet))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run resources tags)
   (common-lisp:declare (common-lisp:ignorable dry-run resources tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteTags"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun delete-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-id dry-run)
   (common-lisp:declare (common-lisp:ignorable volume-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVolume"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-volume))
(common-lisp:progn
 (common-lisp:defun delete-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-id dry-run)
   (common-lisp:declare (common-lisp:ignorable vpc-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteVpc"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-vpc))
(common-lisp:progn
 (common-lisp:defun delete-vpc-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-endpoint-ids)
   (common-lisp:declare (common-lisp:ignorable dry-run vpc-endpoint-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpcEndpoints"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-vpc-endpoints))
(common-lisp:progn
 (common-lisp:defun delete-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpc-peering-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpcPeeringConnection"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-vpc-peering-connection))
(common-lisp:progn
 (common-lisp:defun delete-vpn-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpn-connection-id dry-run)
   (common-lisp:declare (common-lisp:ignorable vpn-connection-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpn-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpnConnection"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-vpn-connection))
(common-lisp:progn
 (common-lisp:defun delete-vpn-connection-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-cidr-block vpn-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable destination-cidr-block vpn-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpn-connection-route-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpnConnectionRoute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-vpn-connection-route))
(common-lisp:progn
 (common-lisp:defun delete-vpn-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpn-gateway-id dry-run)
   (common-lisp:declare (common-lisp:ignorable vpn-gateway-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpn-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpnGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-vpn-gateway))
(common-lisp:progn
 (common-lisp:defun deregister-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-id dry-run)
   (common-lisp:declare (common-lisp:ignorable image-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterImage"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'deregister-image))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute-names dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute-names dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAccountAttributes"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters public-ips allocation-ids
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable filters public-ips allocation-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-addresses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAddresses"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-addresses))
(common-lisp:progn
 (common-lisp:defun describe-availability-zones
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters zone-names dry-run)
   (common-lisp:declare (common-lisp:ignorable filters zone-names dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-availability-zones-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAvailabilityZones"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-availability-zones))
(common-lisp:progn
 (common-lisp:defun describe-bundle-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-ids filters dry-run)
   (common-lisp:declare (common-lisp:ignorable bundle-ids filters dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bundle-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBundleTasks"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-bundle-tasks))
(common-lisp:progn
 (common-lisp:defun describe-classic-link-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run instance-ids max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run instance-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-classic-link-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClassicLinkInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-classic-link-instances))
(common-lisp:progn
 (common-lisp:defun describe-conversion-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conversion-task-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable conversion-task-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conversion-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConversionTasks"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-conversion-tasks))
(common-lisp:progn
 (common-lisp:defun describe-customer-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key customer-gateway-ids filters dry-run)
   (common-lisp:declare
    (common-lisp:ignorable customer-gateway-ids filters dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-customer-gateways-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCustomerGateways"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-customer-gateways))
(common-lisp:progn
 (common-lisp:defun describe-dhcp-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dhcp-options-ids filters dry-run)
   (common-lisp:declare
    (common-lisp:ignorable dhcp-options-ids filters dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dhcp-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDhcpOptions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-dhcp-options))
(common-lisp:progn
 (common-lisp:defun describe-egress-only-internet-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run egress-only-internet-gateway-ids
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable dry-run egress-only-internet-gateway-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-egress-only-internet-gateways-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEgressOnlyInternetGateways"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-egress-only-internet-gateways))
(common-lisp:progn
 (common-lisp:defun describe-elastic-gpus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-gpu-ids dry-run filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable elastic-gpu-ids dry-run filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-elastic-gpus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeElasticGpus"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-elastic-gpus))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-ids)
   (common-lisp:declare (common-lisp:ignorable export-task-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportTasks"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-flow-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter flow-log-ids max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter flow-log-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-flow-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFlowLogs"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-flow-logs))
(common-lisp:progn
 (common-lisp:defun describe-fpga-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run fpga-image-ids owners filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable dry-run fpga-image-ids owners filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fpga-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFpgaImages"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-fpga-images))
(common-lisp:progn
 (common-lisp:defun describe-host-reservation-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-duration max-results
                     min-duration next-token offering-id)
   (common-lisp:declare
    (common-lisp:ignorable filter max-duration max-results min-duration
     next-token offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-host-reservation-offerings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHostReservationOfferings"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-host-reservation-offerings))
(common-lisp:progn
 (common-lisp:defun describe-host-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter host-reservation-id-set
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter host-reservation-id-set max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-host-reservations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHostReservations"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-host-reservations))
(common-lisp:progn
 (common-lisp:defun describe-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter host-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter host-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-hosts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHosts"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-hosts))
(common-lisp:progn
 (common-lisp:defun describe-iam-instance-profile-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable association-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-iam-instance-profile-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIamInstanceProfileAssociations"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-iam-instance-profile-associations))
(common-lisp:progn
 (common-lisp:defun describe-id-format
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource)
   (common-lisp:declare (common-lisp:ignorable resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-id-format-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIdFormat"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-id-format))
(common-lisp:progn
 (common-lisp:defun describe-identity-id-format
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-arn resource)
   (common-lisp:declare (common-lisp:ignorable principal-arn resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-identity-id-format-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeIdentityIdFormat"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-identity-id-format))
(common-lisp:progn
 (common-lisp:defun describe-image-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute image-id dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute image-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-image-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImageAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-image-attribute))
(common-lisp:progn
 (common-lisp:defun describe-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key executable-users filters image-ids owners
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable executable-users filters image-ids owners dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImages"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-images))
(common-lisp:progn
 (common-lisp:defun describe-import-image-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters import-task-ids
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters import-task-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-import-image-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImportImageTasks"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-import-image-tasks))
(common-lisp:progn
 (common-lisp:defun describe-import-snapshot-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters import-task-ids
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters import-task-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-import-snapshot-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImportSnapshotTasks"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-import-snapshot-tasks))
(common-lisp:progn
 (common-lisp:defun describe-instance-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute dry-run instance-id)
   (common-lisp:declare (common-lisp:ignorable attribute dry-run instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInstanceAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-instance-attribute))
(common-lisp:progn
 (common-lisp:defun describe-instance-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters instance-ids max-results
                     next-token dry-run include-all-instances)
   (common-lisp:declare
    (common-lisp:ignorable filters instance-ids max-results next-token dry-run
     include-all-instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instance-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInstanceStatus"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-instance-status))
(common-lisp:progn
 (common-lisp:defun describe-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters instance-ids dry-run max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters instance-ids dry-run max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-instances))
(common-lisp:progn
 (common-lisp:defun describe-internet-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run internet-gateway-ids)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run internet-gateway-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-internet-gateways-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInternetGateways"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-internet-gateways))
(common-lisp:progn
 (common-lisp:defun describe-key-pairs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters key-names dry-run)
   (common-lisp:declare (common-lisp:ignorable filters key-names dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-key-pairs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeKeyPairs"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-key-pairs))
(common-lisp:progn
 (common-lisp:defun describe-moving-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run max-results next-token
                     public-ips)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run max-results next-token public-ips))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-moving-addresses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMovingAddresses"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-moving-addresses))
(common-lisp:progn
 (common-lisp:defun describe-nat-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results nat-gateway-ids
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter max-results nat-gateway-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-nat-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNatGateways"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-nat-gateways))
(common-lisp:progn
 (common-lisp:defun describe-network-acls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run network-acl-ids)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run network-acl-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-network-acls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNetworkAcls"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-network-acls))
(common-lisp:progn
 (common-lisp:defun describe-network-interface-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute dry-run network-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable attribute dry-run network-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-network-interface-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNetworkInterfaceAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-network-interface-attribute))
(common-lisp:progn
 (common-lisp:defun describe-network-interface-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-interface-permission-ids filters
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable network-interface-permission-ids filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-network-interface-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNetworkInterfacePermissions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-network-interface-permissions))
(common-lisp:progn
 (common-lisp:defun describe-network-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run network-interface-ids)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run network-interface-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-network-interfaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNetworkInterfaces"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-network-interfaces))
(common-lisp:progn
 (common-lisp:defun describe-placement-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run group-names)
   (common-lisp:declare (common-lisp:ignorable filters dry-run group-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-placement-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePlacementGroups"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-placement-groups))
(common-lisp:progn
 (common-lisp:defun describe-prefix-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters max-results next-token
                     prefix-list-ids)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters max-results next-token
     prefix-list-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-prefix-lists-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePrefixLists"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-prefix-lists))
(common-lisp:progn
 (common-lisp:defun describe-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters region-names dry-run)
   (common-lisp:declare (common-lisp:ignorable filters region-names dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-regions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRegions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-regions))
(common-lisp:progn
 (common-lisp:defun describe-reserved-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters offering-class
                     reserved-instances-ids dry-run offering-type)
   (common-lisp:declare
    (common-lisp:ignorable filters offering-class reserved-instances-ids
     dry-run offering-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-reserved-instances))
(common-lisp:progn
 (common-lisp:defun describe-reserved-instances-listings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters reserved-instances-id
                     reserved-instances-listing-id)
   (common-lisp:declare
    (common-lisp:ignorable filters reserved-instances-id
     reserved-instances-listing-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-instances-listings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedInstancesListings"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-reserved-instances-listings))
(common-lisp:progn
 (common-lisp:defun describe-reserved-instances-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters
                     reserved-instances-modification-ids next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters reserved-instances-modification-ids
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-instances-modifications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedInstancesModifications"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-reserved-instances-modifications))
(common-lisp:progn
 (common-lisp:defun describe-reserved-instances-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone filters
                     include-marketplace instance-type max-duration
                     max-instance-count min-duration offering-class
                     product-description reserved-instances-offering-ids
                     dry-run instance-tenancy max-results next-token
                     offering-type)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone filters include-marketplace
     instance-type max-duration max-instance-count min-duration offering-class
     product-description reserved-instances-offering-ids dry-run
     instance-tenancy max-results next-token offering-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-instances-offerings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedInstancesOfferings"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-reserved-instances-offerings))
(common-lisp:progn
 (common-lisp:defun describe-route-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run route-table-ids)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run route-table-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-route-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRouteTables"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-route-tables))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-instance-availability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters
                     first-slot-start-time-range max-results
                     max-slot-duration-in-hours min-slot-duration-in-hours
                     next-token recurrence)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters first-slot-start-time-range
     max-results max-slot-duration-in-hours min-slot-duration-in-hours
     next-token recurrence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scheduled-instance-availability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeScheduledInstanceAvailability"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-scheduled-instance-availability))
(common-lisp:progn
 (common-lisp:defun describe-scheduled-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters max-results next-token
                     scheduled-instance-ids slot-start-time-range)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters max-results next-token
     scheduled-instance-ids slot-start-time-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scheduled-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeScheduledInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-scheduled-instances))
(common-lisp:progn
 (common-lisp:defun describe-security-group-references
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run group-id)
   (common-lisp:declare (common-lisp:ignorable dry-run group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-security-group-references-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSecurityGroupReferences"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-security-group-references))
(common-lisp:progn
 (common-lisp:defun describe-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters group-ids group-names dry-run)
   (common-lisp:declare
    (common-lisp:ignorable filters group-ids group-names dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-security-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSecurityGroups"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute snapshot-id dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute snapshot-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-snapshot-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshotAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token owner-ids
                     restorable-by-user-ids snapshot-ids dry-run)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token owner-ids
     restorable-by-user-ids snapshot-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshots"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-spot-datafeed-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run)
   (common-lisp:declare (common-lisp:ignorable dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-spot-datafeed-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpotDatafeedSubscription"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-spot-datafeed-subscription))
(common-lisp:progn
 (common-lisp:defun describe-spot-fleet-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run max-results next-token
                     spot-fleet-request-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run max-results next-token
     spot-fleet-request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-spot-fleet-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpotFleetInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-spot-fleet-instances))
(common-lisp:progn
 (common-lisp:defun describe-spot-fleet-request-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run event-type max-results next-token
                     spot-fleet-request-id start-time)
   (common-lisp:declare
    (common-lisp:ignorable dry-run event-type max-results next-token
     spot-fleet-request-id start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-spot-fleet-request-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpotFleetRequestHistory"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-spot-fleet-request-history))
(common-lisp:progn
 (common-lisp:defun describe-spot-fleet-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run max-results next-token
                     spot-fleet-request-ids)
   (common-lisp:declare
    (common-lisp:ignorable dry-run max-results next-token
     spot-fleet-request-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-spot-fleet-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpotFleetRequests"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-spot-fleet-requests))
(common-lisp:progn
 (common-lisp:defun describe-spot-instance-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run
                     spot-instance-request-ids)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run spot-instance-request-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-spot-instance-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpotInstanceRequests"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-spot-instance-requests))
(common-lisp:progn
 (common-lisp:defun describe-spot-price-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters availability-zone dry-run
                     end-time instance-types max-results next-token
                     product-descriptions start-time)
   (common-lisp:declare
    (common-lisp:ignorable filters availability-zone dry-run end-time
     instance-types max-results next-token product-descriptions start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-spot-price-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpotPriceHistory"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-spot-price-history))
(common-lisp:progn
 (common-lisp:defun describe-stale-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run max-results next-token vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run max-results next-token vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stale-security-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStaleSecurityGroups"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-stale-security-groups))
(common-lisp:progn
 (common-lisp:defun describe-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters subnet-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable filters subnet-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-subnets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSubnets"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-subnets))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-volume-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute volume-id dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute volume-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-volume-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVolumeAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-volume-attribute))
(common-lisp:progn
 (common-lisp:defun describe-volume-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token volume-ids
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token volume-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-volume-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVolumeStatus"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-volume-status))
(common-lisp:progn
 (common-lisp:defun describe-volumes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters volume-ids dry-run max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters volume-ids dry-run max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-volumes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVolumes"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-volumes))
(common-lisp:progn
 (common-lisp:defun describe-volumes-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run volume-ids filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable dry-run volume-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-volumes-modifications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVolumesModifications"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-volumes-modifications))
(common-lisp:progn
 (common-lisp:defun describe-vpc-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute vpc-id dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute vpc-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpc-attribute))
(common-lisp:progn
 (common-lisp:defun describe-vpc-classic-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run vpc-ids)
   (common-lisp:declare (common-lisp:ignorable filters dry-run vpc-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-classic-link-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcClassicLink"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpc-classic-link))
(common-lisp:progn
 (common-lisp:defun describe-vpc-classic-link-dns-support
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token vpc-ids)
   (common-lisp:declare (common-lisp:ignorable max-results next-token vpc-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-classic-link-dns-support-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcClassicLinkDnsSupport"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpc-classic-link-dns-support))
(common-lisp:progn
 (common-lisp:defun describe-vpc-endpoint-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run max-results next-token)
   (common-lisp:declare (common-lisp:ignorable dry-run max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-endpoint-services-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcEndpointServices"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpc-endpoint-services))
(common-lisp:progn
 (common-lisp:defun describe-vpc-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run filters max-results next-token
                     vpc-endpoint-ids)
   (common-lisp:declare
    (common-lisp:ignorable dry-run filters max-results next-token
     vpc-endpoint-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcEndpoints"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpc-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-vpc-peering-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters dry-run
                     vpc-peering-connection-ids)
   (common-lisp:declare
    (common-lisp:ignorable filters dry-run vpc-peering-connection-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-peering-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcPeeringConnections"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpc-peering-connections))
(common-lisp:progn
 (common-lisp:defun describe-vpcs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters vpc-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable filters vpc-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpcs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcs"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpcs))
(common-lisp:progn
 (common-lisp:defun describe-vpn-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters vpn-connection-ids dry-run)
   (common-lisp:declare
    (common-lisp:ignorable filters vpn-connection-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpn-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpnConnections"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpn-connections))
(common-lisp:progn
 (common-lisp:defun describe-vpn-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters vpn-gateway-ids dry-run)
   (common-lisp:declare
    (common-lisp:ignorable filters vpn-gateway-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpn-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpnGateways"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-vpn-gateways))
(common-lisp:progn
 (common-lisp:defun detach-classic-link-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run instance-id vpc-id)
   (common-lisp:declare (common-lisp:ignorable dry-run instance-id vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-classic-link-vpc-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachClassicLinkVpc"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-classic-link-vpc))
(common-lisp:progn
 (common-lisp:defun detach-internet-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run internet-gateway-id vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run internet-gateway-id vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-internet-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachInternetGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-internet-gateway))
(common-lisp:progn
 (common-lisp:defun detach-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id dry-run force)
   (common-lisp:declare (common-lisp:ignorable attachment-id dry-run force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-network-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachNetworkInterface"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-network-interface))
(common-lisp:progn
 (common-lisp:defun detach-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device force instance-id volume-id
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable device force instance-id volume-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachVolume"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-volume))
(common-lisp:progn
 (common-lisp:defun detach-vpn-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-id vpn-gateway-id dry-run)
   (common-lisp:declare (common-lisp:ignorable vpc-id vpn-gateway-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-vpn-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachVpnGateway"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-vpn-gateway))
(common-lisp:progn
 (common-lisp:defun disable-vgw-route-propagation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id route-table-id)
   (common-lisp:declare (common-lisp:ignorable gateway-id route-table-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-vgw-route-propagation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableVgwRoutePropagation"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-vgw-route-propagation))
(common-lisp:progn
 (common-lisp:defun disable-vpc-classic-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-id)
   (common-lisp:declare (common-lisp:ignorable dry-run vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-vpc-classic-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableVpcClassicLink"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-vpc-classic-link))
(common-lisp:progn
 (common-lisp:defun disable-vpc-classic-link-dns-support
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-id)
   (common-lisp:declare (common-lisp:ignorable vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-vpc-classic-link-dns-support-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableVpcClassicLinkDnsSupport"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-vpc-classic-link-dns-support))
(common-lisp:progn
 (common-lisp:defun disassociate-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id public-ip dry-run)
   (common-lisp:declare
    (common-lisp:ignorable association-id public-ip dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateAddress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disassociate-address))
(common-lisp:progn
 (common-lisp:defun disassociate-iam-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id)
   (common-lisp:declare (common-lisp:ignorable association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-iam-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateIamInstanceProfile"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disassociate-iam-instance-profile))
(common-lisp:progn
 (common-lisp:defun disassociate-route-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id dry-run)
   (common-lisp:declare (common-lisp:ignorable association-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-route-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateRouteTable"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disassociate-route-table))
(common-lisp:progn
 (common-lisp:defun disassociate-subnet-cidr-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id)
   (common-lisp:declare (common-lisp:ignorable association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-subnet-cidr-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateSubnetCidrBlock"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disassociate-subnet-cidr-block))
(common-lisp:progn
 (common-lisp:defun disassociate-vpc-cidr-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id)
   (common-lisp:declare (common-lisp:ignorable association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-vpc-cidr-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateVpcCidrBlock"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disassociate-vpc-cidr-block))
(common-lisp:progn
 (common-lisp:defun enable-vgw-route-propagation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id route-table-id)
   (common-lisp:declare (common-lisp:ignorable gateway-id route-table-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-vgw-route-propagation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableVgwRoutePropagation"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-vgw-route-propagation))
(common-lisp:progn
 (common-lisp:defun enable-volume-io
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run volume-id)
   (common-lisp:declare (common-lisp:ignorable dry-run volume-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-volume-iorequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableVolumeIO"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-volume-io))
(common-lisp:progn
 (common-lisp:defun enable-vpc-classic-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-id)
   (common-lisp:declare (common-lisp:ignorable dry-run vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-vpc-classic-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableVpcClassicLink"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-vpc-classic-link))
(common-lisp:progn
 (common-lisp:defun enable-vpc-classic-link-dns-support
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-id)
   (common-lisp:declare (common-lisp:ignorable vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-vpc-classic-link-dns-support-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableVpcClassicLinkDnsSupport"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-vpc-classic-link-dns-support))
(common-lisp:progn
 (common-lisp:defun get-console-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-console-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConsoleOutput"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-console-output))
(common-lisp:progn
 (common-lisp:defun get-console-screenshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run instance-id wake-up)
   (common-lisp:declare (common-lisp:ignorable dry-run instance-id wake-up))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-console-screenshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConsoleScreenshot"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-console-screenshot))
(common-lisp:progn
 (common-lisp:defun get-host-reservation-purchase-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-id-set offering-id)
   (common-lisp:declare (common-lisp:ignorable host-id-set offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-host-reservation-purchase-preview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetHostReservationPurchasePreview"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-host-reservation-purchase-preview))
(common-lisp:progn
 (common-lisp:defun get-password-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-password-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPasswordData"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-password-data))
(common-lisp:progn
 (common-lisp:defun get-reserved-instances-exchange-quote
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run reserved-instance-ids
                     target-configurations)
   (common-lisp:declare
    (common-lisp:ignorable dry-run reserved-instance-ids
     target-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reserved-instances-exchange-quote-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservedInstancesExchangeQuote"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-reserved-instances-exchange-quote))
(common-lisp:progn
 (common-lisp:defun import-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key architecture client-data client-token
                     description disk-containers dry-run hypervisor
                     license-type platform role-name)
   (common-lisp:declare
    (common-lisp:ignorable architecture client-data client-token description
     disk-containers dry-run hypervisor license-type platform role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportImage"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'import-image))
(common-lisp:progn
 (common-lisp:defun import-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description disk-images dry-run
                     launch-specification platform)
   (common-lisp:declare
    (common-lisp:ignorable description disk-images dry-run launch-specification
     platform))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportInstance"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'import-instance))
(common-lisp:progn
 (common-lisp:defun import-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run key-name public-key-material)
   (common-lisp:declare
    (common-lisp:ignorable dry-run key-name public-key-material))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportKeyPair"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'import-key-pair))
(common-lisp:progn
 (common-lisp:defun import-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-data client-token description
                     disk-container dry-run role-name)
   (common-lisp:declare
    (common-lisp:ignorable client-data client-token description disk-container
     dry-run role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportSnapshot"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'import-snapshot))
(common-lisp:progn
 (common-lisp:defun import-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone description dry-run
                     image volume)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone description dry-run image volume))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportVolume"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'import-volume))
(common-lisp:progn
 (common-lisp:defun modify-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-placement host-ids)
   (common-lisp:declare (common-lisp:ignorable auto-placement host-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-hosts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyHosts"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-hosts))
(common-lisp:progn
 (common-lisp:defun modify-id-format
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource use-long-ids)
   (common-lisp:declare (common-lisp:ignorable resource use-long-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-id-format-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyIdFormat"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-id-format))
(common-lisp:progn
 (common-lisp:defun modify-identity-id-format
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-arn resource use-long-ids)
   (common-lisp:declare
    (common-lisp:ignorable principal-arn resource use-long-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-identity-id-format-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyIdentityIdFormat"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-identity-id-format))
(common-lisp:progn
 (common-lisp:defun modify-image-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute description image-id
                     launch-permission operation-type product-codes user-groups
                     user-ids value dry-run)
   (common-lisp:declare
    (common-lisp:ignorable attribute description image-id launch-permission
     operation-type product-codes user-groups user-ids value dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-image-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyImageAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-image-attribute))
(common-lisp:progn
 (common-lisp:defun modify-instance-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dest-check attribute
                     block-device-mappings disable-api-termination dry-run
                     ebs-optimized ena-support groups instance-id
                     instance-initiated-shutdown-behavior instance-type kernel
                     ramdisk sriov-net-support user-data value)
   (common-lisp:declare
    (common-lisp:ignorable source-dest-check attribute block-device-mappings
     disable-api-termination dry-run ebs-optimized ena-support groups
     instance-id instance-initiated-shutdown-behavior instance-type kernel
     ramdisk sriov-net-support user-data value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-instance-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyInstanceAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-instance-attribute))
(common-lisp:progn
 (common-lisp:defun modify-instance-placement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key affinity host-id instance-id tenancy)
   (common-lisp:declare
    (common-lisp:ignorable affinity host-id instance-id tenancy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-instance-placement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyInstancePlacement"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-instance-placement))
(common-lisp:progn
 (common-lisp:defun modify-network-interface-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment description dry-run groups
                     network-interface-id source-dest-check)
   (common-lisp:declare
    (common-lisp:ignorable attachment description dry-run groups
     network-interface-id source-dest-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-network-interface-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyNetworkInterfaceAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-network-interface-attribute))
(common-lisp:progn
 (common-lisp:defun modify-reserved-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-instances-ids client-token
                     target-configurations)
   (common-lisp:declare
    (common-lisp:ignorable reserved-instances-ids client-token
     target-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-reserved-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReservedInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-reserved-instances))
(common-lisp:progn
 (common-lisp:defun modify-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute create-volume-permission
                     group-names operation-type snapshot-id user-ids dry-run)
   (common-lisp:declare
    (common-lisp:ignorable attribute create-volume-permission group-names
     operation-type snapshot-id user-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-snapshot-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifySnapshotAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-spot-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key excess-capacity-termination-policy
                     spot-fleet-request-id target-capacity)
   (common-lisp:declare
    (common-lisp:ignorable excess-capacity-termination-policy
     spot-fleet-request-id target-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-spot-fleet-request-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifySpotFleetRequest"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-spot-fleet-request))
(common-lisp:progn
 (common-lisp:defun modify-subnet-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assign-ipv6address-on-creation
                     map-public-ip-on-launch subnet-id)
   (common-lisp:declare
    (common-lisp:ignorable assign-ipv6address-on-creation
     map-public-ip-on-launch subnet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-subnet-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifySubnetAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-subnet-attribute))
(common-lisp:progn
 (common-lisp:defun modify-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run volume-id size volume-type iops)
   (common-lisp:declare
    (common-lisp:ignorable dry-run volume-id size volume-type iops))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyVolume"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-volume))
(common-lisp:progn
 (common-lisp:defun modify-volume-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable-io volume-id dry-run)
   (common-lisp:declare
    (common-lisp:ignorable auto-enable-io volume-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-volume-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyVolumeAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-volume-attribute))
(common-lisp:progn
 (common-lisp:defun modify-vpc-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enable-dns-hostnames enable-dns-support
                     vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable enable-dns-hostnames enable-dns-support vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-vpc-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyVpcAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-vpc-attribute))
(common-lisp:progn
 (common-lisp:defun modify-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key add-route-table-ids dry-run
                     policy-document remove-route-table-ids reset-policy
                     vpc-endpoint-id)
   (common-lisp:declare
    (common-lisp:ignorable add-route-table-ids dry-run policy-document
     remove-route-table-ids reset-policy vpc-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyVpcEndpoint"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-vpc-peering-connection-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accepter-peering-connection-options
                     dry-run requester-peering-connection-options
                     vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable accepter-peering-connection-options dry-run
     requester-peering-connection-options vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-vpc-peering-connection-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyVpcPeeringConnectionOptions"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'modify-vpc-peering-connection-options))
(common-lisp:progn
 (common-lisp:defun monitor-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-monitor-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "MonitorInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'monitor-instances))
(common-lisp:progn
 (common-lisp:defun move-address-to-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run public-ip)
   (common-lisp:declare (common-lisp:ignorable dry-run public-ip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-move-address-to-vpc-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "MoveAddressToVpc"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'move-address-to-vpc))
(common-lisp:progn
 (common-lisp:defun purchase-host-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token currency-code host-id-set
                     limit-price offering-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token currency-code host-id-set limit-price
     offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-host-reservation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseHostReservation"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'purchase-host-reservation))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-instances-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-count
                     reserved-instances-offering-id dry-run limit-price)
   (common-lisp:declare
    (common-lisp:ignorable instance-count reserved-instances-offering-id
     dry-run limit-price))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-instances-offering-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseReservedInstancesOffering"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'purchase-reserved-instances-offering))
(common-lisp:progn
 (common-lisp:defun purchase-scheduled-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dry-run purchase-requests)
   (common-lisp:declare
    (common-lisp:ignorable client-token dry-run purchase-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-scheduled-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseScheduledInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'purchase-scheduled-instances))
(common-lisp:progn
 (common-lisp:defun reboot-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reboot-instances))
(common-lisp:progn
 (common-lisp:defun register-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-location architecture
                     block-device-mappings description dry-run ena-support
                     kernel-id name billing-products ramdisk-id
                     root-device-name sriov-net-support virtualization-type)
   (common-lisp:declare
    (common-lisp:ignorable image-location architecture block-device-mappings
     description dry-run ena-support kernel-id name billing-products ramdisk-id
     root-device-name sriov-net-support virtualization-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterImage"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'register-image))
(common-lisp:progn
 (common-lisp:defun reject-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-vpc-peering-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RejectVpcPeeringConnection"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reject-vpc-peering-connection))
(common-lisp:progn
 (common-lisp:defun release-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key allocation-id public-ip dry-run)
   (common-lisp:declare
    (common-lisp:ignorable allocation-id public-ip dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReleaseAddress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'release-address))
(common-lisp:progn
 (common-lisp:defun release-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key host-ids)
   (common-lisp:declare (common-lisp:ignorable host-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-hosts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReleaseHosts"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'release-hosts))
(common-lisp:progn
 (common-lisp:defun replace-iam-instance-profile-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-instance-profile association-id)
   (common-lisp:declare
    (common-lisp:ignorable iam-instance-profile association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-replace-iam-instance-profile-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReplaceIamInstanceProfileAssociation"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-iam-instance-profile-association))
(common-lisp:progn
 (common-lisp:defun replace-network-acl-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id dry-run network-acl-id)
   (common-lisp:declare
    (common-lisp:ignorable association-id dry-run network-acl-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-replace-network-acl-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReplaceNetworkAclAssociation"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-network-acl-association))
(common-lisp:progn
 (common-lisp:defun replace-network-acl-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-block dry-run egress icmp-type-code
                     ipv6cidr-block network-acl-id port-range protocol
                     rule-action rule-number)
   (common-lisp:declare
    (common-lisp:ignorable cidr-block dry-run egress icmp-type-code
     ipv6cidr-block network-acl-id port-range protocol rule-action
     rule-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-replace-network-acl-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReplaceNetworkAclEntry"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-network-acl-entry))
(common-lisp:progn
 (common-lisp:defun replace-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-cidr-block
                     destination-ipv6cidr-block dry-run
                     egress-only-internet-gateway-id gateway-id instance-id
                     nat-gateway-id network-interface-id route-table-id
                     vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable destination-cidr-block destination-ipv6cidr-block
     dry-run egress-only-internet-gateway-id gateway-id instance-id
     nat-gateway-id network-interface-id route-table-id
     vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replace-route-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReplaceRoute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-route))
(common-lisp:progn
 (common-lisp:defun replace-route-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id dry-run route-table-id)
   (common-lisp:declare
    (common-lisp:ignorable association-id dry-run route-table-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-replace-route-table-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReplaceRouteTableAssociation"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-route-table-association))
(common-lisp:progn
 (common-lisp:defun report-instance-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description dry-run end-time instances
                     reason-codes start-time status)
   (common-lisp:declare
    (common-lisp:ignorable description dry-run end-time instances reason-codes
     start-time status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-report-instance-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReportInstanceStatus"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'report-instance-status))
(common-lisp:progn
 (common-lisp:defun request-spot-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run spot-fleet-request-config)
   (common-lisp:declare
    (common-lisp:ignorable dry-run spot-fleet-request-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-spot-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RequestSpotFleet"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'request-spot-fleet))
(common-lisp:progn
 (common-lisp:defun request-spot-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone-group
                     block-duration-minutes client-token dry-run instance-count
                     launch-group launch-specification spot-price type
                     valid-from valid-until)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone-group block-duration-minutes
     client-token dry-run instance-count launch-group launch-specification
     spot-price type valid-from valid-until))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-spot-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RequestSpotInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'request-spot-instances))
(common-lisp:progn
 (common-lisp:defun reset-image-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute image-id dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute image-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-image-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetImageAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reset-image-attribute))
(common-lisp:progn
 (common-lisp:defun reset-instance-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute dry-run instance-id)
   (common-lisp:declare (common-lisp:ignorable attribute dry-run instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-instance-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetInstanceAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reset-instance-attribute))
(common-lisp:progn
 (common-lisp:defun reset-network-interface-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run network-interface-id
                     source-dest-check)
   (common-lisp:declare
    (common-lisp:ignorable dry-run network-interface-id source-dest-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-network-interface-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetNetworkInterfaceAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reset-network-interface-attribute))
(common-lisp:progn
 (common-lisp:defun reset-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute snapshot-id dry-run)
   (common-lisp:declare (common-lisp:ignorable attribute snapshot-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-snapshot-attribute-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetSnapshotAttribute"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reset-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun restore-address-to-classic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run public-ip)
   (common-lisp:declare (common-lisp:ignorable dry-run public-ip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-address-to-classic-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreAddressToClassic"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'restore-address-to-classic))
(common-lisp:progn
 (common-lisp:defun revoke-security-group-egress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run group-id ip-permissions cidr-ip
                     from-port ip-protocol to-port source-security-group-name
                     source-security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable dry-run group-id ip-permissions cidr-ip from-port
     ip-protocol to-port source-security-group-name
     source-security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-security-group-egress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeSecurityGroupEgress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'revoke-security-group-egress))
(common-lisp:progn
 (common-lisp:defun revoke-security-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-ip from-port group-id group-name
                     ip-permissions ip-protocol source-security-group-name
                     source-security-group-owner-id to-port dry-run)
   (common-lisp:declare
    (common-lisp:ignorable cidr-ip from-port group-id group-name ip-permissions
     ip-protocol source-security-group-name source-security-group-owner-id
     to-port dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-security-group-ingress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeSecurityGroupIngress"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'revoke-security-group-ingress))
(common-lisp:progn
 (common-lisp:defun run-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key block-device-mappings image-id
                     instance-type ipv6address-count ipv6addresses kernel-id
                     key-name max-count min-count monitoring placement
                     ramdisk-id security-group-ids security-groups subnet-id
                     user-data additional-info client-token
                     disable-api-termination dry-run ebs-optimized
                     iam-instance-profile instance-initiated-shutdown-behavior
                     network-interfaces private-ip-address
                     elastic-gpu-specification tag-specifications)
   (common-lisp:declare
    (common-lisp:ignorable block-device-mappings image-id instance-type
     ipv6address-count ipv6addresses kernel-id key-name max-count min-count
     monitoring placement ramdisk-id security-group-ids security-groups
     subnet-id user-data additional-info client-token disable-api-termination
     dry-run ebs-optimized iam-instance-profile
     instance-initiated-shutdown-behavior network-interfaces private-ip-address
     elastic-gpu-specification tag-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RunInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'run-instances))
(common-lisp:progn
 (common-lisp:defun run-scheduled-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dry-run instance-count
                     launch-specification scheduled-instance-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token dry-run instance-count
     launch-specification scheduled-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-scheduled-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RunScheduledInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'run-scheduled-instances))
(common-lisp:progn
 (common-lisp:defun start-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids additional-info dry-run)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids additional-info dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'start-instances))
(common-lisp:progn
 (common-lisp:defun stop-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids dry-run force)
   (common-lisp:declare (common-lisp:ignorable instance-ids dry-run force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'stop-instances))
(common-lisp:progn
 (common-lisp:defun terminate-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TerminateInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'terminate-instances))
(common-lisp:progn
 (common-lisp:defun unassign-ipv6addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ipv6addresses network-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable ipv6addresses network-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unassign-ipv6addresses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UnassignIpv6Addresses"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'unassign-ipv6addresses))
(common-lisp:progn
 (common-lisp:defun unassign-private-ip-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-interface-id
                     private-ip-addresses)
   (common-lisp:declare
    (common-lisp:ignorable network-interface-id private-ip-addresses))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-unassign-private-ip-addresses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UnassignPrivateIpAddresses"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'unassign-private-ip-addresses))
(common-lisp:progn
 (common-lisp:defun unmonitor-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids dry-run)
   (common-lisp:declare (common-lisp:ignorable instance-ids dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unmonitor-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ec2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UnmonitorInstances"
                                                        "2016-11-15"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'unmonitor-instances))

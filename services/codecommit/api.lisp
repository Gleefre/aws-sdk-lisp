;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codecommit/api
  (:use)
  (:nicknames #:aws/codecommit)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codecommit/api)
(common-lisp:progn
 (common-lisp:defclass codecommit-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codecommit"))
 (common-lisp:export 'codecommit-request))
(common-lisp:progn
 (common-lisp:define-condition codecommit-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codecommit-error))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype additional-data () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-repositories-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-repositories-input-"))
   (repository-names (common-lisp:error ":repositorynames is required") :type
    (common-lisp:or repository-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-repositories-input
                    'make-batch-get-repositories-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repositories-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repositories-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-names))
      (common-lisp:list
       (common-lisp:cons "repositoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repositories-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-repositories-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-repositories-output-"))
   (repositories common-lisp:nil :type
    (common-lisp:or repository-metadata-list common-lisp:null))
   (repositories-not-found common-lisp:nil :type
    (common-lisp:or repository-not-found-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-repositories-output
                    'make-batch-get-repositories-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repositories-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repositories-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repositories-not-found))
      (common-lisp:list
       (common-lisp:cons "repositoriesNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-repositories-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition blob-id-does-not-exist-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'blob-id-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition blob-id-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'blob-id-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (blob-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-blob-metadata-"))
   (blob-id common-lisp:nil :type (common-lisp:or object-id common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'blob-metadata 'make-blob-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blob-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blob-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-id))
      (common-lisp:list
       (common-lisp:cons "blobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blob-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition branch-does-not-exist-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'branch-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (branch-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-branch-info-"))
   (branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (commit-id common-lisp:nil :type
    (common-lisp:or commit-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'branch-info 'make-branch-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input branch-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input branch-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input branch-info))
   common-lisp:nil))
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition branch-name-exists-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'branch-name-exists-exception)))
(common-lisp:progn
 (common-lisp:deftype branch-name-list ()
   '(trivial-types:proper-list branch-name))
 (common-lisp:defun |make-branch-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list branch-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition branch-name-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'branch-name-required-exception)))
(common-lisp:deftype change-type-enum () 'common-lisp:string)
(common-lisp:deftype clone-url-http () 'common-lisp:string)
(common-lisp:deftype clone-url-ssh () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (commit (:copier common-lisp:nil) (:conc-name "struct-shape-commit-"))
   (tree-id common-lisp:nil :type (common-lisp:or object-id common-lisp:null))
   (parents common-lisp:nil :type
    (common-lisp:or parent-list common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (author common-lisp:nil :type (common-lisp:or user-info common-lisp:null))
   (committer common-lisp:nil :type
    (common-lisp:or user-info common-lisp:null))
   (additional-data common-lisp:nil :type
    (common-lisp:or additional-data common-lisp:null)))
 (common-lisp:export (common-lisp:list 'commit 'make-commit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input commit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input commit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tree-id))
      (common-lisp:list
       (common-lisp:cons "treeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parents))
      (common-lisp:list
       (common-lisp:cons "parents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'committer))
      (common-lisp:list
       (common-lisp:cons "committer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-data))
      (common-lisp:list
       (common-lisp:cons "additionalData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input commit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition commit-does-not-exist-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'commit-does-not-exist-exception)))
(common-lisp:deftype commit-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition commit-id-does-not-exist-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'commit-id-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition commit-id-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'commit-id-required-exception)))
(common-lisp:deftype commit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition commit-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'commit-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-branch-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-branch-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (commit-id (common-lisp:error ":commitid is required") :type
    (common-lisp:or commit-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-branch-input 'make-create-branch-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-branch-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-branch-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-branch-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-repository-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-description common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-repository-input 'make-create-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-description))
      (common-lisp:list
       (common-lisp:cons "repositoryDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-repository-output-"))
   (repository-metadata common-lisp:nil :type
    (common-lisp:or repository-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-repository-output 'make-create-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-metadata))
      (common-lisp:list
       (common-lisp:cons "repositoryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-input 'make-delete-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-output-"))
   (repository-id common-lisp:nil :type
    (common-lisp:or repository-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-output 'make-delete-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (difference (:copier common-lisp:nil)
      (:conc-name "struct-shape-difference-"))
   (before-blob common-lisp:nil :type
    (common-lisp:or blob-metadata common-lisp:null))
   (after-blob common-lisp:nil :type
    (common-lisp:or blob-metadata common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'difference 'make-difference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input difference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input difference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-blob))
      (common-lisp:list
       (common-lisp:cons "beforeBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-blob))
      (common-lisp:list
       (common-lisp:cons "afterBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input difference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype difference-list ()
   '(trivial-types:proper-list difference))
 (common-lisp:defun |make-difference-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition encryption-integrity-checks-failed-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'encryption-integrity-checks-failed-exception)))
(common-lisp:progn
 (common-lisp:define-condition encryption-key-access-denied-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'encryption-key-access-denied-exception)))
(common-lisp:progn
 (common-lisp:define-condition encryption-key-disabled-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'encryption-key-disabled-exception)))
(common-lisp:progn
 (common-lisp:define-condition encryption-key-not-found-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'encryption-key-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition encryption-key-unavailable-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'encryption-key-unavailable-exception)))
(common-lisp:progn
 (common-lisp:define-condition file-too-large-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'file-too-large-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blob-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blob-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (blob-id (common-lisp:error ":blobid is required") :type
    (common-lisp:or object-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-blob-input 'make-get-blob-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-blob-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-blob-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-id))
      (common-lisp:list
       (common-lisp:cons "blobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-blob-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blob-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blob-output-"))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or
     (common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*))
     common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-blob-output 'make-get-blob-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-blob-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-blob-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-blob-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-branch-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-branch-input-"))
   (repository-name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-branch-input 'make-get-branch-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-branch-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-branch-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-branch-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-branch-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-branch-output-"))
   (branch common-lisp:nil :type
    (common-lisp:or branch-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-branch-output 'make-get-branch-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-branch-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-branch-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-branch-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-commit-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-commit-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (commit-id (common-lisp:error ":commitid is required") :type
    (common-lisp:or object-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-commit-input 'make-get-commit-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-commit-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-commit-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-commit-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-commit-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-commit-output-"))
   (commit (common-lisp:error ":commit is required") :type
    (common-lisp:or commit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-commit-output 'make-get-commit-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-commit-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-commit-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit))
      (common-lisp:list
       (common-lisp:cons "commit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-commit-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-differences-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-differences-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (before-commit-specifier common-lisp:nil :type
    (common-lisp:or commit-name common-lisp:null))
   (after-commit-specifier
    (common-lisp:error ":aftercommitspecifier is required") :type
    (common-lisp:or commit-name common-lisp:null))
   (before-path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (after-path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (max-results common-lisp:nil :type (common-lisp:or limit common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-differences-input 'make-get-differences-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-differences-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-differences-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'before-commit-specifier))
      (common-lisp:list
       (common-lisp:cons "beforeCommitSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-commit-specifier))
      (common-lisp:list
       (common-lisp:cons "afterCommitSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-path))
      (common-lisp:list
       (common-lisp:cons "beforePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-path))
      (common-lisp:list
       (common-lisp:cons "afterPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-differences-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-differences-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-differences-output-"))
   (differences common-lisp:nil :type
    (common-lisp:or difference-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-differences-output 'make-get-differences-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-differences-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-differences-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'differences))
      (common-lisp:list
       (common-lisp:cons "differences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-differences-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-input 'make-get-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-output-"))
   (repository-metadata common-lisp:nil :type
    (common-lisp:or repository-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-output 'make-get-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-metadata))
      (common-lisp:list
       (common-lisp:cons "repositoryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-triggers-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-triggers-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-triggers-input
                    'make-get-repository-triggers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-triggers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-triggers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-triggers-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-triggers-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-triggers-output-"))
   (configuration-id common-lisp:nil :type
    (common-lisp:or repository-triggers-configuration-id common-lisp:null))
   (triggers common-lisp:nil :type
    (common-lisp:or repository-triggers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-triggers-output
                    'make-get-repository-triggers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-triggers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-triggers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-triggers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-blob-id-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-blob-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-branch-name-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-branch-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-commit-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-commit-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-commit-id-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-commit-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-continuation-token-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-continuation-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-max-results-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-max-results-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-order-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-order-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-path-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-path-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-description-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-description-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-name-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-repository-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-trigger-branch-name-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-trigger-branch-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-trigger-custom-data-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-trigger-custom-data-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-trigger-destination-arn-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-trigger-destination-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-trigger-events-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-trigger-events-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-trigger-name-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-trigger-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-repository-trigger-region-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-repository-trigger-region-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sort-by-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-sort-by-exception)))
(common-lisp:deftype last-modified-date () 'common-lisp:string)
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-branches-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-branches-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-branches-input 'make-list-branches-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-branches-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-branches-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-branches-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-branches-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-branches-output-"))
   (branches common-lisp:nil :type
    (common-lisp:or branch-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-branches-output 'make-list-branches-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-branches-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-branches-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-branches-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-by-enum common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or order-enum common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-input 'make-list-repositories-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-output-"))
   (repositories common-lisp:nil :type
    (common-lisp:or repository-name-id-pair-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-output 'make-list-repositories-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition maximum-branches-exceeded-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'maximum-branches-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition maximum-repository-names-exceeded-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'maximum-repository-names-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition maximum-repository-triggers-exceeded-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'maximum-repository-triggers-exceeded-exception)))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype object-id () 'common-lisp:string)
(common-lisp:deftype order-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parent-list () '(trivial-types:proper-list object-id))
 (common-lisp:defun |make-parent-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition path-does-not-exist-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'path-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-repository-triggers-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-repository-triggers-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (triggers (common-lisp:error ":triggers is required") :type
    (common-lisp:or repository-triggers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-repository-triggers-input
                    'make-put-repository-triggers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-triggers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-triggers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-triggers-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-repository-triggers-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-repository-triggers-output-"))
   (configuration-id common-lisp:nil :type
    (common-lisp:or repository-triggers-configuration-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-repository-triggers-output
                    'make-put-repository-triggers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-triggers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-triggers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-triggers-output))
   common-lisp:nil))
(common-lisp:deftype repository-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition repository-does-not-exist-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'repository-does-not-exist-exception)))
(common-lisp:deftype repository-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition repository-limit-exceeded-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'repository-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-metadata-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository-id common-lisp:nil :type
    (common-lisp:or repository-id common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-description common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null))
   (default-branch common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or last-modified-date common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null))
   (clone-url-http common-lisp:nil :type
    (common-lisp:or clone-url-http common-lisp:null))
   (clone-url-ssh common-lisp:nil :type
    (common-lisp:or clone-url-ssh common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-metadata 'make-repository-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-description))
      (common-lisp:list
       (common-lisp:cons "repositoryDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-branch))
      (common-lisp:list
       (common-lisp:cons "defaultBranch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-url-http))
      (common-lisp:list
       (common-lisp:cons "cloneUrlHttp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-url-ssh))
      (common-lisp:list
       (common-lisp:cons "cloneUrlSsh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-metadata-list ()
   '(trivial-types:proper-list repository-metadata))
 (common-lisp:defun |make-repository-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition repository-name-exists-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'repository-name-exists-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-name-id-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-name-id-pair-"))
   (repository-name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-id common-lisp:nil :type
    (common-lisp:or repository-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-name-id-pair 'make-repository-name-id-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-name-id-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-name-id-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-name-id-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-name-id-pair-list ()
   '(trivial-types:proper-list repository-name-id-pair))
 (common-lisp:defun |make-repository-name-id-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name-id-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype repository-name-list ()
   '(trivial-types:proper-list repository-name))
 (common-lisp:defun |make-repository-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition repository-name-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'repository-name-required-exception)))
(common-lisp:progn
 (common-lisp:define-condition repository-names-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'repository-names-required-exception)))
(common-lisp:progn
 (common-lisp:deftype repository-not-found-list ()
   '(trivial-types:proper-list repository-name))
 (common-lisp:defun |make-repository-not-found-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-trigger (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-trigger-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or repository-trigger-name common-lisp:null))
   (destination-arn (common-lisp:error ":destinationarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (custom-data common-lisp:nil :type
    (common-lisp:or repository-trigger-custom-data common-lisp:null))
   (branches common-lisp:nil :type
    (common-lisp:or branch-name-list common-lisp:null))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or repository-trigger-event-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-trigger 'make-repository-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "destinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-data))
      (common-lisp:list
       (common-lisp:cons "customData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition repository-trigger-branch-name-list-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'repository-trigger-branch-name-list-required-exception)))
(common-lisp:deftype repository-trigger-custom-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition repository-trigger-destination-arn-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'repository-trigger-destination-arn-required-exception)))
(common-lisp:deftype repository-trigger-event-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-trigger-event-list ()
   '(trivial-types:proper-list repository-trigger-event-enum))
 (common-lisp:defun |make-repository-trigger-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-trigger-event-enum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition repository-trigger-events-list-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'repository-trigger-events-list-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-trigger-execution-failure (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-trigger-execution-failure-"))
   (trigger common-lisp:nil :type
    (common-lisp:or repository-trigger-name common-lisp:null))
   (failure-message common-lisp:nil :type
    (common-lisp:or repository-trigger-execution-failure-message
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-trigger-execution-failure
                    'make-repository-trigger-execution-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-trigger-execution-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-trigger-execution-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "failureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-trigger-execution-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-trigger-execution-failure-list ()
   '(trivial-types:proper-list repository-trigger-execution-failure))
 (common-lisp:defun |make-repository-trigger-execution-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-trigger-execution-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-trigger-execution-failure-message ()
  'common-lisp:string)
(common-lisp:deftype repository-trigger-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-trigger-name-list ()
   '(trivial-types:proper-list repository-trigger-name))
 (common-lisp:defun |make-repository-trigger-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-trigger-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition repository-trigger-name-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'repository-trigger-name-required-exception)))
(common-lisp:deftype repository-triggers-configuration-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-triggers-list ()
   '(trivial-types:proper-list repository-trigger))
 (common-lisp:defun |make-repository-triggers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition repository-triggers-list-required-exception
     (codecommit-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'repository-triggers-list-required-exception)))
(common-lisp:deftype sort-by-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (test-repository-triggers-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-repository-triggers-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (triggers (common-lisp:error ":triggers is required") :type
    (common-lisp:or repository-triggers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-repository-triggers-input
                    'make-test-repository-triggers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-repository-triggers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-repository-triggers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-repository-triggers-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-repository-triggers-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-repository-triggers-output-"))
   (successful-executions common-lisp:nil :type
    (common-lisp:or repository-trigger-name-list common-lisp:null))
   (failed-executions common-lisp:nil :type
    (common-lisp:or repository-trigger-execution-failure-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-repository-triggers-output
                    'make-test-repository-triggers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-repository-triggers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-repository-triggers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'successful-executions))
      (common-lisp:list
       (common-lisp:cons "successfulExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-executions))
      (common-lisp:list
       (common-lisp:cons "failedExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-repository-triggers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-default-branch-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-default-branch-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (default-branch-name (common-lisp:error ":defaultbranchname is required")
    :type (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-default-branch-input
                    'make-update-default-branch-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-default-branch-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-default-branch-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-branch-name))
      (common-lisp:list
       (common-lisp:cons "defaultBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-default-branch-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-repository-description-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-repository-description-input-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (repository-description common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-repository-description-input
                    'make-update-repository-description-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-description-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-description-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-description))
      (common-lisp:list
       (common-lisp:cons "repositoryDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-description-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-repository-name-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-repository-name-input-"))
   (old-name (common-lisp:error ":oldname is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (new-name (common-lisp:error ":newname is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-repository-name-input
                    'make-update-repository-name-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-name-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-name-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-name))
      (common-lisp:list
       (common-lisp:cons "oldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-name))
      (common-lisp:list
       (common-lisp:cons "newName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-name-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-info-"))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-info 'make-user-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-info))
   common-lisp:nil))
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun batch-get-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-names)
   (common-lisp:declare (common-lisp:ignorable repository-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-repositories-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetRepositories"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'batch-get-repositories))
(common-lisp:progn
 (common-lisp:defun create-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name branch-name commit-id)
   (common-lisp:declare
    (common-lisp:ignorable repository-name branch-name commit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-branch-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBranch"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'create-branch))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name repository-description)
   (common-lisp:declare
    (common-lisp:ignorable repository-name repository-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRepository"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name)
   (common-lisp:declare (common-lisp:ignorable repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepository"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun get-blob
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name blob-id)
   (common-lisp:declare (common-lisp:ignorable repository-name blob-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blob-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetBlob"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'get-blob))
(common-lisp:progn
 (common-lisp:defun get-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name branch-name)
   (common-lisp:declare (common-lisp:ignorable repository-name branch-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-branch-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetBranch"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'get-branch))
(common-lisp:progn
 (common-lisp:defun get-commit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name commit-id)
   (common-lisp:declare (common-lisp:ignorable repository-name commit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-commit-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetCommit"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'get-commit))
(common-lisp:progn
 (common-lisp:defun get-differences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name before-commit-specifier
                     after-commit-specifier before-path after-path max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable repository-name before-commit-specifier
     after-commit-specifier before-path after-path max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-differences-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDifferences"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'get-differences))
(common-lisp:progn
 (common-lisp:defun get-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name)
   (common-lisp:declare (common-lisp:ignorable repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepository"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'get-repository))
(common-lisp:progn
 (common-lisp:defun get-repository-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name)
   (common-lisp:declare (common-lisp:ignorable repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-triggers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepositoryTriggers"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'get-repository-triggers))
(common-lisp:progn
 (common-lisp:defun list-branches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name next-token)
   (common-lisp:declare (common-lisp:ignorable repository-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-branches-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListBranches"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'list-branches))
(common-lisp:progn
 (common-lisp:defun list-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token sort-by order)
   (common-lisp:declare (common-lisp:ignorable next-token sort-by order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-repositories-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRepositories"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'list-repositories))
(common-lisp:progn
 (common-lisp:defun put-repository-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name triggers)
   (common-lisp:declare (common-lisp:ignorable repository-name triggers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-repository-triggers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRepositoryTriggers"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'put-repository-triggers))
(common-lisp:progn
 (common-lisp:defun test-repository-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name triggers)
   (common-lisp:declare (common-lisp:ignorable repository-name triggers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-repository-triggers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestRepositoryTriggers"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'test-repository-triggers))
(common-lisp:progn
 (common-lisp:defun update-default-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name default-branch-name)
   (common-lisp:declare
    (common-lisp:ignorable repository-name default-branch-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-default-branch-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDefaultBranch"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'update-default-branch))
(common-lisp:progn
 (common-lisp:defun update-repository-description
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-name repository-description)
   (common-lisp:declare
    (common-lisp:ignorable repository-name repository-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-repository-description-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRepositoryDescription"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'update-repository-description))
(common-lisp:progn
 (common-lisp:defun update-repository-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key old-name new-name)
   (common-lisp:declare (common-lisp:ignorable old-name new-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-repository-name-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codecommit-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRepositoryName"
                                                        "2015-04-13"))
      common-lisp:nil common-lisp:nil
      '(("BlobIdDoesNotExistException" . blob-id-does-not-exist-exception)
        ("BlobIdRequiredException" . blob-id-required-exception)
        ("BranchDoesNotExistException" . branch-does-not-exist-exception)
        ("BranchNameExistsException" . branch-name-exists-exception)
        ("BranchNameRequiredException" . branch-name-required-exception)
        ("CommitDoesNotExistException" . commit-does-not-exist-exception)
        ("CommitIdDoesNotExistException" . commit-id-does-not-exist-exception)
        ("CommitIdRequiredException" . commit-id-required-exception)
        ("CommitRequiredException" . commit-required-exception)
        ("EncryptionIntegrityChecksFailedException"
         . encryption-integrity-checks-failed-exception)
        ("EncryptionKeyAccessDeniedException"
         . encryption-key-access-denied-exception)
        ("EncryptionKeyDisabledException" . encryption-key-disabled-exception)
        ("EncryptionKeyNotFoundException" . encryption-key-not-found-exception)
        ("EncryptionKeyUnavailableException"
         . encryption-key-unavailable-exception)
        ("FileTooLargeException" . file-too-large-exception)
        ("InvalidBlobIdException" . invalid-blob-id-exception)
        ("InvalidBranchNameException" . invalid-branch-name-exception)
        ("InvalidCommitException" . invalid-commit-exception)
        ("InvalidCommitIdException" . invalid-commit-id-exception)
        ("InvalidContinuationTokenException"
         . invalid-continuation-token-exception)
        ("InvalidMaxResultsException" . invalid-max-results-exception)
        ("InvalidOrderException" . invalid-order-exception)
        ("InvalidPathException" . invalid-path-exception)
        ("InvalidRepositoryDescriptionException"
         . invalid-repository-description-exception)
        ("InvalidRepositoryNameException" . invalid-repository-name-exception)
        ("InvalidRepositoryTriggerBranchNameException"
         . invalid-repository-trigger-branch-name-exception)
        ("InvalidRepositoryTriggerCustomDataException"
         . invalid-repository-trigger-custom-data-exception)
        ("InvalidRepositoryTriggerDestinationArnException"
         . invalid-repository-trigger-destination-arn-exception)
        ("InvalidRepositoryTriggerEventsException"
         . invalid-repository-trigger-events-exception)
        ("InvalidRepositoryTriggerNameException"
         . invalid-repository-trigger-name-exception)
        ("InvalidRepositoryTriggerRegionException"
         . invalid-repository-trigger-region-exception)
        ("InvalidSortByException" . invalid-sort-by-exception)
        ("MaximumBranchesExceededException"
         . maximum-branches-exceeded-exception)
        ("MaximumRepositoryNamesExceededException"
         . maximum-repository-names-exceeded-exception)
        ("MaximumRepositoryTriggersExceededException"
         . maximum-repository-triggers-exceeded-exception)
        ("PathDoesNotExistException" . path-does-not-exist-exception)
        ("RepositoryDoesNotExistException"
         . repository-does-not-exist-exception)
        ("RepositoryLimitExceededException"
         . repository-limit-exceeded-exception)
        ("RepositoryNameExistsException" . repository-name-exists-exception)
        ("RepositoryNameRequiredException"
         . repository-name-required-exception)
        ("RepositoryNamesRequiredException"
         . repository-names-required-exception)
        ("RepositoryTriggerBranchNameListRequiredException"
         . repository-trigger-branch-name-list-required-exception)
        ("RepositoryTriggerDestinationArnRequiredException"
         . repository-trigger-destination-arn-required-exception)
        ("RepositoryTriggerEventsListRequiredException"
         . repository-trigger-events-list-required-exception)
        ("RepositoryTriggerNameRequiredException"
         . repository-trigger-name-required-exception)
        ("RepositoryTriggersListRequiredException"
         . repository-triggers-list-required-exception)))))
 (common-lisp:export 'update-repository-name))

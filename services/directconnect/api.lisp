;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/directconnect/api
  (:use)
  (:nicknames #:aws/directconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/directconnect/api)
(common-lisp:progn
 (common-lisp:defclass directconnect-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "directconnect"))
 (common-lisp:export 'directconnect-request))
(common-lisp:progn
 (common-lisp:define-condition directconnect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'directconnect-error))
(common-lisp:deftype asn () 'common-lisp:integer)
(common-lisp:deftype address-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-connection-on-interconnect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-connection-on-interconnect-request-"))
   (bandwidth (common-lisp:error ":bandwidth is required") :type
    (common-lisp:or bandwidth common-lisp:null))
   (connection-name (common-lisp:error ":connectionname is required") :type
    (common-lisp:or connection-name common-lisp:null))
   (owner-account (common-lisp:error ":owneraccount is required") :type
    (common-lisp:or owner-account common-lisp:null))
   (interconnect-id (common-lisp:error ":interconnectid is required") :type
    (common-lisp:or interconnect-id common-lisp:null))
   (vlan (common-lisp:error ":vlan is required") :type
    (common-lisp:or vlan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-connection-on-interconnect-request
                    'make-allocate-connection-on-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-connection-on-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-connection-on-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-connection-on-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-hosted-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-hosted-connection-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (owner-account (common-lisp:error ":owneraccount is required") :type
    (common-lisp:or owner-account common-lisp:null))
   (bandwidth (common-lisp:error ":bandwidth is required") :type
    (common-lisp:or bandwidth common-lisp:null))
   (connection-name (common-lisp:error ":connectionname is required") :type
    (common-lisp:or connection-name common-lisp:null))
   (vlan (common-lisp:error ":vlan is required") :type
    (common-lisp:or vlan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-hosted-connection-request
                    'make-allocate-hosted-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosted-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosted-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-hosted-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-private-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-private-virtual-interface-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (owner-account (common-lisp:error ":owneraccount is required") :type
    (common-lisp:or owner-account common-lisp:null))
   (new-private-virtual-interface-allocation
    (common-lisp:error ":newprivatevirtualinterfaceallocation is required")
    :type
    (common-lisp:or new-private-virtual-interface-allocation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-private-virtual-interface-request
                    'make-allocate-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-private-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-private-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-private-virtual-interface-allocation))
      (common-lisp:list
       (common-lisp:cons "newPrivateVirtualInterfaceAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-private-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-public-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-public-virtual-interface-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (owner-account (common-lisp:error ":owneraccount is required") :type
    (common-lisp:or owner-account common-lisp:null))
   (new-public-virtual-interface-allocation
    (common-lisp:error ":newpublicvirtualinterfaceallocation is required")
    :type
    (common-lisp:or new-public-virtual-interface-allocation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-public-virtual-interface-request
                    'make-allocate-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-public-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-public-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-public-virtual-interface-allocation))
      (common-lisp:list
       (common-lisp:cons "newPublicVirtualInterfaceAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-public-virtual-interface-request))
   common-lisp:nil))
(common-lisp:deftype amazon-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-connection-with-lag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-connection-with-lag-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (lag-id (common-lisp:error ":lagid is required") :type
    (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-connection-with-lag-request
                    'make-associate-connection-with-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-with-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-with-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-with-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-hosted-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-hosted-connection-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (parent-connection-id (common-lisp:error ":parentconnectionid is required")
    :type (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-hosted-connection-request
                    'make-associate-hosted-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-hosted-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-hosted-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-connection-id))
      (common-lisp:list
       (common-lisp:cons "parentConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-hosted-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-virtual-interface-request-"))
   (virtual-interface-id (common-lisp:error ":virtualinterfaceid is required")
    :type (common-lisp:or virtual-interface-id common-lisp:null))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-virtual-interface-request
                    'make-associate-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-virtual-interface-request))
   common-lisp:nil))
(common-lisp:deftype aws-device () 'common-lisp:string)
(common-lisp:deftype bgpauth-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bgppeer (:copier common-lisp:nil) (:conc-name "struct-shape-bgppeer-"))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (bgp-peer-state common-lisp:nil :type
    (common-lisp:or bgppeer-state common-lisp:null))
   (bgp-status common-lisp:nil :type
    (common-lisp:or bgpstatus common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bgppeer 'make-bgppeer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bgppeer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bgppeer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peer-state))
      (common-lisp:list
       (common-lisp:cons "bgpPeerState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-status))
      (common-lisp:list
       (common-lisp:cons "bgpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bgppeer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bgppeer-list () '(trivial-types:proper-list bgppeer))
 (common-lisp:defun |make-bgppeer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bgppeer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bgppeer-state () 'common-lisp:string)
(common-lisp:deftype bgpstatus () 'common-lisp:string)
(common-lisp:deftype bandwidth () 'common-lisp:string)
(common-lisp:deftype boolean-flag () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-connection-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-connection-request
                    'make-confirm-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-connection-response-"))
   (connection-state common-lisp:nil :type
    (common-lisp:or connection-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-connection-response
                    'make-confirm-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "connectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-private-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-private-virtual-interface-request-"))
   (virtual-interface-id (common-lisp:error ":virtualinterfaceid is required")
    :type (common-lisp:or virtual-interface-id common-lisp:null))
   (virtual-gateway-id (common-lisp:error ":virtualgatewayid is required")
    :type (common-lisp:or virtual-gateway-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-private-virtual-interface-request
                    'make-confirm-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-private-virtual-interface-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-private-virtual-interface-response-"))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-private-virtual-interface-response
                    'make-confirm-private-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-private-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-public-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-public-virtual-interface-request-"))
   (virtual-interface-id (common-lisp:error ":virtualinterfaceid is required")
    :type (common-lisp:or virtual-interface-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-public-virtual-interface-request
                    'make-confirm-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-public-virtual-interface-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-confirm-public-virtual-interface-response-"))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-public-virtual-interface-response
                    'make-confirm-public-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          confirm-public-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-"))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or connection-state common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (bandwidth common-lisp:nil :type
    (common-lisp:or bandwidth common-lisp:null))
   (vlan common-lisp:nil :type (common-lisp:or vlan common-lisp:null))
   (partner-name common-lisp:nil :type
    (common-lisp:or partner-name common-lisp:null))
   (loa-issue-time common-lisp:nil :type
    (common-lisp:or loa-issue-time common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null))
   (aws-device common-lisp:nil :type
    (common-lisp:or aws-device common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "connectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-name))
      (common-lisp:list
       (common-lisp:cons "partnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-issue-time))
      (common-lisp:list
       (common-lisp:cons "loaIssueTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device))
      (common-lisp:list
       (common-lisp:cons "awsDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun |make-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connections (:copier common-lisp:nil)
      (:conc-name "struct-shape-connections-"))
   (connections common-lisp:nil :type
    (common-lisp:or connection-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connections 'make-connections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connections))
   common-lisp:nil))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-bgppeer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bgppeer-request-"))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null))
   (new-bgppeer common-lisp:nil :type
    (common-lisp:or new-bgppeer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bgppeer-request 'make-create-bgppeer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-bgppeer))
      (common-lisp:list
       (common-lisp:cons "newBGPPeer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bgppeer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bgppeer-response-"))
   (virtual-interface common-lisp:nil :type
    (common-lisp:or virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bgppeer-response 'make-create-bgppeer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interface))
      (common-lisp:list
       (common-lisp:cons "virtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bgppeer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connection-request-"))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or location-code common-lisp:null))
   (bandwidth (common-lisp:error ":bandwidth is required") :type
    (common-lisp:or bandwidth common-lisp:null))
   (connection-name (common-lisp:error ":connectionname is required") :type
    (common-lisp:or connection-name common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "connectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-interconnect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-interconnect-request-"))
   (interconnect-name (common-lisp:error ":interconnectname is required") :type
    (common-lisp:or interconnect-name common-lisp:null))
   (bandwidth (common-lisp:error ":bandwidth is required") :type
    (common-lisp:or bandwidth common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or location-code common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-interconnect-request
                    'make-create-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-name))
      (common-lisp:list
       (common-lisp:cons "interconnectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lag-request-"))
   (number-of-connections
    (common-lisp:error ":numberofconnections is required") :type
    (common-lisp:or count common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or location-code common-lisp:null))
   (connections-bandwidth
    (common-lisp:error ":connectionsbandwidth is required") :type
    (common-lisp:or bandwidth common-lisp:null))
   (lag-name (common-lisp:error ":lagname is required") :type
    (common-lisp:or lag-name common-lisp:null))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lag-request 'make-create-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-connections))
      (common-lisp:list
       (common-lisp:cons "numberOfConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connections-bandwidth))
      (common-lisp:list
       (common-lisp:cons "connectionsBandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-name))
      (common-lisp:list
       (common-lisp:cons "lagName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-private-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-private-virtual-interface-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (new-private-virtual-interface
    (common-lisp:error ":newprivatevirtualinterface is required") :type
    (common-lisp:or new-private-virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-private-virtual-interface-request
                    'make-create-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-private-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-private-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-private-virtual-interface))
      (common-lisp:list
       (common-lisp:cons "newPrivateVirtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-private-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-public-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-public-virtual-interface-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (new-public-virtual-interface
    (common-lisp:error ":newpublicvirtualinterface is required") :type
    (common-lisp:or new-public-virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-public-virtual-interface-request
                    'make-create-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-public-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-public-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-public-virtual-interface))
      (common-lisp:list
       (common-lisp:cons "newPublicVirtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-public-virtual-interface-request))
   common-lisp:nil))
(common-lisp:deftype customer-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bgppeer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bgppeer-request-"))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bgppeer-request 'make-delete-bgppeer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bgppeer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bgppeer-response-"))
   (virtual-interface common-lisp:nil :type
    (common-lisp:or virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bgppeer-response 'make-delete-bgppeer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interface))
      (common-lisp:list
       (common-lisp:cons "virtualInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bgppeer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connection-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-interconnect-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-interconnect-request-"))
   (interconnect-id (common-lisp:error ":interconnectid is required") :type
    (common-lisp:or interconnect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-interconnect-request
                    'make-delete-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-interconnect-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-interconnect-response-"))
   (interconnect-state common-lisp:nil :type
    (common-lisp:or interconnect-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-interconnect-response
                    'make-delete-interconnect-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-state))
      (common-lisp:list
       (common-lisp:cons "interconnectState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-interconnect-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lag-request-"))
   (lag-id (common-lisp:error ":lagid is required") :type
    (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lag-request 'make-delete-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-interface-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-interface-request-"))
   (virtual-interface-id (common-lisp:error ":virtualinterfaceid is required")
    :type (common-lisp:or virtual-interface-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-interface-request
                    'make-delete-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-interface-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-interface-response-"))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-interface-response
                    'make-delete-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connection-loa-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connection-loa-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or provider-name common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-loa-request
                    'make-describe-connection-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connection-loa-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connection-loa-response-"))
   (loa common-lisp:nil :type (common-lisp:or loa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-loa-response
                    'make-describe-connection-loa-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa))
      (common-lisp:list
       (common-lisp:cons "loa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-loa-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connections-on-interconnect-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-connections-on-interconnect-request-"))
   (interconnect-id (common-lisp:error ":interconnectid is required") :type
    (common-lisp:or interconnect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connections-on-interconnect-request
                    'make-describe-connections-on-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-on-interconnect-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-on-interconnect-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-on-interconnect-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connections-request-"))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connections-request
                    'make-describe-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hosted-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hosted-connections-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hosted-connections-request
                    'make-describe-hosted-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosted-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosted-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hosted-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-interconnect-loa-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-interconnect-loa-request-"))
   (interconnect-id (common-lisp:error ":interconnectid is required") :type
    (common-lisp:or interconnect-id common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or provider-name common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-interconnect-loa-request
                    'make-describe-interconnect-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-interconnect-loa-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-interconnect-loa-response-"))
   (loa common-lisp:nil :type (common-lisp:or loa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-interconnect-loa-response
                    'make-describe-interconnect-loa-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa))
      (common-lisp:list
       (common-lisp:cons "loa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnect-loa-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-interconnects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-interconnects-request-"))
   (interconnect-id common-lisp:nil :type
    (common-lisp:or interconnect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-interconnects-request
                    'make-describe-interconnects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-interconnects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-lags-request-"))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lags-request 'make-describe-lags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-loa-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-loa-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or provider-name common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-loa-request 'make-describe-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-loa-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-loa-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-loa-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-request-"))
   (resource-arns (common-lisp:error ":resourcearns is required") :type
    (common-lisp:or resource-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-response-"))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-response 'make-describe-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-interfaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-interfaces-request-"))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-interfaces-request
                    'make-describe-virtual-interfaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition direct-connect-client-exception
     (directconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       direct-connect-client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'direct-connect-client-exception
                    'direct-connect-client-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition direct-connect-server-exception
     (directconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       direct-connect-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'direct-connect-server-exception
                    'direct-connect-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-connection-from-lag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-connection-from-lag-request-"))
   (connection-id (common-lisp:error ":connectionid is required") :type
    (common-lisp:or connection-id common-lisp:null))
   (lag-id (common-lisp:error ":lagid is required") :type
    (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-connection-from-lag-request
                    'make-disassociate-connection-from-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-from-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-from-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-from-lag-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-tag-keys-exception
     (directconnect-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-tag-keys-exception)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (interconnect (:copier common-lisp:nil)
      (:conc-name "struct-shape-interconnect-"))
   (interconnect-id common-lisp:nil :type
    (common-lisp:or interconnect-id common-lisp:null))
   (interconnect-name common-lisp:nil :type
    (common-lisp:or interconnect-name common-lisp:null))
   (interconnect-state common-lisp:nil :type
    (common-lisp:or interconnect-state common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (bandwidth common-lisp:nil :type
    (common-lisp:or bandwidth common-lisp:null))
   (loa-issue-time common-lisp:nil :type
    (common-lisp:or loa-issue-time common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null))
   (aws-device common-lisp:nil :type
    (common-lisp:or aws-device common-lisp:null)))
 (common-lisp:export (common-lisp:list 'interconnect 'make-interconnect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interconnect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interconnect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-id))
      (common-lisp:list
       (common-lisp:cons "interconnectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-name))
      (common-lisp:list
       (common-lisp:cons "interconnectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnect-state))
      (common-lisp:list
       (common-lisp:cons "interconnectState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-issue-time))
      (common-lisp:list
       (common-lisp:cons "loaIssueTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device))
      (common-lisp:list
       (common-lisp:cons "awsDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interconnect))
   common-lisp:nil))
(common-lisp:deftype interconnect-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype interconnect-list ()
   '(trivial-types:proper-list interconnect))
 (common-lisp:defun |make-interconnect-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list interconnect))
   aws-sdk/generator/shape::members))
(common-lisp:deftype interconnect-name () 'common-lisp:string)
(common-lisp:deftype interconnect-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (interconnects (:copier common-lisp:nil)
      (:conc-name "struct-shape-interconnects-"))
   (interconnects common-lisp:nil :type
    (common-lisp:or interconnect-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'interconnects 'make-interconnects))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interconnects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interconnects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interconnects))
      (common-lisp:list
       (common-lisp:cons "interconnects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interconnects))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lag (:copier common-lisp:nil) (:conc-name "struct-shape-lag-"))
   (connections-bandwidth common-lisp:nil :type
    (common-lisp:or bandwidth common-lisp:null))
   (number-of-connections common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (lag-name common-lisp:nil :type (common-lisp:or lag-name common-lisp:null))
   (lag-state common-lisp:nil :type
    (common-lisp:or lag-state common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (minimum-links common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (aws-device common-lisp:nil :type
    (common-lisp:or aws-device common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connection-list common-lisp:null))
   (allows-hosted-connections common-lisp:nil :type
    (common-lisp:or boolean-flag common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lag 'make-lag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connections-bandwidth))
      (common-lisp:list
       (common-lisp:cons "connectionsBandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-connections))
      (common-lisp:list
       (common-lisp:cons "numberOfConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-name))
      (common-lisp:list
       (common-lisp:cons "lagName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-state))
      (common-lisp:list
       (common-lisp:cons "lagState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-links))
      (common-lisp:list
       (common-lisp:cons "minimumLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-device))
      (common-lisp:list
       (common-lisp:cons "awsDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-hosted-connections))
      (common-lisp:list
       (common-lisp:cons "allowsHostedConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lag))
   common-lisp:nil))
(common-lisp:deftype lag-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lag-list () '(trivial-types:proper-list lag))
 (common-lisp:defun |make-lag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lag-name () 'common-lisp:string)
(common-lisp:deftype lag-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lags (:copier common-lisp:nil) (:conc-name "struct-shape-lags-"))
   (lags common-lisp:nil :type (common-lisp:or lag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lags 'make-lags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lags))
      (common-lisp:list
       (common-lisp:cons "lags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (loa (:copier common-lisp:nil) (:conc-name "struct-shape-loa-"))
   (loa-content common-lisp:nil :type
    (common-lisp:or loa-content common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'loa 'make-loa))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input loa))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input loa))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content))
      (common-lisp:list
       (common-lisp:cons "loaContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loa-content-type))
      (common-lisp:list
       (common-lisp:cons "loaContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input loa))
   common-lisp:nil))
(common-lisp:deftype loa-content ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype loa-content-type () 'common-lisp:string)
(common-lisp:deftype loa-issue-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (location (:copier common-lisp:nil) (:conc-name "struct-shape-location-"))
   (location-code common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (location-name common-lisp:nil :type
    (common-lisp:or location-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-code))
      (common-lisp:list
       (common-lisp:cons "locationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-name))
      (common-lisp:list
       (common-lisp:cons "locationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:deftype location-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype location-list () '(trivial-types:proper-list location))
 (common-lisp:defun |make-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (locations (:copier common-lisp:nil)
      (:conc-name "struct-shape-locations-"))
   (locations common-lisp:nil :type
    (common-lisp:or location-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'locations 'make-locations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input locations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input locations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input locations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (new-bgppeer (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-bgppeer-"))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'new-bgppeer 'make-new-bgppeer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input new-bgppeer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input new-bgppeer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input new-bgppeer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (new-private-virtual-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-private-virtual-interface-"))
   (virtual-interface-name
    (common-lisp:error ":virtualinterfacename is required") :type
    (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan (common-lisp:error ":vlan is required") :type
    (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error ":asn is required") :type
    (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (virtual-gateway-id (common-lisp:error ":virtualgatewayid is required")
    :type (common-lisp:or virtual-gateway-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-private-virtual-interface
                    'make-new-private-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (new-private-virtual-interface-allocation (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-private-virtual-interface-allocation-"))
   (virtual-interface-name
    (common-lisp:error ":virtualinterfacename is required") :type
    (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan (common-lisp:error ":vlan is required") :type
    (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error ":asn is required") :type
    (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-private-virtual-interface-allocation
                    'make-new-private-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-private-virtual-interface-allocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (new-public-virtual-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-public-virtual-interface-"))
   (virtual-interface-name
    (common-lisp:error ":virtualinterfacename is required") :type
    (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan (common-lisp:error ":vlan is required") :type
    (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error ":asn is required") :type
    (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (route-filter-prefixes common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-public-virtual-interface
                    'make-new-public-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-filter-prefixes))
      (common-lisp:list
       (common-lisp:cons "routeFilterPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (new-public-virtual-interface-allocation (:copier common-lisp:nil)
      (:conc-name "struct-shape-new-public-virtual-interface-allocation-"))
   (virtual-interface-name
    (common-lisp:error ":virtualinterfacename is required") :type
    (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan (common-lisp:error ":vlan is required") :type
    (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error ":asn is required") :type
    (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (route-filter-prefixes common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-public-virtual-interface-allocation
                    'make-new-public-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface-allocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface-allocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-filter-prefixes))
      (common-lisp:list
       (common-lisp:cons "routeFilterPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-public-virtual-interface-allocation))
   common-lisp:nil))
(common-lisp:deftype owner-account () 'common-lisp:string)
(common-lisp:deftype partner-name () 'common-lisp:string)
(common-lisp:deftype provider-name () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arn-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-resource-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tag-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun |make-resource-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (route-filter-prefix (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-filter-prefix-"))
   (cidr common-lisp:nil :type (common-lisp:or cidr common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-filter-prefix 'make-route-filter-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-filter-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-filter-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-filter-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-filter-prefix-list ()
   '(trivial-types:proper-list route-filter-prefix))
 (common-lisp:defun |make-route-filter-prefix-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-filter-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype router-config () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (directconnect-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lag-request-"))
   (lag-id (common-lisp:error ":lagid is required") :type
    (common-lisp:or lag-id common-lisp:null))
   (lag-name common-lisp:nil :type (common-lisp:or lag-name common-lisp:null))
   (minimum-links common-lisp:nil :type
    (common-lisp:or count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-lag-request 'make-update-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-lag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-lag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-id))
      (common-lisp:list
       (common-lisp:cons "lagId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-name))
      (common-lisp:list
       (common-lisp:cons "lagName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-links))
      (common-lisp:list
       (common-lisp:cons "minimumLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-lag-request))
   common-lisp:nil))
(common-lisp:deftype vlan () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-"))
   (virtual-gateway-id common-lisp:nil :type
    (common-lisp:or virtual-gateway-id common-lisp:null))
   (virtual-gateway-state common-lisp:nil :type
    (common-lisp:or virtual-gateway-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'virtual-gateway 'make-virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-state))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-list ()
   '(trivial-types:proper-list virtual-gateway))
 (common-lisp:defun |make-virtual-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateways (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateways-"))
   (virtual-gateways common-lisp:nil :type
    (common-lisp:or virtual-gateway-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateways 'make-virtual-gateways))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateways))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateways))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateways))
      (common-lisp:list
       (common-lisp:cons "virtualGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateways))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-interface-"))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null))
   (virtual-interface-type common-lisp:nil :type
    (common-lisp:or virtual-interface-type common-lisp:null))
   (virtual-interface-name common-lisp:nil :type
    (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan common-lisp:nil :type (common-lisp:or vlan common-lisp:null))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null))
   (customer-router-config common-lisp:nil :type
    (common-lisp:or router-config common-lisp:null))
   (virtual-gateway-id common-lisp:nil :type
    (common-lisp:or virtual-gateway-id common-lisp:null))
   (route-filter-prefixes common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null))
   (bgp-peers common-lisp:nil :type
    (common-lisp:or bgppeer-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-interface 'make-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-id))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "connectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-type))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-name))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vlan))
      (common-lisp:list
       (common-lisp:cons "vlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-key))
      (common-lisp:list
       (common-lisp:cons "authKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-address))
      (common-lisp:list
       (common-lisp:cons "amazonAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-address))
      (common-lisp:list
       (common-lisp:cons "customerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-family))
      (common-lisp:list
       (common-lisp:cons "addressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-interface-state))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-router-config))
      (common-lisp:list
       (common-lisp:cons "customerRouterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway-id))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-filter-prefixes))
      (common-lisp:list
       (common-lisp:cons "routeFilterPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-peers))
      (common-lisp:list
       (common-lisp:cons "bgpPeers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-interface))
   common-lisp:nil))
(common-lisp:deftype virtual-interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype virtual-interface-list ()
   '(trivial-types:proper-list virtual-interface))
 (common-lisp:defun |make-virtual-interface-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-interface-name () 'common-lisp:string)
(common-lisp:deftype virtual-interface-state () 'common-lisp:string)
(common-lisp:deftype virtual-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-interfaces (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-interfaces-"))
   (virtual-interfaces common-lisp:nil :type
    (common-lisp:or virtual-interface-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-interfaces 'make-virtual-interfaces))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-interfaces))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-interfaces))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-interfaces))
      (common-lisp:list
       (common-lisp:cons "virtualInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-interfaces))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun allocate-connection-on-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bandwidth connection-name owner-account
                     interconnect-id vlan)
   (common-lisp:declare
    (common-lisp:ignorable bandwidth connection-name owner-account
     interconnect-id vlan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-connection-on-interconnect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateConnectionOnInterconnect"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'allocate-connection-on-interconnect))
(common-lisp:progn
 (common-lisp:defun allocate-hosted-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account bandwidth
                     connection-name vlan)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account bandwidth
     connection-name vlan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-hosted-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateHostedConnection"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'allocate-hosted-connection))
(common-lisp:progn
 (common-lisp:defun allocate-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-private-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-private-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocatePrivateVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'allocate-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun allocate-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-public-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-public-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocatePublicVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'allocate-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun associate-connection-with-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id lag-id)
   (common-lisp:declare (common-lisp:ignorable connection-id lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-connection-with-lag-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateConnectionWithLag"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'associate-connection-with-lag))
(common-lisp:progn
 (common-lisp:defun associate-hosted-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id parent-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-id parent-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-hosted-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateHostedConnection"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'associate-hosted-connection))
(common-lisp:progn
 (common-lisp:defun associate-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id connection-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'associate-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmConnection"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'confirm-connection))
(common-lisp:progn
 (common-lisp:defun confirm-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id virtual-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id virtual-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmPrivateVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'confirm-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConfirmPublicVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'confirm-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-bgppeer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id new-bgppeer)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id new-bgppeer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bgppeer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBGPPeer"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'create-bgppeer))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location bandwidth connection-name
                     lag-id)
   (common-lisp:declare
    (common-lisp:ignorable location bandwidth connection-name lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConnection"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-name bandwidth location
                     lag-id)
   (common-lisp:declare
    (common-lisp:ignorable interconnect-name bandwidth location lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-interconnect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInterconnect"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'create-interconnect))
(common-lisp:progn
 (common-lisp:defun create-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key number-of-connections location
                     connections-bandwidth lag-name connection-id)
   (common-lisp:declare
    (common-lisp:ignorable number-of-connections location connections-bandwidth
     lag-name connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateLag"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'create-lag))
(common-lisp:progn
 (common-lisp:defun create-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-private-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-private-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePrivateVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'create-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-public-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-public-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePublicVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'create-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun delete-bgppeer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id asn
                     customer-address)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id asn customer-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bgppeer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBGPPeer"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'delete-bgppeer))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnection"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-interconnect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInterconnect"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'delete-interconnect))
(common-lisp:progn
 (common-lisp:defun delete-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id)
   (common-lisp:declare (common-lisp:ignorable lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteLag"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'delete-lag))
(common-lisp:progn
 (common-lisp:defun delete-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVirtualInterface"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'delete-virtual-interface))
(common-lisp:progn
 (common-lisp:defun describe-connection-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable connection-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connection-loa-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnectionLoa"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-connection-loa))
(common-lisp:progn
 (common-lisp:defun describe-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnections"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-connections))
(common-lisp:progn
 (common-lisp:defun describe-connections-on-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connections-on-interconnect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnectionsOnInterconnect"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-connections-on-interconnect))
(common-lisp:progn
 (common-lisp:defun describe-hosted-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hosted-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHostedConnections"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-hosted-connections))
(common-lisp:progn
 (common-lisp:defun describe-interconnect-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable interconnect-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-interconnect-loa-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInterconnectLoa"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-interconnect-loa))
(common-lisp:progn
 (common-lisp:defun describe-interconnects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-interconnects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInterconnects"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-interconnects))
(common-lisp:progn
 (common-lisp:defun describe-lags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id)
   (common-lisp:declare (common-lisp:ignorable lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-lags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLags"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-lags))
(common-lisp:progn
 (common-lisp:defun describe-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable connection-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-loa-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoa"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-loa))
(common-lisp:progn
 (common-lisp:defun describe-locations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'directconnect-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeLocations")
                                  ("Version" ,@"2012-10-25"))))
    common-lisp:nil common-lisp:nil
    '(("DirectConnectClientException" . direct-connect-client-exception)
      ("DirectConnectServerException" . direct-connect-server-exception)
      ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
      ("TooManyTagsException" . too-many-tags-exception))))
 (common-lisp:export 'describe-locations))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns)
   (common-lisp:declare (common-lisp:ignorable resource-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-virtual-gateways ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'directconnect-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeVirtualGateways")
                                  ("Version" ,@"2012-10-25"))))
    common-lisp:nil common-lisp:nil
    '(("DirectConnectClientException" . direct-connect-client-exception)
      ("DirectConnectServerException" . direct-connect-server-exception)
      ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
      ("TooManyTagsException" . too-many-tags-exception))))
 (common-lisp:export 'describe-virtual-gateways))
(common-lisp:progn
 (common-lisp:defun describe-virtual-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id virtual-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-id virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-virtual-interfaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVirtualInterfaces"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'describe-virtual-interfaces))
(common-lisp:progn
 (common-lisp:defun disassociate-connection-from-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id lag-id)
   (common-lisp:declare (common-lisp:ignorable connection-id lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-connection-from-lag-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateConnectionFromLag"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'disassociate-connection-from-lag))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id lag-name minimum-links)
   (common-lisp:declare (common-lisp:ignorable lag-id lag-name minimum-links))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'directconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateLag"
                                                        "2012-10-25"))
      common-lisp:nil common-lisp:nil
      '(("DirectConnectClientException" . direct-connect-client-exception)
        ("DirectConnectServerException" . direct-connect-server-exception)
        ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
        ("TooManyTagsException" . too-many-tags-exception)))))
 (common-lisp:export 'update-lag))

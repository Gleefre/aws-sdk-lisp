;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/es/api
  (:use)
  (:nicknames #:aws/es)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/es/api)
(common-lisp:progn
 (common-lisp:defclass es-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "es"))
 (common-lisp:export 'es-request))
(common-lisp:progn
 (common-lisp:define-condition es-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'es-error))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-policies-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-policies-status-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or policy-document common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or option-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-policies-status 'make-access-policies-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-list (common-lisp:error ":tag-list is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-request 'make-add-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-limit-"))
   (limit-name common-lisp:nil :type
    (common-lisp:or limit-name common-lisp:null))
   (limit-values common-lisp:nil :type
    (common-lisp:or limit-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-limit 'make-additional-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-values))
      (common-lisp:list
       (common-lisp:cons "LimitValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-limit-list ()
   '(trivial-types:proper-list additional-limit))
 (common-lisp:defun |make-additional-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype advanced-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-advanced-options|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (advanced-options-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-advanced-options-status-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or advanced-options common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or option-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advanced-options-status 'make-advanced-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition base-exception
     (es-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       base-exception-message)))
 (common-lisp:export
  (common-lisp:list 'base-exception 'base-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (create-elasticsearch-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-elasticsearch-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (elasticsearch-version common-lisp:nil :type
    (common-lisp:or elasticsearch-version-string common-lisp:null))
   (elasticsearch-cluster-config common-lisp:nil :type
    (common-lisp:or elasticsearch-cluster-config common-lisp:null))
   (ebsoptions common-lisp:nil :type
    (common-lisp:or ebsoptions common-lisp:null))
   (access-policies common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (snapshot-options common-lisp:nil :type
    (common-lisp:or snapshot-options common-lisp:null))
   (advanced-options common-lisp:nil :type
    (common-lisp:or advanced-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-elasticsearch-domain-request
                    'make-create-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-elasticsearch-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-elasticsearch-domain-response-"))
   (domain-status common-lisp:nil :type
    (common-lisp:or elasticsearch-domain-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-elasticsearch-domain-response
                    'make-create-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-elasticsearch-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-elasticsearch-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-elasticsearch-domain-request
                    'make-delete-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-elasticsearch-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-elasticsearch-domain-response-"))
   (domain-status common-lisp:nil :type
    (common-lisp:or elasticsearch-domain-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-elasticsearch-domain-response
                    'make-delete-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-domain-config-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-elasticsearch-domain-config-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-config-request
                    'make-describe-elasticsearch-domain-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-domain-config-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-elasticsearch-domain-config-response-"))
   (domain-config (common-lisp:error ":domain-config is required") :type
    (common-lisp:or elasticsearch-domain-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-config-response
                    'make-describe-elasticsearch-domain-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-config))
      (common-lisp:list
       (common-lisp:cons "DomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-elasticsearch-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-request
                    'make-describe-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-elasticsearch-domain-response-"))
   (domain-status (common-lisp:error ":domain-status is required") :type
    (common-lisp:or elasticsearch-domain-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-response
                    'make-describe-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-elasticsearch-domains-request-"))
   (domain-names (common-lisp:error ":domain-names is required") :type
    (common-lisp:or domain-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domains-request
                    'make-describe-elasticsearch-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-elasticsearch-domains-response-"))
   (domain-status-list (common-lisp:error ":domain-status-list is required")
    :type (common-lisp:or elasticsearch-domain-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domains-response
                    'make-describe-elasticsearch-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status-list))
      (common-lisp:list
       (common-lisp:cons "DomainStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-instance-type-limits-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-elasticsearch-instance-type-limits-request-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or espartition-instance-type common-lisp:null))
   (elasticsearch-version
    (common-lisp:error ":elasticsearch-version is required") :type
    (common-lisp:or elasticsearch-version-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-instance-type-limits-request
                    'make-describe-elasticsearch-instance-type-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-elasticsearch-instance-type-limits-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-elasticsearch-instance-type-limits-response-"))
   (limits-by-role common-lisp:nil :type
    (common-lisp:or limits-by-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-instance-type-limits-response
                    'make-describe-elasticsearch-instance-type-limits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits-by-role))
      (common-lisp:list
       (common-lisp:cons "LimitsByRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition disabled-operation-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'disabled-operation-exception)))
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-info-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-info 'make-domain-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-info-list ()
   '(trivial-types:proper-list domain-info))
 (common-lisp:defun |make-domain-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun |make-domain-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ebsoptions (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebsoptions-"))
   (ebsenabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or volume-type common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or integer-class common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-class common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ebsoptions 'make-ebsoptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsenabled))
      (common-lisp:list
       (common-lisp:cons "EBSEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ebsoptions-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebsoptions-status-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or ebsoptions common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or option-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebsoptions-status 'make-ebsoptions-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   common-lisp:nil))
(common-lisp:deftype espartition-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-cluster-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-cluster-config-"))
   (instance-type common-lisp:nil :type
    (common-lisp:or espartition-instance-type common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer-class common-lisp:null))
   (dedicated-master-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (zone-awareness-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dedicated-master-type common-lisp:nil :type
    (common-lisp:or espartition-instance-type common-lisp:null))
   (dedicated-master-count common-lisp:nil :type
    (common-lisp:or integer-class common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-cluster-config
                    'make-elasticsearch-cluster-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-cluster-config-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-cluster-config-status-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or elasticsearch-cluster-config common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or option-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-cluster-config-status
                    'make-elasticsearch-cluster-config-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-domain-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-domain-config-"))
   (elasticsearch-version common-lisp:nil :type
    (common-lisp:or elasticsearch-version-status common-lisp:null))
   (elasticsearch-cluster-config common-lisp:nil :type
    (common-lisp:or elasticsearch-cluster-config-status common-lisp:null))
   (ebsoptions common-lisp:nil :type
    (common-lisp:or ebsoptions-status common-lisp:null))
   (access-policies common-lisp:nil :type
    (common-lisp:or access-policies-status common-lisp:null))
   (snapshot-options common-lisp:nil :type
    (common-lisp:or snapshot-options-status common-lisp:null))
   (advanced-options common-lisp:nil :type
    (common-lisp:or advanced-options-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-domain-config
                    'make-elasticsearch-domain-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-domain-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-domain-status-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (deleted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or service-url common-lisp:null))
   (processing common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (elasticsearch-version common-lisp:nil :type
    (common-lisp:or elasticsearch-version-string common-lisp:null))
   (elasticsearch-cluster-config
    (common-lisp:error ":elasticsearch-cluster-config is required") :type
    (common-lisp:or elasticsearch-cluster-config common-lisp:null))
   (ebsoptions common-lisp:nil :type
    (common-lisp:or ebsoptions common-lisp:null))
   (access-policies common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (snapshot-options common-lisp:nil :type
    (common-lisp:or snapshot-options common-lisp:null))
   (advanced-options common-lisp:nil :type
    (common-lisp:or advanced-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-domain-status
                    'make-elasticsearch-domain-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "Processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elasticsearch-domain-status-list ()
   '(trivial-types:proper-list elasticsearch-domain-status))
 (common-lisp:defun |make-elasticsearch-domain-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            elasticsearch-domain-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype elasticsearch-instance-type-list ()
   '(trivial-types:proper-list espartition-instance-type))
 (common-lisp:defun |make-elasticsearch-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            espartition-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype elasticsearch-version-list ()
   '(trivial-types:proper-list elasticsearch-version-string))
 (common-lisp:defun |make-elasticsearch-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            elasticsearch-version-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (elasticsearch-version-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasticsearch-version-status-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or elasticsearch-version-string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or option-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-version-status
                    'make-elasticsearch-version-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-version-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-version-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-version-status))
   common-lisp:nil))
(common-lisp:deftype elasticsearch-version-string () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-count-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-count-limits-"))
   (minimum-instance-count common-lisp:nil :type
    (common-lisp:or minimum-instance-count common-lisp:null))
   (maximum-instance-count common-lisp:nil :type
    (common-lisp:or maximum-instance-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-count-limits 'make-instance-count-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-instance-count))
      (common-lisp:list
       (common-lisp:cons "MinimumInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-instance-count))
      (common-lisp:list
       (common-lisp:cons "MaximumInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-limits-"))
   (instance-count-limits common-lisp:nil :type
    (common-lisp:or instance-count-limits common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-limits 'make-instance-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-count-limits))
      (common-lisp:list
       (common-lisp:cons "InstanceCountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-limits))
   common-lisp:nil))
(common-lisp:deftype instance-role () 'common-lisp:string)
(common-lisp:deftype integer-class () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-name () 'common-lisp:string)
(common-lisp:deftype limit-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype limit-value-list ()
   '(trivial-types:proper-list limit-value))
 (common-lisp:defun |make-limit-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (limits (:copier common-lisp:nil) (:conc-name "struct-shape-limits-"))
   (storage-types common-lisp:nil :type
    (common-lisp:or storage-type-list common-lisp:null))
   (instance-limits common-lisp:nil :type
    (common-lisp:or instance-limits common-lisp:null))
   (additional-limits common-lisp:nil :type
    (common-lisp:or additional-limit-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'limits 'make-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-types))
      (common-lisp:list
       (common-lisp:cons "StorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-limits))
      (common-lisp:list
       (common-lisp:cons "InstanceLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-limits))
      (common-lisp:list
       (common-lisp:cons "AdditionalLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits-by-role () 'common-lisp:hash-table)
 (common-lisp:defun |make-limits-by-role| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domain-names-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domain-names-response-"))
   (domain-names common-lisp:nil :type
    (common-lisp:or domain-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-response
                    'make-list-domain-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-elasticsearch-instance-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-elasticsearch-instance-types-request-"))
   (elasticsearch-version
    (common-lisp:error ":elasticsearch-version is required") :type
    (common-lisp:or elasticsearch-version-string common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-instance-types-request
                    'make-list-elasticsearch-instance-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-elasticsearch-instance-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-elasticsearch-instance-types-response-"))
   (elasticsearch-instance-types common-lisp:nil :type
    (common-lisp:or elasticsearch-instance-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-instance-types-response
                    'make-list-elasticsearch-instance-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-instance-types))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-elasticsearch-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-elasticsearch-versions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-versions-request
                    'make-list-elasticsearch-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-elasticsearch-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-elasticsearch-versions-response-"))
   (elasticsearch-versions common-lisp:nil :type
    (common-lisp:or elasticsearch-version-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-versions-response
                    'make-list-elasticsearch-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-versions))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-response-"))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-instance-count () 'common-lisp:integer)
(common-lisp:deftype minimum-instance-count () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype option-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (option-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-status-"))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or update-timestamp common-lisp:null))
   (update-date (common-lisp:error ":update-date is required") :type
    (common-lisp:or update-timestamp common-lisp:null))
   (update-version common-lisp:nil :type
    (common-lisp:or uint-value common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or option-state common-lisp:null))
   (pending-deletion common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'option-status 'make-option-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-deletion))
      (common-lisp:list
       (common-lisp:cons "PendingDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-status))
   common-lisp:nil))
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-request 'make-remove-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype service-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-options-"))
   (automated-snapshot-start-hour common-lisp:nil :type
    (common-lisp:or integer-class common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-options 'make-snapshot-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-start-hour))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-options-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-options-status-"))
   (options (common-lisp:error ":options is required") :type
    (common-lisp:or snapshot-options common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or option-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-options-status 'make-snapshot-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   common-lisp:nil))
(common-lisp:deftype storage-sub-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (storage-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-type-"))
   (storage-type-name common-lisp:nil :type
    (common-lisp:or storage-type-name common-lisp:null))
   (storage-sub-type-name common-lisp:nil :type
    (common-lisp:or storage-sub-type-name common-lisp:null))
   (storage-type-limits common-lisp:nil :type
    (common-lisp:or storage-type-limit-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'storage-type 'make-storage-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type-name))
      (common-lisp:list
       (common-lisp:cons "StorageTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-sub-type-name))
      (common-lisp:list
       (common-lisp:cons "StorageSubTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type-limits))
      (common-lisp:list
       (common-lisp:cons "StorageTypeLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-type-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-type-limit-"))
   (limit-name common-lisp:nil :type
    (common-lisp:or limit-name common-lisp:null))
   (limit-values common-lisp:nil :type
    (common-lisp:or limit-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-type-limit 'make-storage-type-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-type-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-type-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-values))
      (common-lisp:list
       (common-lisp:cons "LimitValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-type-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-type-limit-list ()
   '(trivial-types:proper-list storage-type-limit))
 (common-lisp:defun |make-storage-type-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-type-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype storage-type-list ()
   '(trivial-types:proper-list storage-type))
 (common-lisp:defun |make-storage-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-type-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype uint-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (update-elasticsearch-domain-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-elasticsearch-domain-config-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (elasticsearch-cluster-config common-lisp:nil :type
    (common-lisp:or elasticsearch-cluster-config common-lisp:null))
   (ebsoptions common-lisp:nil :type
    (common-lisp:or ebsoptions common-lisp:null))
   (snapshot-options common-lisp:nil :type
    (common-lisp:or snapshot-options common-lisp:null))
   (advanced-options common-lisp:nil :type
    (common-lisp:or advanced-options common-lisp:null))
   (access-policies common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-elasticsearch-domain-config-request
                    'make-update-elasticsearch-domain-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-elasticsearch-domain-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-elasticsearch-domain-config-response-"))
   (domain-config (common-lisp:error ":domain-config is required") :type
    (common-lisp:or elasticsearch-domain-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-elasticsearch-domain-config-response
                    'make-update-elasticsearch-domain-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-config))
      (common-lisp:list
       (common-lisp:cons "DomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-response))
   common-lisp:nil))
(common-lisp:deftype update-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-list)
   (common-lisp:declare (common-lisp:ignorable arn tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/tags"
                                                        "AddTags"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ValidationException" . validation-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun create-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name elasticsearch-version
                     elasticsearch-cluster-config ebsoptions access-policies
                     snapshot-options advanced-options)
   (common-lisp:declare
    (common-lisp:ignorable domain-name elasticsearch-version
     elasticsearch-cluster-config ebsoptions access-policies snapshot-options
     advanced-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/domain"
                                                        "CreateElasticsearchDomain"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("DisabledOperationException" . disabled-operation-exception)
        ("InternalException" . internal-exception)
        ("InvalidTypeException" . invalid-type-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ResourceAlreadyExistsException" . resource-already-exists-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'create-elasticsearch-domain))
(common-lisp:progn
 (common-lisp:defun delete-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DeleteElasticsearchDomain"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'delete-elasticsearch-domain))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeElasticsearchDomain"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'describe-elasticsearch-domain))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-domain-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeElasticsearchDomainConfig"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'describe-elasticsearch-domain-config))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-names)
   (common-lisp:declare (common-lisp:ignorable domain-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-domains-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/domain-info"
                                                        "DescribeElasticsearchDomains"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'describe-elasticsearch-domains))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-instance-type-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name instance-type
                     elasticsearch-version)
   (common-lisp:declare
    (common-lisp:ignorable domain-name instance-type elasticsearch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-instance-type-limits-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/instanceTypeLimits/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'elasticsearch-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-type))))
                                                        "DescribeElasticsearchInstanceTypeLimits"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("InvalidTypeException" . invalid-type-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'describe-elasticsearch-instance-type-limits))
(common-lisp:progn
 (common-lisp:defun list-domain-names ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'es-request :method "GET" :path
                                "/2015-01-01/domain" :params
                                `(("Action" ,@"ListDomainNames")
                                  ("Version" ,@"2015-01-01"))))
    common-lisp:nil common-lisp:nil
    '(("BaseException" . base-exception)
      ("ValidationException" . validation-exception))))
 (common-lisp:export 'list-domain-names))
(common-lisp:progn
 (common-lisp:defun list-elasticsearch-instance-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elasticsearch-version domain-name
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable elasticsearch-version domain-name max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-elasticsearch-instance-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/instanceTypes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'elasticsearch-version))))
                                                        "ListElasticsearchInstanceTypes"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'list-elasticsearch-instance-types))
(common-lisp:progn
 (common-lisp:defun list-elasticsearch-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-elasticsearch-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/es/versions"
                                                        "ListElasticsearchVersions"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'list-elasticsearch-versions))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/tags/"
                                                        "ListTags"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/tags-removal"
                                                        "RemoveTags"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("ValidationException" . validation-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun update-elasticsearch-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name elasticsearch-cluster-config
                     ebsoptions snapshot-options advanced-options
                     access-policies)
   (common-lisp:declare
    (common-lisp:ignorable domain-name elasticsearch-cluster-config ebsoptions
     snapshot-options advanced-options access-policies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-elasticsearch-domain-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateElasticsearchDomainConfig"
                                                        "2015-01-01"))
      common-lisp:nil common-lisp:nil
      '(("BaseException" . base-exception)
        ("InternalException" . internal-exception)
        ("InvalidTypeException" . invalid-type-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)
        ("ValidationException" . validation-exception)))))
 (common-lisp:export 'update-elasticsearch-domain-config))

;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/events/api
  (:use)
  (:nicknames #:aws/events)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/events/api)
(common-lisp:progn
 (common-lisp:defclass events-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "events"))
 (common-lisp:export 'events-request))
(common-lisp:progn
 (common-lisp:define-condition events-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'events-error))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'concurrent-modification-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-request 'make-delete-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-bus-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-bus-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-event-bus-request
                    'make-describe-event-bus-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-bus-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-bus-response-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-bus-response
                    'make-describe-event-bus-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-rule-request 'make-describe-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-rule-response-"))
   (name common-lisp:nil :type (common-lisp:or rule-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (event-pattern common-lisp:nil :type
    (common-lisp:or event-pattern common-lisp:null))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or schedule-expression common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or rule-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or rule-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-rule-response 'make-describe-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-rule-request 'make-disable-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ecs-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecs-parameters-"))
   (task-definition-arn (common-lisp:error ":task-definition-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (task-count common-lisp:nil :type
    (common-lisp:or limit-min1 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ecs-parameters 'make-ecs-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-count))
      (common-lisp:list
       (common-lisp:cons "TaskCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-rule-request 'make-enable-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-rule-request))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:deftype event-pattern () 'common-lisp:string)
(common-lisp:deftype event-resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-resource-list ()
   '(trivial-types:proper-list event-resource))
 (common-lisp:defun |make-event-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-transformer (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-transformer-"))
   (input-paths-map common-lisp:nil :type
    (common-lisp:or transformer-paths common-lisp:null))
   (input-template (common-lisp:error ":input-template is required") :type
    (common-lisp:or transformer-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-transformer 'make-input-transformer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-transformer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-transformer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-paths-map))
      (common-lisp:list
       (common-lisp:cons "InputPathsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-template))
      (common-lisp:list
       (common-lisp:cons "InputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-transformer))
   common-lisp:nil))
(common-lisp:deftype input-transformer-path-key () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-pattern-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-event-pattern-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-parameters-"))
   (partition-key-path (common-lisp:error ":partition-key-path is required")
    :type (common-lisp:or target-partition-key-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-parameters 'make-kinesis-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key-path))
      (common-lisp:list
       (common-lisp:cons "PartitionKeyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-max100 () 'common-lisp:integer)
(common-lisp:deftype limit-min1 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-rule-names-by-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rule-names-by-target-request-"))
   (target-arn (common-lisp:error ":target-arn is required") :type
    (common-lisp:or target-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or limit-max100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rule-names-by-target-request
                    'make-list-rule-names-by-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rule-names-by-target-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rule-names-by-target-response-"))
   (rule-names common-lisp:nil :type
    (common-lisp:or rule-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rule-names-by-target-response
                    'make-list-rule-names-by-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-names))
      (common-lisp:list
       (common-lisp:cons "RuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-request-"))
   (name-prefix common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or limit-max100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-request 'make-list-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-response-"))
   (rules common-lisp:nil :type
    (common-lisp:or rule-response-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-response 'make-list-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-targets-by-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-targets-by-rule-request-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or limit-max100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-targets-by-rule-request
                    'make-list-targets-by-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-targets-by-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-targets-by-rule-response-"))
   (targets common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-targets-by-rule-response
                    'make-list-targets-by-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-length-exceeded-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'policy-length-exceeded-exception)))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-events-request-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or put-events-request-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-events-request 'make-put-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-events-request-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-events-request-entry-"))
   (time common-lisp:nil :type (common-lisp:or event-time common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or event-resource-list common-lisp:null))
   (detail-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (detail common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-events-request-entry 'make-put-events-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-events-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-events-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "Detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-events-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-events-request-entry-list ()
   '(trivial-types:proper-list put-events-request-entry))
 (common-lisp:defun |make-put-events-request-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-events-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-events-response-"))
   (failed-entry-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (entries common-lisp:nil :type
    (common-lisp:or put-events-result-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-events-response 'make-put-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-events-result-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-events-result-entry-"))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-events-result-entry 'make-put-events-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-events-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-events-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-events-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-events-result-entry-list ()
   '(trivial-types:proper-list put-events-result-entry))
 (common-lisp:defun |make-put-events-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list put-events-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-permission-request-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or action common-lisp:null))
   (principal (common-lisp:error ":principal is required") :type
    (common-lisp:or principal common-lisp:null))
   (statement-id (common-lisp:error ":statement-id is required") :type
    (common-lisp:or statement-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-permission-request 'make-put-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or schedule-expression common-lisp:null))
   (event-pattern common-lisp:nil :type
    (common-lisp:or event-pattern common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or rule-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or rule-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-rule-request 'make-put-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-rule-response-"))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-rule-response 'make-put-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-targets-request-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or target-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-targets-request 'make-put-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-targets-response-"))
   (failed-entry-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (failed-entries common-lisp:nil :type
    (common-lisp:or put-targets-result-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-targets-response 'make-put-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entries))
      (common-lisp:list
       (common-lisp:cons "FailedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-targets-result-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-targets-result-entry-"))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-targets-result-entry 'make-put-targets-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-targets-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-targets-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-targets-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-targets-result-entry-list ()
   '(trivial-types:proper-list put-targets-result-entry))
 (common-lisp:defun |make-put-targets-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-targets-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-permission-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-permission-request-"))
   (statement-id (common-lisp:error ":statement-id is required") :type
    (common-lisp:or statement-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-permission-request
                    'make-remove-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-targets-request-"))
   (rule (common-lisp:error ":rule is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (ids (common-lisp:error ":ids is required") :type
    (common-lisp:or target-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-targets-request 'make-remove-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "Ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-targets-response-"))
   (failed-entry-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (failed-entries common-lisp:nil :type
    (common-lisp:or remove-targets-result-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-targets-response 'make-remove-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entries))
      (common-lisp:list
       (common-lisp:cons "FailedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-targets-result-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-targets-result-entry-"))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-targets-result-entry
                    'make-remove-targets-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remove-targets-result-entry-list ()
   '(trivial-types:proper-list remove-targets-result-entry))
 (common-lisp:defun |make-remove-targets-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remove-targets-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (name common-lisp:nil :type (common-lisp:or rule-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (event-pattern common-lisp:nil :type
    (common-lisp:or event-pattern common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or rule-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or rule-description common-lisp:null))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or schedule-expression common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:deftype rule-description () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-name-list () '(trivial-types:proper-list rule-name))
 (common-lisp:defun |make-rule-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-response-list () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rule-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (run-command-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-command-parameters-"))
   (run-command-targets (common-lisp:error ":run-command-targets is required")
    :type (common-lisp:or run-command-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-command-parameters 'make-run-command-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-command-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-command-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-command-targets))
      (common-lisp:list
       (common-lisp:cons "RunCommandTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-command-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-command-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-command-target-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or run-command-target-key common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or run-command-target-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-command-target 'make-run-command-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-command-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-command-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-command-target))
   common-lisp:nil))
(common-lisp:deftype run-command-target-key () 'common-lisp:string)
(common-lisp:deftype run-command-target-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype run-command-target-values ()
   '(trivial-types:proper-list run-command-target-value))
 (common-lisp:defun |make-run-command-target-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            run-command-target-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype run-command-targets ()
   '(trivial-types:proper-list run-command-target))
 (common-lisp:defun |make-run-command-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list run-command-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype statement-id () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target (:copier common-lisp:nil) (:conc-name "struct-shape-target-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or target-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or target-arn common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or target-input common-lisp:null))
   (input-path common-lisp:nil :type
    (common-lisp:or target-input-path common-lisp:null))
   (input-transformer common-lisp:nil :type
    (common-lisp:or input-transformer common-lisp:null))
   (kinesis-parameters common-lisp:nil :type
    (common-lisp:or kinesis-parameters common-lisp:null))
   (run-command-parameters common-lisp:nil :type
    (common-lisp:or run-command-parameters common-lisp:null))
   (ecs-parameters common-lisp:nil :type
    (common-lisp:or ecs-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "InputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-transformer))
      (common-lisp:list
       (common-lisp:cons "InputTransformer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-parameters))
      (common-lisp:list
       (common-lisp:cons "KinesisParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-command-parameters))
      (common-lisp:list
       (common-lisp:cons "RunCommandParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-parameters))
      (common-lisp:list
       (common-lisp:cons "EcsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-id-list () '(trivial-types:proper-list target-id))
 (common-lisp:defun |make-target-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-input () 'common-lisp:string)
(common-lisp:deftype target-input-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-list () '(trivial-types:proper-list target))
 (common-lisp:defun |make-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-partition-key-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (test-event-pattern-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-event-pattern-request-"))
   (event-pattern (common-lisp:error ":event-pattern is required") :type
    (common-lisp:or event-pattern common-lisp:null))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-event-pattern-request
                    'make-test-event-pattern-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-event-pattern-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-event-pattern-response-"))
   (result common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-event-pattern-response
                    'make-test-event-pattern-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-response))
   common-lisp:nil))
(common-lisp:deftype transformer-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transformer-paths () 'common-lisp:hash-table)
 (common-lisp:defun |make-transformer-paths|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ConcurrentModificationException" . concurrent-modification-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun describe-event-bus ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'events-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeEventBus")
                                  ("Version" ,@"2015-10-07"))))
    common-lisp:nil common-lisp:nil
    '(("ResourceNotFoundException" . resource-not-found-exception)
      ("InternalException" . internal-exception))))
 (common-lisp:export 'describe-event-bus))
(common-lisp:progn
 (common-lisp:defun describe-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'describe-rule))
(common-lisp:progn
 (common-lisp:defun disable-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("ConcurrentModificationException" . concurrent-modification-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'disable-rule))
(common-lisp:progn
 (common-lisp:defun enable-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "EnableRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("ConcurrentModificationException" . concurrent-modification-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'enable-rule))
(common-lisp:progn
 (common-lisp:defun list-rule-names-by-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-arn next-token limit)
   (common-lisp:declare (common-lisp:ignorable target-arn next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-rule-names-by-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRuleNamesByTarget"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("InternalException" . internal-exception)))))
 (common-lisp:export 'list-rule-names-by-target))
(common-lisp:progn
 (common-lisp:defun list-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix next-token limit)
   (common-lisp:declare (common-lisp:ignorable name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListRules"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("InternalException" . internal-exception)))))
 (common-lisp:export 'list-rules))
(common-lisp:progn
 (common-lisp:defun list-targets-by-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule next-token limit)
   (common-lisp:declare (common-lisp:ignorable rule next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-targets-by-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTargetsByRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'list-targets-by-rule))
(common-lisp:progn
 (common-lisp:defun put-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries)
   (common-lisp:declare (common-lisp:ignorable entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutEvents"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("InternalException" . internal-exception)))))
 (common-lisp:export 'put-events))
(common-lisp:progn
 (common-lisp:defun put-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action principal statement-id)
   (common-lisp:declare (common-lisp:ignorable action principal statement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutPermission"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("PolicyLengthExceededException" . policy-length-exceeded-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'put-permission))
(common-lisp:progn
 (common-lisp:defun put-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name schedule-expression event-pattern
                     state description role-arn)
   (common-lisp:declare
    (common-lisp:ignorable name schedule-expression event-pattern state
     description role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("InvalidEventPatternException" . invalid-event-pattern-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ConcurrentModificationException" . concurrent-modification-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'put-rule))
(common-lisp:progn
 (common-lisp:defun put-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule targets)
   (common-lisp:declare (common-lisp:ignorable rule targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutTargets"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("ConcurrentModificationException" . concurrent-modification-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'put-targets))
(common-lisp:progn
 (common-lisp:defun remove-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-id)
   (common-lisp:declare (common-lisp:ignorable statement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemovePermission"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'remove-permission))
(common-lisp:progn
 (common-lisp:defun remove-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule ids)
   (common-lisp:declare (common-lisp:ignorable rule ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTargets"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("ResourceNotFoundException" . resource-not-found-exception)
        ("ConcurrentModificationException" . concurrent-modification-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'remove-targets))
(common-lisp:progn
 (common-lisp:defun test-event-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-pattern event)
   (common-lisp:declare (common-lisp:ignorable event-pattern event))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-event-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestEventPattern"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil
      '(("InvalidEventPatternException" . invalid-event-pattern-exception)
        ("InternalException" . internal-exception)))))
 (common-lisp:export 'test-event-pattern))

;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dynamodb/api
  (:use)
  (:nicknames #:aws/dynamodb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dynamodb/api)
(common-lisp:progn
 (common-lisp:defclass dynamodb-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "dynamodb"))
 (common-lisp:export 'dynamodb-request))
(common-lisp:progn
 (common-lisp:define-condition dynamodb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dynamodb-error))
(common-lisp:deftype attribute-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-definition-"))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or key-schema-attribute-name common-lisp:null))
   (attribute-type (common-lisp:error ":attribute-type is required") :type
    (common-lisp:or scalar-attribute-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-definition 'make-attribute-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-definitions ()
   '(trivial-types:proper-list attribute-definition))
 (common-lisp:defun |make-attribute-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-attribute-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-name-list ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun |make-attribute-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-updates () 'common-lisp:hash-table)
 (common-lisp:defun |make-attribute-updates|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-value-"))
   (s common-lisp:nil :type
    (common-lisp:or string-attribute-value common-lisp:null))
   (n common-lisp:nil :type
    (common-lisp:or number-attribute-value common-lisp:null))
   (b common-lisp:nil :type
    (common-lisp:or binary-attribute-value common-lisp:null))
   (ss common-lisp:nil :type
    (common-lisp:or string-set-attribute-value common-lisp:null))
   (ns common-lisp:nil :type
    (common-lisp:or number-set-attribute-value common-lisp:null))
   (bs common-lisp:nil :type
    (common-lisp:or binary-set-attribute-value common-lisp:null))
   (m common-lisp:nil :type
    (common-lisp:or map-attribute-value common-lisp:null))
   (l common-lisp:nil :type
    (common-lisp:or list-attribute-value common-lisp:null))
   (null common-lisp:nil :type
    (common-lisp:or null-attribute-value common-lisp:null))
   (bool common-lisp:nil :type
    (common-lisp:or boolean-attribute-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's))
      (common-lisp:list
       (common-lisp:cons "S"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'n))
      (common-lisp:list
       (common-lisp:cons "N"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'b))
      (common-lisp:list
       (common-lisp:cons "B"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ss))
      (common-lisp:list
       (common-lisp:cons "SS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns))
      (common-lisp:list
       (common-lisp:cons "NS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bs))
      (common-lisp:list
       (common-lisp:cons "BS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm))
      (common-lisp:list
       (common-lisp:cons "M"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'l))
      (common-lisp:list
       (common-lisp:cons "L"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null))
      (common-lisp:list
       (common-lisp:cons "NULL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bool))
      (common-lisp:list
       (common-lisp:cons "BOOL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-value-list ()
   '(trivial-types:proper-list attribute-value))
 (common-lisp:defun |make-attribute-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-value-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-value-update-"))
   (value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or attribute-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-value-update 'make-attribute-value-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attribute-value-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attribute-value-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attribute-value-update))
   common-lisp:nil))
(common-lisp:deftype backfilling () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-item-input-"))
   (request-items (common-lisp:error ":request-items is required") :type
    (common-lisp:or batch-get-request-map common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-item-input 'make-batch-get-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-get-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-get-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-items))
      (common-lisp:list
       (common-lisp:cons "RequestItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-get-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-item-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-item-output-"))
   (responses common-lisp:nil :type
    (common-lisp:or batch-get-response-map common-lisp:null))
   (unprocessed-keys common-lisp:nil :type
    (common-lisp:or batch-get-request-map common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity-multiple common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-item-output 'make-batch-get-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'responses))
      (common-lisp:list
       (common-lisp:cons "Responses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-keys))
      (common-lisp:list
       (common-lisp:cons "UnprocessedKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-request-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-batch-get-request-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype batch-get-response-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-batch-get-response-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-write-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-write-item-input-"))
   (request-items (common-lisp:error ":request-items is required") :type
    (common-lisp:or batch-write-item-request-map common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (return-item-collection-metrics common-lisp:nil :type
    (common-lisp:or return-item-collection-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-write-item-input 'make-batch-write-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-items))
      (common-lisp:list
       (common-lisp:cons "RequestItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ReturnItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-write-item-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-write-item-output-"))
   (unprocessed-items common-lisp:nil :type
    (common-lisp:or batch-write-item-request-map common-lisp:null))
   (item-collection-metrics common-lisp:nil :type
    (common-lisp:or item-collection-metrics-per-table common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity-multiple common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-write-item-output 'make-batch-write-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-items))
      (common-lisp:list
       (common-lisp:cons "UnprocessedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-write-item-request-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-batch-write-item-request-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype binary-attribute-value ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype binary-set-attribute-value ()
   '(trivial-types:proper-list binary-attribute-value))
 (common-lisp:defun |make-binary-set-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list binary-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean-attribute-value () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (capacity (:copier common-lisp:nil) (:conc-name "struct-shape-capacity-"))
   (capacity-units common-lisp:nil :type
    (common-lisp:or consumed-capacity-units common-lisp:null)))
 (common-lisp:export (common-lisp:list 'capacity 'make-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-units))
      (common-lisp:list
       (common-lisp:cons "CapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-condition-"))
   (attribute-value-list common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null))
   (comparison-operator (common-lisp:error ":comparison-operator is required")
    :type (common-lisp:or comparison-operator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-value-list))
      (common-lisp:list
       (common-lisp:cons "AttributeValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype condition-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conditional-check-failed-exception
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conditional-check-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conditional-check-failed-exception
                    'conditional-check-failed-exception-message)))
(common-lisp:deftype conditional-operator () 'common-lisp:string)
(common-lisp:deftype consistent-read () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (consumed-capacity (:copier common-lisp:nil)
      (:conc-name "struct-shape-consumed-capacity-"))
   (table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (capacity-units common-lisp:nil :type
    (common-lisp:or consumed-capacity-units common-lisp:null))
   (table common-lisp:nil :type (common-lisp:or capacity common-lisp:null))
   (local-secondary-indexes common-lisp:nil :type
    (common-lisp:or secondary-indexes-capacity-map common-lisp:null))
   (global-secondary-indexes common-lisp:nil :type
    (common-lisp:or secondary-indexes-capacity-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'consumed-capacity 'make-consumed-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input consumed-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input consumed-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-units))
      (common-lisp:list
       (common-lisp:cons "CapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "LocalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input consumed-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype consumed-capacity-multiple ()
   '(trivial-types:proper-list consumed-capacity))
 (common-lisp:defun |make-consumed-capacity-multiple|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list consumed-capacity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype consumed-capacity-units () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-secondary-index-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-secondary-index-action-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or index-name common-lisp:null))
   (key-schema (common-lisp:error ":key-schema is required") :type
    (common-lisp:or key-schema common-lisp:null))
   (projection (common-lisp:error ":projection is required") :type
    (common-lisp:or projection common-lisp:null))
   (provisioned-throughput
    (common-lisp:error ":provisioned-throughput is required") :type
    (common-lisp:or provisioned-throughput common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-secondary-index-action
                    'make-create-global-secondary-index-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-secondary-index-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-secondary-index-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-secondary-index-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-table-input-"))
   (attribute-definitions
    (common-lisp:error ":attribute-definitions is required") :type
    (common-lisp:or attribute-definitions common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (key-schema (common-lisp:error ":key-schema is required") :type
    (common-lisp:or key-schema common-lisp:null))
   (local-secondary-indexes common-lisp:nil :type
    (common-lisp:or local-secondary-index-list common-lisp:null))
   (global-secondary-indexes common-lisp:nil :type
    (common-lisp:or global-secondary-index-list common-lisp:null))
   (provisioned-throughput
    (common-lisp:error ":provisioned-throughput is required") :type
    (common-lisp:or provisioned-throughput common-lisp:null))
   (stream-specification common-lisp:nil :type
    (common-lisp:or stream-specification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-table-input 'make-create-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-definitions))
      (common-lisp:list
       (common-lisp:cons "AttributeDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "LocalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-specification))
      (common-lisp:list
       (common-lisp:cons "StreamSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-table-output-"))
   (table-description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-table-output 'make-create-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-description))
      (common-lisp:list
       (common-lisp:cons "TableDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-table-output))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-secondary-index-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-secondary-index-action-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or index-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-secondary-index-action
                    'make-delete-global-secondary-index-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-secondary-index-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-secondary-index-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-secondary-index-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-item-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or key common-lisp:null))
   (expected common-lisp:nil :type
    (common-lisp:or expected-attribute-map common-lisp:null))
   (conditional-operator common-lisp:nil :type
    (common-lisp:or conditional-operator common-lisp:null))
   (return-values common-lisp:nil :type
    (common-lisp:or return-value common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (return-item-collection-metrics common-lisp:nil :type
    (common-lisp:or return-item-collection-metrics common-lisp:null))
   (condition-expression common-lisp:nil :type
    (common-lisp:or condition-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null))
   (expression-attribute-values common-lisp:nil :type
    (common-lisp:or expression-attribute-value-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-item-input 'make-delete-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected))
      (common-lisp:list
       (common-lisp:cons "Expected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-operator))
      (common-lisp:list
       (common-lisp:cons "ConditionalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-values))
      (common-lisp:list
       (common-lisp:cons "ReturnValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ReturnItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-expression))
      (common-lisp:list
       (common-lisp:cons "ConditionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-values))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-item-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-item-output-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-map common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null))
   (item-collection-metrics common-lisp:nil :type
    (common-lisp:or item-collection-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-item-output 'make-delete-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-request-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delete-request 'make-delete-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-table-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-table-input 'make-delete-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-table-output-"))
   (table-description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-table-output 'make-delete-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-description))
      (common-lisp:list
       (common-lisp:cons "TableDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-limits-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-limits-input-")))
 (common-lisp:export
  (common-lisp:list 'describe-limits-input 'make-describe-limits-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-limits-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-limits-output-"))
   (account-max-read-capacity-units common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null))
   (account-max-write-capacity-units common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null))
   (table-max-read-capacity-units common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null))
   (table-max-write-capacity-units common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-limits-output 'make-describe-limits-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-max-read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "AccountMaxReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-max-write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "AccountMaxWriteCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-max-read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "TableMaxReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-max-write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "TableMaxWriteCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-input 'make-describe-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-output-"))
   (table common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-output 'make-describe-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-time-to-live-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-time-to-live-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-time-to-live-input
                    'make-describe-time-to-live-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-to-live-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-to-live-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-to-live-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-time-to-live-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-time-to-live-output-"))
   (time-to-live-description common-lisp:nil :type
    (common-lisp:or time-to-live-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-time-to-live-output
                    'make-describe-time-to-live-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-to-live-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-to-live-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-description))
      (common-lisp:list
       (common-lisp:cons "TimeToLiveDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-to-live-output))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype expected-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-expected-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (expected-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-expected-attribute-value-"))
   (value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (exists common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or comparison-operator common-lisp:null))
   (attribute-value-list common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expected-attribute-value 'make-expected-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          expected-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          expected-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exists))
      (common-lisp:list
       (common-lisp:cons "Exists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-value-list))
      (common-lisp:list
       (common-lisp:cons "AttributeValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          expected-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expression-attribute-name-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-expression-attribute-name-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype expression-attribute-name-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype expression-attribute-value-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-expression-attribute-value-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype expression-attribute-value-variable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-condition-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-filter-condition-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-item-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or key common-lisp:null))
   (attributes-to-get common-lisp:nil :type
    (common-lisp:or attribute-name-list common-lisp:null))
   (consistent-read common-lisp:nil :type
    (common-lisp:or consistent-read common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (projection-expression common-lisp:nil :type
    (common-lisp:or projection-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-item-input 'make-get-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes-to-get))
      (common-lisp:list
       (common-lisp:cons "AttributesToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistent-read))
      (common-lisp:list
       (common-lisp:cons "ConsistentRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'projection-expression))
      (common-lisp:list
       (common-lisp:cons "ProjectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-item-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-item-output-"))
   (item common-lisp:nil :type (common-lisp:or attribute-map common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-item-output 'make-get-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (global-secondary-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-secondary-index-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or index-name common-lisp:null))
   (key-schema (common-lisp:error ":key-schema is required") :type
    (common-lisp:or key-schema common-lisp:null))
   (projection (common-lisp:error ":projection is required") :type
    (common-lisp:or projection common-lisp:null))
   (provisioned-throughput
    (common-lisp:error ":provisioned-throughput is required") :type
    (common-lisp:or provisioned-throughput common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-secondary-index 'make-global-secondary-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (global-secondary-index-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-secondary-index-description-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or key-schema common-lisp:null))
   (projection common-lisp:nil :type
    (common-lisp:or projection common-lisp:null))
   (index-status common-lisp:nil :type
    (common-lisp:or index-status common-lisp:null))
   (backfilling common-lisp:nil :type
    (common-lisp:or backfilling common-lisp:null))
   (provisioned-throughput common-lisp:nil :type
    (common-lisp:or provisioned-throughput-description common-lisp:null))
   (index-size-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (index-arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-secondary-index-description
                    'make-global-secondary-index-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "IndexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfilling))
      (common-lisp:list
       (common-lisp:cons "Backfilling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-size-bytes))
      (common-lisp:list
       (common-lisp:cons "IndexSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-secondary-index-description-list ()
   '(trivial-types:proper-list global-secondary-index-description))
 (common-lisp:defun |make-global-secondary-index-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            global-secondary-index-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype global-secondary-index-list ()
   '(trivial-types:proper-list global-secondary-index))
 (common-lisp:defun |make-global-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-secondary-index-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-secondary-index-update-"))
   (update common-lisp:nil :type
    (common-lisp:or update-global-secondary-index-action common-lisp:null))
   (create common-lisp:nil :type
    (common-lisp:or create-global-secondary-index-action common-lisp:null))
   (delete common-lisp:nil :type
    (common-lisp:or delete-global-secondary-index-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-secondary-index-update
                    'make-global-secondary-index-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "Update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create))
      (common-lisp:list
       (common-lisp:cons "Create"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete))
      (common-lisp:list
       (common-lisp:cons "Delete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-secondary-index-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-secondary-index-update-list ()
   '(trivial-types:proper-list global-secondary-index-update))
 (common-lisp:defun |make-global-secondary-index-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            global-secondary-index-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype index-name () 'common-lisp:string)
(common-lisp:deftype index-status () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'internal-server-error-message)))
(common-lisp:progn
 (common-lisp:deftype item-collection-key-attribute-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-item-collection-key-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (item-collection-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-item-collection-metrics-"))
   (item-collection-key common-lisp:nil :type
    (common-lisp:or item-collection-key-attribute-map common-lisp:null))
   (size-estimate-range-gb common-lisp:nil :type
    (common-lisp:or item-collection-size-estimate-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'item-collection-metrics 'make-item-collection-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          item-collection-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          item-collection-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-collection-key))
      (common-lisp:list
       (common-lisp:cons "ItemCollectionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-estimate-range-gb))
      (common-lisp:list
       (common-lisp:cons "SizeEstimateRangeGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          item-collection-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype item-collection-metrics-multiple ()
   '(trivial-types:proper-list item-collection-metrics))
 (common-lisp:defun |make-item-collection-metrics-multiple|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item-collection-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype item-collection-metrics-per-table ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-item-collection-metrics-per-table|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype item-collection-size-estimate-bound ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype item-collection-size-estimate-range ()
   '(trivial-types:proper-list item-collection-size-estimate-bound))
 (common-lisp:defun |make-item-collection-size-estimate-range|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            item-collection-size-estimate-bound))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition item-collection-size-limit-exceeded-exception
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       item-collection-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'item-collection-size-limit-exceeded-exception
                    'item-collection-size-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype item-list () '(trivial-types:proper-list attribute-map))
 (common-lisp:defun |make-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype key () 'common-lisp:hash-table)
 (common-lisp:defun |make-key| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype key-conditions () 'common-lisp:hash-table)
 (common-lisp:defun |make-key-conditions| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype key-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list key))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype key-schema ()
   '(trivial-types:proper-list key-schema-element))
 (common-lisp:defun |make-key-schema|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-schema-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key-schema-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-schema-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-schema-element-"))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or key-schema-attribute-name common-lisp:null))
   (key-type (common-lisp:error ":key-type is required") :type
    (common-lisp:or key-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-schema-element 'make-key-schema-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-schema-element))
   common-lisp:nil))
(common-lisp:deftype key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (keys-and-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-keys-and-attributes-"))
   (keys (common-lisp:error ":keys is required") :type
    (common-lisp:or key-list common-lisp:null))
   (attributes-to-get common-lisp:nil :type
    (common-lisp:or attribute-name-list common-lisp:null))
   (consistent-read common-lisp:nil :type
    (common-lisp:or consistent-read common-lisp:null))
   (projection-expression common-lisp:nil :type
    (common-lisp:or projection-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'keys-and-attributes 'make-keys-and-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keys-and-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keys-and-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes-to-get))
      (common-lisp:list
       (common-lisp:cons "AttributesToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistent-read))
      (common-lisp:list
       (common-lisp:cons "ConsistentRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'projection-expression))
      (common-lisp:list
       (common-lisp:cons "ProjectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keys-and-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype list-attribute-value ()
   '(trivial-types:proper-list attribute-value))
 (common-lisp:defun |make-list-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tables-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tables-input-"))
   (exclusive-start-table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or list-tables-input-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tables-input 'make-list-tables-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusive-start-table-name))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-input))
   common-lisp:nil))
(common-lisp:deftype list-tables-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tables-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tables-output-"))
   (table-names common-lisp:nil :type
    (common-lisp:or table-name-list common-lisp:null))
   (last-evaluated-table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tables-output 'make-list-tables-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-names))
      (common-lisp:list
       (common-lisp:cons "TableNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-evaluated-table-name))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-of-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-of-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-of-resource-input
                    'make-list-tags-of-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-of-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-of-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-of-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-of-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-of-resource-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-of-resource-output
                    'make-list-tags-of-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-of-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-of-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-of-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (local-secondary-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-local-secondary-index-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or index-name common-lisp:null))
   (key-schema (common-lisp:error ":key-schema is required") :type
    (common-lisp:or key-schema common-lisp:null))
   (projection (common-lisp:error ":projection is required") :type
    (common-lisp:or projection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'local-secondary-index 'make-local-secondary-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          local-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          local-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          local-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (local-secondary-index-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-local-secondary-index-description-"))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or key-schema common-lisp:null))
   (projection common-lisp:nil :type
    (common-lisp:or projection common-lisp:null))
   (index-size-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (index-arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'local-secondary-index-description
                    'make-local-secondary-index-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          local-secondary-index-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          local-secondary-index-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-size-bytes))
      (common-lisp:list
       (common-lisp:cons "IndexSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          local-secondary-index-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype local-secondary-index-description-list ()
   '(trivial-types:proper-list local-secondary-index-description))
 (common-lisp:defun |make-local-secondary-index-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            local-secondary-index-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype local-secondary-index-list ()
   '(trivial-types:proper-list local-secondary-index))
 (common-lisp:defun |make-local-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list local-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype map-attribute-value () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-attribute-value|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype next-token-string () 'common-lisp:string)
(common-lisp:deftype non-key-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-key-attribute-name-list ()
   '(trivial-types:proper-list non-key-attribute-name))
 (common-lisp:defun |make-non-key-attribute-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-key-attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype null-attribute-value () 'common-lisp:boolean)
(common-lisp:deftype number-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype number-set-attribute-value ()
   '(trivial-types:proper-list number-attribute-value))
 (common-lisp:defun |make-number-set-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype positive-integer-object () 'common-lisp:integer)
(common-lisp:deftype positive-long-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (projection (:copier common-lisp:nil)
      (:conc-name "struct-shape-projection-"))
   (projection-type common-lisp:nil :type
    (common-lisp:or projection-type common-lisp:null))
   (non-key-attributes common-lisp:nil :type
    (common-lisp:or non-key-attribute-name-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'projection 'make-projection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input projection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input projection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection-type))
      (common-lisp:list
       (common-lisp:cons "ProjectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-key-attributes))
      (common-lisp:list
       (common-lisp:cons "NonKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input projection))
   common-lisp:nil))
(common-lisp:deftype projection-expression () 'common-lisp:string)
(common-lisp:deftype projection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-throughput (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-throughput-"))
   (read-capacity-units (common-lisp:error ":read-capacity-units is required")
    :type (common-lisp:or positive-long-object common-lisp:null))
   (write-capacity-units
    (common-lisp:error ":write-capacity-units is required") :type
    (common-lisp:or positive-long-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput 'make-provisioned-throughput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "WriteCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-throughput-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioned-throughput-description-"))
   (last-increase-date-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (last-decrease-date-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (number-of-decreases-today common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null))
   (read-capacity-units common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null))
   (write-capacity-units common-lisp:nil :type
    (common-lisp:or positive-long-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-description
                    'make-provisioned-throughput-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-increase-date-time))
      (common-lisp:list
       (common-lisp:cons "LastIncreaseDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-decrease-date-time))
      (common-lisp:list
       (common-lisp:cons "LastDecreaseDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-decreases-today))
      (common-lisp:list
       (common-lisp:cons "NumberOfDecreasesToday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "WriteCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioned-throughput-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition provisioned-throughput-exceeded-exception
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       provisioned-throughput-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-exceeded-exception
                    'provisioned-throughput-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-item-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or put-item-input-attribute-map common-lisp:null))
   (expected common-lisp:nil :type
    (common-lisp:or expected-attribute-map common-lisp:null))
   (return-values common-lisp:nil :type
    (common-lisp:or return-value common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (return-item-collection-metrics common-lisp:nil :type
    (common-lisp:or return-item-collection-metrics common-lisp:null))
   (conditional-operator common-lisp:nil :type
    (common-lisp:or conditional-operator common-lisp:null))
   (condition-expression common-lisp:nil :type
    (common-lisp:or condition-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null))
   (expression-attribute-values common-lisp:nil :type
    (common-lisp:or expression-attribute-value-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'put-item-input 'make-put-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected))
      (common-lisp:list
       (common-lisp:cons "Expected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-values))
      (common-lisp:list
       (common-lisp:cons "ReturnValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ReturnItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-operator))
      (common-lisp:list
       (common-lisp:cons "ConditionalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-expression))
      (common-lisp:list
       (common-lisp:cons "ConditionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-values))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-item-input-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-put-item-input-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-item-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-item-output-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-map common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null))
   (item-collection-metrics common-lisp:nil :type
    (common-lisp:or item-collection-metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'put-item-output 'make-put-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-request-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or put-item-input-attribute-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'put-request 'make-put-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (select common-lisp:nil :type (common-lisp:or select common-lisp:null))
   (attributes-to-get common-lisp:nil :type
    (common-lisp:or attribute-name-list common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null))
   (consistent-read common-lisp:nil :type
    (common-lisp:or consistent-read common-lisp:null))
   (key-conditions common-lisp:nil :type
    (common-lisp:or key-conditions common-lisp:null))
   (query-filter common-lisp:nil :type
    (common-lisp:or filter-condition-map common-lisp:null))
   (conditional-operator common-lisp:nil :type
    (common-lisp:or conditional-operator common-lisp:null))
   (scan-index-forward common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (exclusive-start-key common-lisp:nil :type
    (common-lisp:or key common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (projection-expression common-lisp:nil :type
    (common-lisp:or projection-expression common-lisp:null))
   (filter-expression common-lisp:nil :type
    (common-lisp:or condition-expression common-lisp:null))
   (key-condition-expression common-lisp:nil :type
    (common-lisp:or key-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null))
   (expression-attribute-values common-lisp:nil :type
    (common-lisp:or expression-attribute-value-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-input 'make-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select))
      (common-lisp:list
       (common-lisp:cons "Select"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes-to-get))
      (common-lisp:list
       (common-lisp:cons "AttributesToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistent-read))
      (common-lisp:list
       (common-lisp:cons "ConsistentRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-conditions))
      (common-lisp:list
       (common-lisp:cons "KeyConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-filter))
      (common-lisp:list
       (common-lisp:cons "QueryFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-operator))
      (common-lisp:list
       (common-lisp:cons "ConditionalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-index-forward))
      (common-lisp:list
       (common-lisp:cons "ScanIndexForward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-start-key))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'projection-expression))
      (common-lisp:list
       (common-lisp:cons "ProjectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-condition-expression))
      (common-lisp:list
       (common-lisp:cons "KeyConditionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-values))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-output-"))
   (items common-lisp:nil :type (common-lisp:or item-list common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (scanned-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (last-evaluated-key common-lisp:nil :type
    (common-lisp:or key common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-output 'make-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scanned-count))
      (common-lisp:list
       (common-lisp:cons "ScannedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-key))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-output))
   common-lisp:nil))
(common-lisp:deftype resource-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (dynamodb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype return-consumed-capacity () 'common-lisp:string)
(common-lisp:deftype return-item-collection-metrics () 'common-lisp:string)
(common-lisp:deftype return-value () 'common-lisp:string)
(common-lisp:deftype scalar-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scan-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-scan-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or index-name common-lisp:null))
   (attributes-to-get common-lisp:nil :type
    (common-lisp:or attribute-name-list common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null))
   (select common-lisp:nil :type (common-lisp:or select common-lisp:null))
   (scan-filter common-lisp:nil :type
    (common-lisp:or filter-condition-map common-lisp:null))
   (conditional-operator common-lisp:nil :type
    (common-lisp:or conditional-operator common-lisp:null))
   (exclusive-start-key common-lisp:nil :type
    (common-lisp:or key common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (total-segments common-lisp:nil :type
    (common-lisp:or scan-total-segments common-lisp:null))
   (segment common-lisp:nil :type
    (common-lisp:or scan-segment common-lisp:null))
   (projection-expression common-lisp:nil :type
    (common-lisp:or projection-expression common-lisp:null))
   (filter-expression common-lisp:nil :type
    (common-lisp:or condition-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null))
   (expression-attribute-values common-lisp:nil :type
    (common-lisp:or expression-attribute-value-map common-lisp:null))
   (consistent-read common-lisp:nil :type
    (common-lisp:or consistent-read common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scan-input 'make-scan-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes-to-get))
      (common-lisp:list
       (common-lisp:cons "AttributesToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select))
      (common-lisp:list
       (common-lisp:cons "Select"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-filter))
      (common-lisp:list
       (common-lisp:cons "ScanFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-operator))
      (common-lisp:list
       (common-lisp:cons "ConditionalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-start-key))
      (common-lisp:list
       (common-lisp:cons "ExclusiveStartKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-segments))
      (common-lisp:list
       (common-lisp:cons "TotalSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "Segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'projection-expression))
      (common-lisp:list
       (common-lisp:cons "ProjectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-values))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistent-read))
      (common-lisp:list
       (common-lisp:cons "ConsistentRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scan-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-scan-output-"))
   (items common-lisp:nil :type (common-lisp:or item-list common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (scanned-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (last-evaluated-key common-lisp:nil :type
    (common-lisp:or key common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scan-output 'make-scan-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scanned-count))
      (common-lisp:list
       (common-lisp:cons "ScannedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-key))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-output))
   common-lisp:nil))
(common-lisp:deftype scan-segment () 'common-lisp:integer)
(common-lisp:deftype scan-total-segments () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype secondary-indexes-capacity-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-secondary-indexes-capacity-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype select () 'common-lisp:string)
(common-lisp:deftype stream-arn () 'common-lisp:string)
(common-lisp:deftype stream-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-specification-"))
   (stream-enabled common-lisp:nil :type
    (common-lisp:or stream-enabled common-lisp:null))
   (stream-view-type common-lisp:nil :type
    (common-lisp:or stream-view-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-specification 'make-stream-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-enabled))
      (common-lisp:list
       (common-lisp:cons "StreamEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view-type))
      (common-lisp:list
       (common-lisp:cons "StreamViewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-specification))
   common-lisp:nil))
(common-lisp:deftype stream-view-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-set-attribute-value ()
   '(trivial-types:proper-list string-attribute-value))
 (common-lisp:defun |make-string-set-attribute-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-description-"))
   (attribute-definitions common-lisp:nil :type
    (common-lisp:or attribute-definitions common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or key-schema common-lisp:null))
   (table-status common-lisp:nil :type
    (common-lisp:or table-status common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (provisioned-throughput common-lisp:nil :type
    (common-lisp:or provisioned-throughput-description common-lisp:null))
   (table-size-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (table-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (local-secondary-indexes common-lisp:nil :type
    (common-lisp:or local-secondary-index-description-list common-lisp:null))
   (global-secondary-indexes common-lisp:nil :type
    (common-lisp:or global-secondary-index-description-list common-lisp:null))
   (stream-specification common-lisp:nil :type
    (common-lisp:or stream-specification common-lisp:null))
   (latest-stream-label common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-stream-arn common-lisp:nil :type
    (common-lisp:or stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-description 'make-table-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-definitions))
      (common-lisp:list
       (common-lisp:cons "AttributeDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-status))
      (common-lisp:list
       (common-lisp:cons "TableStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-size-bytes))
      (common-lisp:list
       (common-lisp:cons "TableSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-arn))
      (common-lisp:list
       (common-lisp:cons "TableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "LocalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-specification))
      (common-lisp:list
       (common-lisp:cons "StreamSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-stream-label))
      (common-lisp:list
       (common-lisp:cons "LatestStreamLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LatestStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-description))
   common-lisp:nil))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-name-list ()
   '(trivial-types:proper-list table-name))
 (common-lisp:defun |make-table-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key-string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list tag-key-string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:deftype tag-value-string () 'common-lisp:string)
(common-lisp:deftype time-to-live-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-to-live-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-to-live-description-"))
   (time-to-live-status common-lisp:nil :type
    (common-lisp:or time-to-live-status common-lisp:null))
   (attribute-name common-lisp:nil :type
    (common-lisp:or time-to-live-attribute-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-to-live-description 'make-time-to-live-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-to-live-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-to-live-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live-status))
      (common-lisp:list
       (common-lisp:cons "TimeToLiveStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-to-live-description))
   common-lisp:nil))
(common-lisp:deftype time-to-live-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (time-to-live-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-to-live-specification-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or time-to-live-enabled common-lisp:null))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or time-to-live-attribute-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-to-live-specification
                    'make-time-to-live-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-to-live-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-to-live-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-to-live-specification))
   common-lisp:nil))
(common-lisp:deftype time-to-live-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn-string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:deftype update-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-global-secondary-index-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-global-secondary-index-action-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or index-name common-lisp:null))
   (provisioned-throughput
    (common-lisp:error ":provisioned-throughput is required") :type
    (common-lisp:or provisioned-throughput common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-global-secondary-index-action
                    'make-update-global-secondary-index-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-global-secondary-index-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-global-secondary-index-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-global-secondary-index-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-item-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-item-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or key common-lisp:null))
   (attribute-updates common-lisp:nil :type
    (common-lisp:or attribute-updates common-lisp:null))
   (expected common-lisp:nil :type
    (common-lisp:or expected-attribute-map common-lisp:null))
   (conditional-operator common-lisp:nil :type
    (common-lisp:or conditional-operator common-lisp:null))
   (return-values common-lisp:nil :type
    (common-lisp:or return-value common-lisp:null))
   (return-consumed-capacity common-lisp:nil :type
    (common-lisp:or return-consumed-capacity common-lisp:null))
   (return-item-collection-metrics common-lisp:nil :type
    (common-lisp:or return-item-collection-metrics common-lisp:null))
   (update-expression common-lisp:nil :type
    (common-lisp:or update-expression common-lisp:null))
   (condition-expression common-lisp:nil :type
    (common-lisp:or condition-expression common-lisp:null))
   (expression-attribute-names common-lisp:nil :type
    (common-lisp:or expression-attribute-name-map common-lisp:null))
   (expression-attribute-values common-lisp:nil :type
    (common-lisp:or expression-attribute-value-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-item-input 'make-update-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-item-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected))
      (common-lisp:list
       (common-lisp:cons "Expected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-operator))
      (common-lisp:list
       (common-lisp:cons "ConditionalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-values))
      (common-lisp:list
       (common-lisp:cons "ReturnValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ReturnConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ReturnItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-expression))
      (common-lisp:list
       (common-lisp:cons "UpdateExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-expression))
      (common-lisp:list
       (common-lisp:cons "ConditionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expression-attribute-values))
      (common-lisp:list
       (common-lisp:cons "ExpressionAttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-item-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-item-output-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-map common-lisp:null))
   (consumed-capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null))
   (item-collection-metrics common-lisp:nil :type
    (common-lisp:or item-collection-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-item-output 'make-update-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-capacity))
      (common-lisp:list
       (common-lisp:cons "ConsumedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'item-collection-metrics))
      (common-lisp:list
       (common-lisp:cons "ItemCollectionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-input-"))
   (attribute-definitions common-lisp:nil :type
    (common-lisp:or attribute-definitions common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (provisioned-throughput common-lisp:nil :type
    (common-lisp:or provisioned-throughput common-lisp:null))
   (global-secondary-index-updates common-lisp:nil :type
    (common-lisp:or global-secondary-index-update-list common-lisp:null))
   (stream-specification common-lisp:nil :type
    (common-lisp:or stream-specification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-input 'make-update-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-definitions))
      (common-lisp:list
       (common-lisp:cons "AttributeDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-index-updates))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-specification))
      (common-lisp:list
       (common-lisp:cons "StreamSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-output-"))
   (table-description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-output 'make-update-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-description))
      (common-lisp:list
       (common-lisp:cons "TableDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-time-to-live-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-time-to-live-input-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (time-to-live-specification
    (common-lisp:error ":time-to-live-specification is required") :type
    (common-lisp:or time-to-live-specification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-time-to-live-input
                    'make-update-time-to-live-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-time-to-live-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-time-to-live-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-specification))
      (common-lisp:list
       (common-lisp:cons "TimeToLiveSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-time-to-live-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-time-to-live-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-time-to-live-output-"))
   (time-to-live-specification common-lisp:nil :type
    (common-lisp:or time-to-live-specification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-time-to-live-output
                    'make-update-time-to-live-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-time-to-live-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-time-to-live-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-specification))
      (common-lisp:list
       (common-lisp:cons "TimeToLiveSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-time-to-live-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-request-"))
   (put-request common-lisp:nil :type
    (common-lisp:or put-request common-lisp:null))
   (delete-request common-lisp:nil :type
    (common-lisp:or delete-request common-lisp:null)))
 (common-lisp:export (common-lisp:list 'write-request 'make-write-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input write-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input write-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'put-request))
      (common-lisp:list
       (common-lisp:cons "PutRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-request))
      (common-lisp:list
       (common-lisp:cons "DeleteRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input write-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype write-requests ()
   '(trivial-types:proper-list write-request))
 (common-lisp:defun |make-write-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list write-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun batch-get-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-items return-consumed-capacity)
   (common-lisp:declare
    (common-lisp:ignorable request-items return-consumed-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetItem"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'batch-get-item))
(common-lisp:progn
 (common-lisp:defun batch-write-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-items return-consumed-capacity
                     return-item-collection-metrics)
   (common-lisp:declare
    (common-lisp:ignorable request-items return-consumed-capacity
     return-item-collection-metrics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-write-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchWriteItem"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'batch-write-item))
(common-lisp:progn
 (common-lisp:defun create-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute-definitions table-name
                     key-schema local-secondary-indexes
                     global-secondary-indexes provisioned-throughput
                     stream-specification)
   (common-lisp:declare
    (common-lisp:ignorable attribute-definitions table-name key-schema
     local-secondary-indexes global-secondary-indexes provisioned-throughput
     stream-specification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTable"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'create-table))
(common-lisp:progn
 (common-lisp:defun delete-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name key expected
                     conditional-operator return-values
                     return-consumed-capacity return-item-collection-metrics
                     condition-expression expression-attribute-names
                     expression-attribute-values)
   (common-lisp:declare
    (common-lisp:ignorable table-name key expected conditional-operator
     return-values return-consumed-capacity return-item-collection-metrics
     condition-expression expression-attribute-names
     expression-attribute-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteItem"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'delete-item))
(common-lisp:progn
 (common-lisp:defun delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name)
   (common-lisp:declare (common-lisp:ignorable table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTable"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'delete-table))
(common-lisp:progn
 (common-lisp:defun describe-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'dynamodb-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeLimits")
                                  ("Version" ,@"2012-08-10"))))
    common-lisp:nil common-lisp:nil
    '(("ConditionalCheckFailedException" . conditional-check-failed-exception)
      ("InternalServerError" . internal-server-error)
      ("ItemCollectionSizeLimitExceededException"
       . item-collection-size-limit-exceeded-exception)
      ("LimitExceededException" . limit-exceeded-exception)
      ("ProvisionedThroughputExceededException"
       . provisioned-throughput-exceeded-exception)
      ("ResourceInUseException" . resource-in-use-exception)
      ("ResourceNotFoundException" . resource-not-found-exception))))
 (common-lisp:export 'describe-limits))
(common-lisp:progn
 (common-lisp:defun describe-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name)
   (common-lisp:declare (common-lisp:ignorable table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTable"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'describe-table))
(common-lisp:progn
 (common-lisp:defun describe-time-to-live
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name)
   (common-lisp:declare (common-lisp:ignorable table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-time-to-live-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTimeToLive"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'describe-time-to-live))
(common-lisp:progn
 (common-lisp:defun get-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name key attributes-to-get
                     consistent-read return-consumed-capacity
                     projection-expression expression-attribute-names)
   (common-lisp:declare
    (common-lisp:ignorable table-name key attributes-to-get consistent-read
     return-consumed-capacity projection-expression
     expression-attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetItem"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'get-item))
(common-lisp:progn
 (common-lisp:defun list-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exclusive-start-table-name limit)
   (common-lisp:declare
    (common-lisp:ignorable exclusive-start-table-name limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tables-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTables"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'list-tables))
(common-lisp:progn
 (common-lisp:defun list-tags-of-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-of-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsOfResource"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'list-tags-of-resource))
(common-lisp:progn
 (common-lisp:defun put-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name item expected return-values
                     return-consumed-capacity return-item-collection-metrics
                     conditional-operator condition-expression
                     expression-attribute-names expression-attribute-values)
   (common-lisp:declare
    (common-lisp:ignorable table-name item expected return-values
     return-consumed-capacity return-item-collection-metrics
     conditional-operator condition-expression expression-attribute-names
     expression-attribute-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutItem"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'put-item))
(common-lisp:progn
 (common-lisp:defun query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name index-name select
                     attributes-to-get limit consistent-read key-conditions
                     query-filter conditional-operator scan-index-forward
                     exclusive-start-key return-consumed-capacity
                     projection-expression filter-expression
                     key-condition-expression expression-attribute-names
                     expression-attribute-values)
   (common-lisp:declare
    (common-lisp:ignorable table-name index-name select attributes-to-get limit
     consistent-read key-conditions query-filter conditional-operator
     scan-index-forward exclusive-start-key return-consumed-capacity
     projection-expression filter-expression key-condition-expression
     expression-attribute-names expression-attribute-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Query"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'query))
(common-lisp:progn
 (common-lisp:defun scan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name index-name attributes-to-get
                     limit select scan-filter conditional-operator
                     exclusive-start-key return-consumed-capacity
                     total-segments segment projection-expression
                     filter-expression expression-attribute-names
                     expression-attribute-values consistent-read)
   (common-lisp:declare
    (common-lisp:ignorable table-name index-name attributes-to-get limit select
     scan-filter conditional-operator exclusive-start-key
     return-consumed-capacity total-segments segment projection-expression
     filter-expression expression-attribute-names expression-attribute-values
     consistent-read))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-scan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Scan"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'scan))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name key attribute-updates expected
                     conditional-operator return-values
                     return-consumed-capacity return-item-collection-metrics
                     update-expression condition-expression
                     expression-attribute-names expression-attribute-values)
   (common-lisp:declare
    (common-lisp:ignorable table-name key attribute-updates expected
     conditional-operator return-values return-consumed-capacity
     return-item-collection-metrics update-expression condition-expression
     expression-attribute-names expression-attribute-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateItem"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'update-item))
(common-lisp:progn
 (common-lisp:defun update-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attribute-definitions table-name
                     provisioned-throughput global-secondary-index-updates
                     stream-specification)
   (common-lisp:declare
    (common-lisp:ignorable attribute-definitions table-name
     provisioned-throughput global-secondary-index-updates
     stream-specification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTable"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'update-table))
(common-lisp:progn
 (common-lisp:defun update-time-to-live
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-name time-to-live-specification)
   (common-lisp:declare
    (common-lisp:ignorable table-name time-to-live-specification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-time-to-live-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dynamodb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTimeToLive"
                                                        "2012-08-10"))
      common-lisp:nil common-lisp:nil
      '(("ConditionalCheckFailedException"
         . conditional-check-failed-exception)
        ("InternalServerError" . internal-server-error)
        ("ItemCollectionSizeLimitExceededException"
         . item-collection-size-limit-exceeded-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("ProvisionedThroughputExceededException"
         . provisioned-throughput-exceeded-exception)
        ("ResourceInUseException" . resource-in-use-exception)
        ("ResourceNotFoundException" . resource-not-found-exception)))))
 (common-lisp:export 'update-time-to-live))

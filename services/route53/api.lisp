;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/route53/api
  (:use)
  (:nicknames #:aws/route53)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/route53/api)
(common-lisp:progn
 (common-lisp:defclass route53-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "route53"))
 (common-lisp:export 'route53-request))
(common-lisp:progn
 (common-lisp:define-condition route53-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'route53-error))
(common-lisp:progn
 (common-lisp:defstruct
     (alarm-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-alarm-identifier-"))
   (region (common-lisp:error ":region is required") :type
    (common-lisp:or cloud-watch-region common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or alarm-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alarm-identifier 'make-alarm-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm-identifier))
   common-lisp:nil))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:deftype alias-health-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (alias-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-alias-target-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (dnsname (common-lisp:error ":dnsname is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (evaluate-target-health
    (common-lisp:error ":evaluate-target-health is required") :type
    (common-lisp:or alias-health-enabled common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alias-target 'make-alias-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-target-health))
      (common-lisp:list
       (common-lisp:cons "EvaluateTargetHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias-target))
   common-lisp:nil))
(common-lisp:deftype associate-vpccomment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-vpcwith-hosted-zone-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-vpcwith-hosted-zone-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or vpc common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or associate-vpccomment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-vpcwith-hosted-zone-request
                    'make-associate-vpcwith-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpcwith-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpcwith-hosted-zone-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpcwith-hosted-zone-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-vpcwith-hosted-zone-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-vpcwith-hosted-zone-response-"))
   (change-info (common-lisp:error ":change-info is required") :type
    (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-vpcwith-hosted-zone-response
                    'make-associate-vpcwith-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpcwith-hosted-zone-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpcwith-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-info))
      (common-lisp:list
       (common-lisp:cons "ChangeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vpcwith-hosted-zone-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (change (:copier common-lisp:nil) (:conc-name "struct-shape-change-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (resource-record-set (common-lisp:error ":resource-record-set is required")
    :type (common-lisp:or resource-record-set common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-record-set))
      (common-lisp:list
       (common-lisp:cons "ResourceRecordSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change))
   common-lisp:nil))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (change-batch (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-batch-"))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (changes (common-lisp:error ":changes is required") :type
    (common-lisp:or changes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change-batch 'make-change-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changes))
      (common-lisp:list
       (common-lisp:cons "Changes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (change-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-info-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or change-status common-lisp:null))
   (submitted-at (common-lisp:error ":submitted-at is required") :type
    (common-lisp:or time-stamp common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change-info 'make-change-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "SubmittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (change-resource-record-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-resource-record-sets-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-batch (common-lisp:error ":change-batch is required") :type
    (common-lisp:or change-batch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-resource-record-sets-request
                    'make-change-resource-record-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-resource-record-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-resource-record-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-batch))
      (common-lisp:list
       (common-lisp:cons "ChangeBatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-resource-record-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (change-resource-record-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-resource-record-sets-response-"))
   (change-info (common-lisp:error ":change-info is required") :type
    (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-resource-record-sets-response
                    'make-change-resource-record-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-resource-record-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-resource-record-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-info))
      (common-lisp:list
       (common-lisp:cons "ChangeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-resource-record-sets-response))
   common-lisp:nil))
(common-lisp:deftype change-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (change-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-tags-for-resource-request-"))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or tag-resource-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or tag-resource-id common-lisp:null))
   (add-tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (remove-tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-tags-for-resource-request
                    'make-change-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-tags))
      (common-lisp:list
       (common-lisp:cons "AddTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-tag-keys))
      (common-lisp:list
       (common-lisp:cons "RemoveTagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (change-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-tags-for-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'change-tags-for-resource-response
                    'make-change-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype changes () '(trivial-types:proper-list change))
 (common-lisp:defun |make-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype checker-ip-ranges ()
   '(trivial-types:proper-list ipaddress-cidr))
 (common-lisp:defun |make-checker-ip-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipaddress-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype child-health-check-list ()
   '(trivial-types:proper-list health-check-id))
 (common-lisp:defun |make-child-health-check-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-check-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-alarm-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-alarm-configuration-"))
   (evaluation-periods (common-lisp:error ":evaluation-periods is required")
    :type (common-lisp:or evaluation-periods common-lisp:null))
   (threshold (common-lisp:error ":threshold is required") :type
    (common-lisp:or threshold common-lisp:null))
   (comparison-operator (common-lisp:error ":comparison-operator is required")
    :type (common-lisp:or comparison-operator common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or period common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null))
   (statistic (common-lisp:error ":statistic is required") :type
    (common-lisp:or statistic common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimension-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-alarm-configuration
                    'make-cloud-watch-alarm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-alarm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-alarm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-alarm-configuration))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-region () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification 'concurrent-modification-message)))
(common-lisp:progn
 (common-lisp:define-condition conflicting-domain-exists
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-domain-exists-message)))
 (common-lisp:export
  (common-lisp:list 'conflicting-domain-exists
                    'conflicting-domain-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition conflicting-types
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-types-message)))
 (common-lisp:export
  (common-lisp:list 'conflicting-types 'conflicting-types-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-health-check-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-health-check-request-"))
   (caller-reference (common-lisp:error ":caller-reference is required") :type
    (common-lisp:or health-check-nonce common-lisp:null))
   (health-check-config (common-lisp:error ":health-check-config is required")
    :type (common-lisp:or health-check-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-health-check-request
                    'make-create-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-health-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-health-check-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-health-check-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-health-check-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-health-check-response-"))
   (health-check (common-lisp:error ":health-check is required") :type
    (common-lisp:or health-check common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-health-check-response
                    'make-create-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-health-check-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-health-check-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-health-check-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hosted-zone-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hosted-zone-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or vpc common-lisp:null))
   (caller-reference (common-lisp:error ":caller-reference is required") :type
    (common-lisp:or nonce common-lisp:null))
   (hosted-zone-config common-lisp:nil :type
    (common-lisp:or hosted-zone-config common-lisp:null))
   (delegation-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hosted-zone-request
                    'make-create-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-zone-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-config))
      (common-lisp:list
       (common-lisp:cons "HostedZoneConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-set-id))
      (common-lisp:list
       (common-lisp:cons "DelegationSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-zone-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hosted-zone-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hosted-zone-response-"))
   (hosted-zone (common-lisp:error ":hosted-zone is required") :type
    (common-lisp:or hosted-zone common-lisp:null))
   (change-info (common-lisp:error ":change-info is required") :type
    (common-lisp:or change-info common-lisp:null))
   (delegation-set (common-lisp:error ":delegation-set is required") :type
    (common-lisp:or delegation-set common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or vpc common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hosted-zone-response
                    'make-create-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone))
      (common-lisp:list
       (common-lisp:cons "HostedZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-info))
      (common-lisp:list
       (common-lisp:cons "ChangeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-set))
      (common-lisp:list
       (common-lisp:cons "DelegationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hosted-zone-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-reusable-delegation-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-reusable-delegation-set-request-"))
   (caller-reference (common-lisp:error ":caller-reference is required") :type
    (common-lisp:or nonce common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-reusable-delegation-set-request
                    'make-create-reusable-delegation-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-reusable-delegation-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-reusable-delegation-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-reusable-delegation-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-reusable-delegation-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-reusable-delegation-set-response-"))
   (delegation-set (common-lisp:error ":delegation-set is required") :type
    (common-lisp:or delegation-set common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-reusable-delegation-set-response
                    'make-create-reusable-delegation-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-reusable-delegation-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-reusable-delegation-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-set))
      (common-lisp:list
       (common-lisp:cons "DelegationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-reusable-delegation-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-policy-instance-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or ttl common-lisp:null))
   (traffic-policy-id (common-lisp:error ":traffic-policy-id is required")
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error ":traffic-policy-version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-instance-request
                    'make-create-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy-id))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-version))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-policy-instance-response-"))
   (traffic-policy-instance
    (common-lisp:error ":traffic-policy-instance is required") :type
    (common-lisp:or traffic-policy-instance common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-instance-response
                    'make-create-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-policy-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or traffic-policy-name common-lisp:null))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or traffic-policy-document common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-request
                    'make-create-traffic-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-policy-response-"))
   (traffic-policy (common-lisp:error ":traffic-policy is required") :type
    (common-lisp:or traffic-policy common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-response
                    'make-create-traffic-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-policy-version-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or traffic-policy-document common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-version-request
                    'make-create-traffic-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-traffic-policy-version-response-"))
   (traffic-policy (common-lisp:error ":traffic-policy is required") :type
    (common-lisp:or traffic-policy common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-version-response
                    'make-create-traffic-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-traffic-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpcassociation-authorization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpcassociation-authorization-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpcassociation-authorization-request
                    'make-create-vpcassociation-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpcassociation-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpcassociation-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpcassociation-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpcassociation-authorization-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-vpcassociation-authorization-response-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpcassociation-authorization-response
                    'make-create-vpcassociation-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpcassociation-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpcassociation-authorization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpcassociation-authorization-response))
   common-lisp:nil))
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype dnsrcode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delegation-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-delegation-set-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (caller-reference common-lisp:nil :type
    (common-lisp:or nonce common-lisp:null))
   (name-servers (common-lisp:error ":name-servers is required") :type
    (common-lisp:or delegation-set-name-servers common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delegation-set 'make-delegation-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegation-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegation-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-servers))
      (common-lisp:list
       (common-lisp:cons "NameServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegation-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition delegation-set-already-created
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delegation-set-already-created-message)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-already-created
                    'delegation-set-already-created-message)))
(common-lisp:progn
 (common-lisp:define-condition delegation-set-already-reusable
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delegation-set-already-reusable-message)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-already-reusable
                    'delegation-set-already-reusable-message)))
(common-lisp:progn
 (common-lisp:define-condition delegation-set-in-use
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delegation-set-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-in-use 'delegation-set-in-use-message)))
(common-lisp:progn
 (common-lisp:deftype delegation-set-name-servers ()
   '(trivial-types:proper-list dnsname))
 (common-lisp:defun |make-delegation-set-name-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dnsname))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition delegation-set-not-available
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delegation-set-not-available-message)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-not-available
                    'delegation-set-not-available-message)))
(common-lisp:progn
 (common-lisp:define-condition delegation-set-not-reusable
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delegation-set-not-reusable-message)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-not-reusable
                    'delegation-set-not-reusable-message)))
(common-lisp:progn
 (common-lisp:deftype delegation-sets ()
   '(trivial-types:proper-list delegation-set))
 (common-lisp:defun |make-delegation-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegation-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-health-check-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-health-check-request-"))
   (health-check-id (common-lisp:error ":health-check-id is required") :type
    (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-health-check-request
                    'make-delete-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-health-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-health-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-health-check-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-health-check-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-health-check-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-health-check-response
                    'make-delete-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-health-check-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-health-check-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-health-check-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hosted-zone-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hosted-zone-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hosted-zone-request
                    'make-delete-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-zone-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hosted-zone-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hosted-zone-response-"))
   (change-info (common-lisp:error ":change-info is required") :type
    (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hosted-zone-response
                    'make-delete-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-zone-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-info))
      (common-lisp:list
       (common-lisp:cons "ChangeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hosted-zone-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-reusable-delegation-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-reusable-delegation-set-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-reusable-delegation-set-request
                    'make-delete-reusable-delegation-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reusable-delegation-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reusable-delegation-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reusable-delegation-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-reusable-delegation-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-reusable-delegation-set-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-reusable-delegation-set-response
                    'make-delete-reusable-delegation-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reusable-delegation-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reusable-delegation-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reusable-delegation-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-traffic-policy-instance-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-instance-request
                    'make-delete-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-traffic-policy-instance-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-instance-response
                    'make-delete-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-traffic-policy-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-request
                    'make-delete-traffic-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-traffic-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-response
                    'make-delete-traffic-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-traffic-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpcassociation-authorization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpcassociation-authorization-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpcassociation-authorization-request
                    'make-delete-vpcassociation-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpcassociation-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpcassociation-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpcassociation-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpcassociation-authorization-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-vpcassociation-authorization-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-vpcassociation-authorization-response
                    'make-delete-vpcassociation-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpcassociation-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpcassociation-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpcassociation-authorization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-dimension-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dimension-field common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or dimension-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dimension 'make-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension))
   common-lisp:nil))
(common-lisp:deftype dimension-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-list () '(trivial-types:proper-list dimension))
 (common-lisp:defun |make-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype disassociate-vpccomment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-vpcfrom-hosted-zone-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-vpcfrom-hosted-zone-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or vpc common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or disassociate-vpccomment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-vpcfrom-hosted-zone-request
                    'make-disassociate-vpcfrom-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpcfrom-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpcfrom-hosted-zone-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "VPC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpcfrom-hosted-zone-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-vpcfrom-hosted-zone-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-vpcfrom-hosted-zone-response-"))
   (change-info (common-lisp:error ":change-info is required") :type
    (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-vpcfrom-hosted-zone-response
                    'make-disassociate-vpcfrom-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpcfrom-hosted-zone-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpcfrom-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-info))
      (common-lisp:list
       (common-lisp:cons "ChangeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vpcfrom-hosted-zone-response))
   common-lisp:nil))
(common-lisp:deftype enable-sni () 'common-lisp:boolean)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype error-messages ()
   '(trivial-types:proper-list error-message))
 (common-lisp:defun |make-error-messages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype evaluation-periods () 'common-lisp:integer)
(common-lisp:deftype failure-threshold () 'common-lisp:integer)
(common-lisp:deftype fully-qualified-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (geo-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-location-"))
   (continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'geo-location 'make-geo-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continent-code))
      (common-lisp:list
       (common-lisp:cons "ContinentCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdivision-code))
      (common-lisp:list
       (common-lisp:cons "SubdivisionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location))
   common-lisp:nil))
(common-lisp:deftype geo-location-continent-code () 'common-lisp:string)
(common-lisp:deftype geo-location-continent-name () 'common-lisp:string)
(common-lisp:deftype geo-location-country-code () 'common-lisp:string)
(common-lisp:deftype geo-location-country-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (geo-location-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-location-details-"))
   (continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (continent-name common-lisp:nil :type
    (common-lisp:or geo-location-continent-name common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (country-name common-lisp:nil :type
    (common-lisp:or geo-location-country-name common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null))
   (subdivision-name common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-location-details 'make-geo-location-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continent-code))
      (common-lisp:list
       (common-lisp:cons "ContinentCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continent-name))
      (common-lisp:list
       (common-lisp:cons "ContinentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-name))
      (common-lisp:list
       (common-lisp:cons "CountryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdivision-code))
      (common-lisp:list
       (common-lisp:cons "SubdivisionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdivision-name))
      (common-lisp:list
       (common-lisp:cons "SubdivisionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype geo-location-details-list ()
   '(trivial-types:proper-list geo-location-details))
 (common-lisp:defun |make-geo-location-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-location-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype geo-location-subdivision-code () 'common-lisp:string)
(common-lisp:deftype geo-location-subdivision-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-request 'make-get-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-response-"))
   (change-info (common-lisp:error ":change-info is required") :type
    (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-response 'make-get-change-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-change-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-change-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-info))
      (common-lisp:list
       (common-lisp:cons "ChangeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-change-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-checker-ip-ranges-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-checker-ip-ranges-request-")))
 (common-lisp:export
  (common-lisp:list 'get-checker-ip-ranges-request
                    'make-get-checker-ip-ranges-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-checker-ip-ranges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-checker-ip-ranges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-checker-ip-ranges-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-checker-ip-ranges-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-checker-ip-ranges-response-"))
   (checker-ip-ranges (common-lisp:error ":checker-ip-ranges is required")
    :type (common-lisp:or checker-ip-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-checker-ip-ranges-response
                    'make-get-checker-ip-ranges-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-checker-ip-ranges-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-checker-ip-ranges-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checker-ip-ranges))
      (common-lisp:list
       (common-lisp:cons "CheckerIpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-checker-ip-ranges-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-geo-location-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-geo-location-request-"))
   (continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geo-location-request 'make-get-geo-location-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-location-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-geo-location-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-geo-location-response-"))
   (geo-location-details
    (common-lisp:error ":geo-location-details is required") :type
    (common-lisp:or geo-location-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geo-location-response
                    'make-get-geo-location-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-location-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-location-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geo-location-details))
      (common-lisp:list
       (common-lisp:cons "GeoLocationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-location-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-check-count-request-")))
 (common-lisp:export
  (common-lisp:list 'get-health-check-count-request
                    'make-get-health-check-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-count-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-check-count-response-"))
   (health-check-count (common-lisp:error ":health-check-count is required")
    :type (common-lisp:or health-check-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-count-response
                    'make-get-health-check-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-count))
      (common-lisp:list
       (common-lisp:cons "HealthCheckCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-last-failure-reason-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-health-check-last-failure-reason-request-"))
   (health-check-id (common-lisp:error ":health-check-id is required") :type
    (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-last-failure-reason-request
                    'make-get-health-check-last-failure-reason-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-last-failure-reason-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-last-failure-reason-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-last-failure-reason-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-last-failure-reason-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-health-check-last-failure-reason-response-"))
   (health-check-observations
    (common-lisp:error ":health-check-observations is required") :type
    (common-lisp:or health-check-observations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-last-failure-reason-response
                    'make-get-health-check-last-failure-reason-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-last-failure-reason-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-last-failure-reason-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-observations))
      (common-lisp:list
       (common-lisp:cons "HealthCheckObservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-last-failure-reason-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-check-request-"))
   (health-check-id (common-lisp:error ":health-check-id is required") :type
    (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-request 'make-get-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-check-response-"))
   (health-check (common-lisp:error ":health-check is required") :type
    (common-lisp:or health-check common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-response
                    'make-get-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-check-status-request-"))
   (health-check-id (common-lisp:error ":health-check-id is required") :type
    (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-status-request
                    'make-get-health-check-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-health-check-status-response-"))
   (health-check-observations
    (common-lisp:error ":health-check-observations is required") :type
    (common-lisp:or health-check-observations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-status-response
                    'make-get-health-check-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-observations))
      (common-lisp:list
       (common-lisp:cons "HealthCheckObservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-health-check-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-hosted-zone-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-hosted-zone-count-request-")))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-count-request
                    'make-get-hosted-zone-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-hosted-zone-count-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-hosted-zone-count-response-"))
   (hosted-zone-count (common-lisp:error ":hosted-zone-count is required")
    :type (common-lisp:or hosted-zone-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-count-response
                    'make-get-hosted-zone-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-count))
      (common-lisp:list
       (common-lisp:cons "HostedZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-hosted-zone-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-hosted-zone-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-request 'make-get-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-hosted-zone-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-hosted-zone-response-"))
   (hosted-zone (common-lisp:error ":hosted-zone is required") :type
    (common-lisp:or hosted-zone common-lisp:null))
   (delegation-set common-lisp:nil :type
    (common-lisp:or delegation-set common-lisp:null))
   (vpcs common-lisp:nil :type (common-lisp:or vpcs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-response 'make-get-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone))
      (common-lisp:list
       (common-lisp:cons "HostedZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-set))
      (common-lisp:list
       (common-lisp:cons "DelegationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcs))
      (common-lisp:list
       (common-lisp:cons "VPCs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hosted-zone-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reusable-delegation-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reusable-delegation-set-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reusable-delegation-set-request
                    'make-get-reusable-delegation-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reusable-delegation-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reusable-delegation-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reusable-delegation-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reusable-delegation-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reusable-delegation-set-response-"))
   (delegation-set (common-lisp:error ":delegation-set is required") :type
    (common-lisp:or delegation-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reusable-delegation-set-response
                    'make-get-reusable-delegation-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reusable-delegation-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reusable-delegation-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-set))
      (common-lisp:list
       (common-lisp:cons "DelegationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reusable-delegation-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-policy-instance-count-request-")))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-count-request
                    'make-get-traffic-policy-instance-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-count-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-policy-instance-count-response-"))
   (traffic-policy-instance-count
    (common-lisp:error ":traffic-policy-instance-count is required") :type
    (common-lisp:or traffic-policy-instance-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-count-response
                    'make-get-traffic-policy-instance-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-count))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-policy-instance-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-request
                    'make-get-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-policy-instance-response-"))
   (traffic-policy-instance
    (common-lisp:error ":traffic-policy-instance is required") :type
    (common-lisp:or traffic-policy-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-response
                    'make-get-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-policy-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-request
                    'make-get-traffic-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-traffic-policy-response-"))
   (traffic-policy (common-lisp:error ":traffic-policy is required") :type
    (common-lisp:or traffic-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-response
                    'make-get-traffic-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-traffic-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (health-check (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or health-check-id common-lisp:null))
   (caller-reference (common-lisp:error ":caller-reference is required") :type
    (common-lisp:or health-check-nonce common-lisp:null))
   (health-check-config (common-lisp:error ":health-check-config is required")
    :type (common-lisp:or health-check-config common-lisp:null))
   (health-check-version
    (common-lisp:error ":health-check-version is required") :type
    (common-lisp:or health-check-version common-lisp:null))
   (cloud-watch-alarm-configuration common-lisp:nil :type
    (common-lisp:or cloud-watch-alarm-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'health-check 'make-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-version))
      (common-lisp:list
       (common-lisp:cons "HealthCheckVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudWatchAlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition health-check-already-exists
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       health-check-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'health-check-already-exists
                    'health-check-already-exists-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-config-"))
   (ipaddress common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or health-check-type common-lisp:null))
   (resource-path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null))
   (fully-qualified-domain-name common-lisp:nil :type
    (common-lisp:or fully-qualified-domain-name common-lisp:null))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (request-interval common-lisp:nil :type
    (common-lisp:or request-interval common-lisp:null))
   (failure-threshold common-lisp:nil :type
    (common-lisp:or failure-threshold common-lisp:null))
   (measure-latency common-lisp:nil :type
    (common-lisp:or measure-latency common-lisp:null))
   (inverted common-lisp:nil :type (common-lisp:or inverted common-lisp:null))
   (health-threshold common-lisp:nil :type
    (common-lisp:or health-threshold common-lisp:null))
   (child-health-checks common-lisp:nil :type
    (common-lisp:or child-health-check-list common-lisp:null))
   (enable-sni common-lisp:nil :type
    (common-lisp:or enable-sni common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or health-check-region-list common-lisp:null))
   (alarm-identifier common-lisp:nil :type
    (common-lisp:or alarm-identifier common-lisp:null))
   (insufficient-data-health-status common-lisp:nil :type
    (common-lisp:or insufficient-data-health-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-config 'make-health-check-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress))
      (common-lisp:list
       (common-lisp:cons "IPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-path))
      (common-lisp:list
       (common-lisp:cons "ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-domain-name))
      (common-lisp:list
       (common-lisp:cons "FullyQualifiedDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-interval))
      (common-lisp:list
       (common-lisp:cons "RequestInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-threshold))
      (common-lisp:list
       (common-lisp:cons "FailureThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measure-latency))
      (common-lisp:list
       (common-lisp:cons "MeasureLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inverted))
      (common-lisp:list
       (common-lisp:cons "Inverted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-health-checks))
      (common-lisp:list
       (common-lisp:cons "ChildHealthChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-sni))
      (common-lisp:list
       (common-lisp:cons "EnableSNI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-identifier))
      (common-lisp:list
       (common-lisp:cons "AlarmIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insufficient-data-health-status))
      (common-lisp:list
       (common-lisp:cons "InsufficientDataHealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check-config))
   common-lisp:nil))
(common-lisp:deftype health-check-count () 'common-lisp:integer)
(common-lisp:deftype health-check-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition health-check-in-use
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       health-check-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'health-check-in-use 'health-check-in-use-message)))
(common-lisp:deftype health-check-nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-observation (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-observation-"))
   (region common-lisp:nil :type
    (common-lisp:or health-check-region common-lisp:null))
   (ipaddress common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (status-report common-lisp:nil :type
    (common-lisp:or status-report common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-observation 'make-health-check-observation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          health-check-observation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          health-check-observation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress))
      (common-lisp:list
       (common-lisp:cons "IPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-report))
      (common-lisp:list
       (common-lisp:cons "StatusReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          health-check-observation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype health-check-observations ()
   '(trivial-types:proper-list health-check-observation))
 (common-lisp:defun |make-health-check-observations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            health-check-observation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-check-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype health-check-region-list ()
   '(trivial-types:proper-list health-check-region))
 (common-lisp:defun |make-health-check-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-check-region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-check-type () 'common-lisp:string)
(common-lisp:deftype health-check-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition health-check-version-mismatch
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       health-check-version-mismatch-message)))
 (common-lisp:export
  (common-lisp:list 'health-check-version-mismatch
                    'health-check-version-mismatch-message)))
(common-lisp:progn
 (common-lisp:deftype health-checks ()
   '(trivial-types:proper-list health-check))
 (common-lisp:defun |make-health-checks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-check))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (hosted-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-hosted-zone-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (caller-reference (common-lisp:error ":caller-reference is required") :type
    (common-lisp:or nonce common-lisp:null))
   (config common-lisp:nil :type
    (common-lisp:or hosted-zone-config common-lisp:null))
   (resource-record-set-count common-lisp:nil :type
    (common-lisp:or hosted-zone-rrset-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hosted-zone 'make-hosted-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hosted-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hosted-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-record-set-count))
      (common-lisp:list
       (common-lisp:cons "ResourceRecordSetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hosted-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hosted-zone-already-exists
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       hosted-zone-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-already-exists
                    'hosted-zone-already-exists-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (hosted-zone-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hosted-zone-config-"))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (private-zone common-lisp:nil :type
    (common-lisp:or is-private-zone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-config 'make-hosted-zone-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hosted-zone-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hosted-zone-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-zone))
      (common-lisp:list
       (common-lisp:cons "PrivateZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hosted-zone-config))
   common-lisp:nil))
(common-lisp:deftype hosted-zone-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition hosted-zone-not-empty
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       hosted-zone-not-empty-message)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-not-empty 'hosted-zone-not-empty-message)))
(common-lisp:progn
 (common-lisp:define-condition hosted-zone-not-found
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       hosted-zone-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-not-found 'hosted-zone-not-found-message)))
(common-lisp:deftype hosted-zone-rrset-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype hosted-zones () '(trivial-types:proper-list hosted-zone))
 (common-lisp:defun |make-hosted-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hosted-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype ipaddress-cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incompatible-version
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incompatible-version-message)))
 (common-lisp:export
  (common-lisp:list 'incompatible-version 'incompatible-version-message)))
(common-lisp:deftype insufficient-data-health-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-argument
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument 'invalid-argument-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-change-batch
     (route53-error)
     ((messages :initarg :messages :initform common-lisp:nil :reader
       invalid-change-batch-messages)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-change-batch-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-change-batch 'invalid-change-batch-messages
                    'invalid-change-batch-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-domain-name
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-domain-name-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-domain-name 'invalid-domain-name-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-message)))
 (common-lisp:export (common-lisp:list 'invalid-input 'invalid-input-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-token
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-pagination-token-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-pagination-token
                    'invalid-pagination-token-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-traffic-policy-document
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-traffic-policy-document-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-traffic-policy-document
                    'invalid-traffic-policy-document-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcid
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-vpcid-message)))
 (common-lisp:export (common-lisp:list 'invalid-vpcid 'invalid-vpcid-message)))
(common-lisp:deftype inverted () 'common-lisp:boolean)
(common-lisp:deftype is-private-zone () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition last-vpcassociation
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       last-vpcassociation-message)))
 (common-lisp:export
  (common-lisp:list 'last-vpcassociation 'last-vpcassociation-message)))
(common-lisp:progn
 (common-lisp:define-condition limits-exceeded
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limits-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'limits-exceeded 'limits-exceeded-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geo-locations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geo-locations-request-"))
   (start-continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (start-country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (start-subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geo-locations-request
                    'make-list-geo-locations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-locations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-locations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-locations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geo-locations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geo-locations-response-"))
   (geo-location-details-list
    (common-lisp:error ":geo-location-details-list is required") :type
    (common-lisp:or geo-location-details-list common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (next-continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (next-country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (next-subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geo-locations-response
                    'make-list-geo-locations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-locations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-locations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geo-location-details-list))
      (common-lisp:list
       (common-lisp:cons "GeoLocationDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-continent-code))
      (common-lisp:list
       (common-lisp:cons "NextContinentCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-country-code))
      (common-lisp:list
       (common-lisp:cons "NextCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-subdivision-code))
      (common-lisp:list
       (common-lisp:cons "NextSubdivisionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-locations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-health-checks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-health-checks-request-"))
   (marker common-lisp:nil :type (common-lisp:or page-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-health-checks-request
                    'make-list-health-checks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-health-checks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-health-checks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-health-checks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-health-checks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-health-checks-response-"))
   (health-checks (common-lisp:error ":health-checks is required") :type
    (common-lisp:or health-checks common-lisp:null))
   (marker (common-lisp:error ":marker is required") :type
    (common-lisp:or page-marker common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or page-marker common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-health-checks-response
                    'make-list-health-checks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-health-checks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-health-checks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-checks))
      (common-lisp:list
       (common-lisp:cons "HealthChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-health-checks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hosted-zones-by-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hosted-zones-by-name-request-"))
   (dnsname common-lisp:nil :type (common-lisp:or dnsname common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-by-name-request
                    'make-list-hosted-zones-by-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-by-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-by-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-by-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hosted-zones-by-name-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hosted-zones-by-name-response-"))
   (hosted-zones (common-lisp:error ":hosted-zones is required") :type
    (common-lisp:or hosted-zones common-lisp:null))
   (dnsname common-lisp:nil :type (common-lisp:or dnsname common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (next-dnsname common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (next-hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-by-name-response
                    'make-list-hosted-zones-by-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-by-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-by-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zones))
      (common-lisp:list
       (common-lisp:cons "HostedZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-dnsname))
      (common-lisp:list
       (common-lisp:cons "NextDNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "NextHostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-by-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hosted-zones-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hosted-zones-request-"))
   (marker common-lisp:nil :type (common-lisp:or page-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null))
   (delegation-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-request
                    'make-list-hosted-zones-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hosted-zones-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hosted-zones-response-"))
   (hosted-zones (common-lisp:error ":hosted-zones is required") :type
    (common-lisp:or hosted-zones common-lisp:null))
   (marker (common-lisp:error ":marker is required") :type
    (common-lisp:or page-marker common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or page-marker common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-response
                    'make-list-hosted-zones-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zones))
      (common-lisp:list
       (common-lisp:cons "HostedZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hosted-zones-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-record-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-record-sets-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (start-record-name common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (start-record-type common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (start-record-identifier common-lisp:nil :type
    (common-lisp:or resource-record-set-identifier common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-record-sets-request
                    'make-list-resource-record-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-record-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-record-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-record-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-record-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-record-sets-response-"))
   (resource-record-sets
    (common-lisp:error ":resource-record-sets is required") :type
    (common-lisp:or resource-record-sets common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (next-record-name common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (next-record-type common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (next-record-identifier common-lisp:nil :type
    (common-lisp:or resource-record-set-identifier common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-record-sets-response
                    'make-list-resource-record-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-record-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-record-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-record-sets))
      (common-lisp:list
       (common-lisp:cons "ResourceRecordSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-record-name))
      (common-lisp:list
       (common-lisp:cons "NextRecordName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-record-type))
      (common-lisp:list
       (common-lisp:cons "NextRecordType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-record-identifier))
      (common-lisp:list
       (common-lisp:cons "NextRecordIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-record-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reusable-delegation-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-reusable-delegation-sets-request-"))
   (marker common-lisp:nil :type (common-lisp:or page-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reusable-delegation-sets-request
                    'make-list-reusable-delegation-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reusable-delegation-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reusable-delegation-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reusable-delegation-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reusable-delegation-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-reusable-delegation-sets-response-"))
   (delegation-sets (common-lisp:error ":delegation-sets is required") :type
    (common-lisp:or delegation-sets common-lisp:null))
   (marker (common-lisp:error ":marker is required") :type
    (common-lisp:or page-marker common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or page-marker common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reusable-delegation-sets-response
                    'make-list-reusable-delegation-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reusable-delegation-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reusable-delegation-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegation-sets))
      (common-lisp:list
       (common-lisp:cons "DelegationSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reusable-delegation-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or tag-resource-type common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or tag-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (resource-tag-set (common-lisp:error ":resource-tag-set is required") :type
    (common-lisp:or resource-tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tag-set))
      (common-lisp:list
       (common-lisp:cons "ResourceTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resources-request-"))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or tag-resource-type common-lisp:null))
   (resource-ids (common-lisp:error ":resource-ids is required") :type
    (common-lisp:or tag-resource-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resources-request
                    'make-list-tags-for-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resources-response-"))
   (resource-tag-sets (common-lisp:error ":resource-tag-sets is required")
    :type (common-lisp:or resource-tag-set-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resources-response
                    'make-list-tags-for-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tag-sets))
      (common-lisp:list
       (common-lisp:cons "ResourceTagSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-policies-request-"))
   (traffic-policy-id-marker common-lisp:nil :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policies-request
                    'make-list-traffic-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-policies-response-"))
   (traffic-policy-summaries
    (common-lisp:error ":traffic-policy-summaries is required") :type
    (common-lisp:or traffic-policy-summaries common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (traffic-policy-id-marker
    (common-lisp:error ":traffic-policy-id-marker is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policies-response
                    'make-list-traffic-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-summaries))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-id-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-hosted-zone-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-traffic-policy-instances-by-hosted-zone-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-hosted-zone-request
                    'make-list-traffic-policy-instances-by-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-hosted-zone-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-hosted-zone-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-hosted-zone-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-traffic-policy-instances-by-hosted-zone-response-"))
   (traffic-policy-instances
    (common-lisp:error ":traffic-policy-instances is required") :type
    (common-lisp:or traffic-policy-instances common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-hosted-zone-response
                    'make-list-traffic-policy-instances-by-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-hosted-zone-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-hosted-zone-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instances))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-name-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceNameMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-type-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceTypeMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-hosted-zone-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-traffic-policy-instances-by-policy-request-"))
   (traffic-policy-id (common-lisp:error ":traffic-policy-id is required")
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error ":traffic-policy-version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-policy-request
                    'make-list-traffic-policy-instances-by-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-policy-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-traffic-policy-instances-by-policy-response-"))
   (traffic-policy-instances
    (common-lisp:error ":traffic-policy-instances is required") :type
    (common-lisp:or traffic-policy-instances common-lisp:null))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-policy-response
                    'make-list-traffic-policy-instances-by-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instances))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hosted-zone-id-marker))
      (common-lisp:list
       (common-lisp:cons "HostedZoneIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-name-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceNameMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-type-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceTypeMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-by-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-policy-instances-request-"))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-request
                    'make-list-traffic-policy-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-policy-instances-response-"))
   (traffic-policy-instances
    (common-lisp:error ":traffic-policy-instances is required") :type
    (common-lisp:or traffic-policy-instances common-lisp:null))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-response
                    'make-list-traffic-policy-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instances))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hosted-zone-id-marker))
      (common-lisp:list
       (common-lisp:cons "HostedZoneIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-name-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceNameMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-type-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceTypeMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-policy-versions-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version-marker common-lisp:nil :type
    (common-lisp:or traffic-policy-version-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-versions-request
                    'make-list-traffic-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-traffic-policy-versions-response-"))
   (traffic-policies (common-lisp:error ":traffic-policies is required") :type
    (common-lisp:or traffic-policies common-lisp:null))
   (is-truncated (common-lisp:error ":is-truncated is required") :type
    (common-lisp:or page-truncated common-lisp:null))
   (traffic-policy-version-marker
    (common-lisp:error ":traffic-policy-version-marker is required") :type
    (common-lisp:or traffic-policy-version-marker common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-versions-response
                    'make-list-traffic-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policies))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-version-marker))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyVersionMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-traffic-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpcassociation-authorizations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpcassociation-authorizations-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpcassociation-authorizations-request
                    'make-list-vpcassociation-authorizations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpcassociation-authorizations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpcassociation-authorizations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpcassociation-authorizations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpcassociation-authorizations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpcassociation-authorizations-response-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (vpcs (common-lisp:error ":vpcs is required") :type
    (common-lisp:or vpcs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpcassociation-authorizations-response
                    'make-list-vpcassociation-authorizations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpcassociation-authorizations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpcassociation-authorizations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcs))
      (common-lisp:list
       (common-lisp:cons "VPCs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpcassociation-authorizations-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:string)
(common-lisp:deftype measure-latency () 'common-lisp:boolean)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype nameserver () 'common-lisp:string)
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-change
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-change-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-change 'no-such-change-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-delegation-set
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-delegation-set-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-delegation-set 'no-such-delegation-set-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-geo-location
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-geo-location-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-geo-location 'no-such-geo-location-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-health-check
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-health-check-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-health-check 'no-such-health-check-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-hosted-zone
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-hosted-zone-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-hosted-zone 'no-such-hosted-zone-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-traffic-policy
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-traffic-policy-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-traffic-policy 'no-such-traffic-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-traffic-policy-instance
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-traffic-policy-instance-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-traffic-policy-instance
                    'no-such-traffic-policy-instance-message)))
(common-lisp:deftype nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-authorized-exception
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-authorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception
                    'not-authorized-exception-message)))
(common-lisp:deftype page-marker () 'common-lisp:string)
(common-lisp:deftype page-max-items () 'common-lisp:string)
(common-lisp:deftype page-truncated () 'common-lisp:boolean)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype period () 'common-lisp:integer)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition prior-request-not-complete
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       prior-request-not-complete-message)))
 (common-lisp:export
  (common-lisp:list 'prior-request-not-complete
                    'prior-request-not-complete-message)))
(common-lisp:progn
 (common-lisp:define-condition public-zone-vpcassociation
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       public-zone-vpcassociation-message)))
 (common-lisp:export
  (common-lisp:list 'public-zone-vpcassociation
                    'public-zone-vpcassociation-message)))
(common-lisp:deftype rdata () 'common-lisp:string)
(common-lisp:deftype rrtype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-data ()
   '(trivial-types:proper-list record-data-entry))
 (common-lisp:defun |make-record-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-data-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-data-entry () 'common-lisp:string)
(common-lisp:deftype request-interval () 'common-lisp:integer)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-record-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or rdata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-record 'make-resource-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-record-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-record-set-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or rrtype common-lisp:null))
   (set-identifier common-lisp:nil :type
    (common-lisp:or resource-record-set-identifier common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or resource-record-set-weight common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or resource-record-set-region common-lisp:null))
   (geo-location common-lisp:nil :type
    (common-lisp:or geo-location common-lisp:null))
   (failover common-lisp:nil :type
    (common-lisp:or resource-record-set-failover common-lisp:null))
   (multi-value-answer common-lisp:nil :type
    (common-lisp:or resource-record-set-multi-value-answer common-lisp:null))
   (ttl common-lisp:nil :type (common-lisp:or ttl common-lisp:null))
   (resource-records common-lisp:nil :type
    (common-lisp:or resource-records common-lisp:null))
   (alias-target common-lisp:nil :type
    (common-lisp:or alias-target common-lisp:null))
   (health-check-id common-lisp:nil :type
    (common-lisp:or health-check-id common-lisp:null))
   (traffic-policy-instance-id common-lisp:nil :type
    (common-lisp:or traffic-policy-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-record-set 'make-resource-record-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-record-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-record-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-identifier))
      (common-lisp:list
       (common-lisp:cons "SetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-location))
      (common-lisp:list
       (common-lisp:cons "GeoLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover))
      (common-lisp:list
       (common-lisp:cons "Failover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-value-answer))
      (common-lisp:list
       (common-lisp:cons "MultiValueAnswer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-records))
      (common-lisp:list
       (common-lisp:cons "ResourceRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-target))
      (common-lisp:list
       (common-lisp:cons "AliasTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-id))
      (common-lisp:list
       (common-lisp:cons "HealthCheckId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance-id))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-record-set))
   common-lisp:nil))
(common-lisp:deftype resource-record-set-failover () 'common-lisp:string)
(common-lisp:deftype resource-record-set-identifier () 'common-lisp:string)
(common-lisp:deftype resource-record-set-multi-value-answer ()
  'common-lisp:boolean)
(common-lisp:deftype resource-record-set-region () 'common-lisp:string)
(common-lisp:deftype resource-record-set-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype resource-record-sets ()
   '(trivial-types:proper-list resource-record-set))
 (common-lisp:defun |make-resource-record-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-record-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-records ()
   '(trivial-types:proper-list resource-record))
 (common-lisp:defun |make-resource-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tag-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tag-set-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or tag-resource-type common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or tag-resource-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-tag-set 'make-resource-tag-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-tag-set-list ()
   '(trivial-types:proper-list resource-tag-set))
 (common-lisp:defun |make-resource-tag-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-uri () 'common-lisp:string)
(common-lisp:deftype search-string () 'common-lisp:string)
(common-lisp:deftype statistic () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (status-report (:copier common-lisp:nil)
      (:conc-name "struct-shape-status-report-"))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (checked-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status-report 'make-status-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checked-time))
      (common-lisp:list
       (common-lisp:cons "CheckedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-report))
   common-lisp:nil))
(common-lisp:deftype subnet-mask () 'common-lisp:string)
(common-lisp:deftype ttl () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-resource-id-list ()
   '(trivial-types:proper-list tag-resource-id))
 (common-lisp:defun |make-tag-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-resource-type () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (test-dnsanswer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-dnsanswer-request-"))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (record-name (common-lisp:error ":record-name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (record-type (common-lisp:error ":record-type is required") :type
    (common-lisp:or rrtype common-lisp:null))
   (resolver-ip common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (edns0client-subnet-ip common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (edns0client-subnet-mask common-lisp:nil :type
    (common-lisp:or subnet-mask common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-dnsanswer-request 'make-test-dnsanswer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-dnsanswer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-dnsanswer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-dnsanswer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-dnsanswer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-dnsanswer-response-"))
   (nameserver (common-lisp:error ":nameserver is required") :type
    (common-lisp:or nameserver common-lisp:null))
   (record-name (common-lisp:error ":record-name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (record-type (common-lisp:error ":record-type is required") :type
    (common-lisp:or rrtype common-lisp:null))
   (record-data (common-lisp:error ":record-data is required") :type
    (common-lisp:or record-data common-lisp:null))
   (response-code (common-lisp:error ":response-code is required") :type
    (common-lisp:or dnsrcode common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or transport-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-dnsanswer-response 'make-test-dnsanswer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-dnsanswer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-dnsanswer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nameserver))
      (common-lisp:list
       (common-lisp:cons "Nameserver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-name))
      (common-lisp:list
       (common-lisp:cons "RecordName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-type))
      (common-lisp:list
       (common-lisp:cons "RecordType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-data))
      (common-lisp:list
       (common-lisp:cons "RecordData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-dnsanswer-response))
   common-lisp:nil))
(common-lisp:deftype threshold () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-health-checks
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-health-checks-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-health-checks 'too-many-health-checks-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-hosted-zones
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-hosted-zones-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-hosted-zones 'too-many-hosted-zones-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-traffic-policies
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-traffic-policies-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-traffic-policies
                    'too-many-traffic-policies-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-traffic-policy-instances
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-traffic-policy-instances-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-traffic-policy-instances
                    'too-many-traffic-policy-instances-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-vpcassociation-authorizations
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-vpcassociation-authorizations-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-vpcassociation-authorizations
                    'too-many-vpcassociation-authorizations-message)))
(common-lisp:progn
 (common-lisp:deftype traffic-policies ()
   '(trivial-types:proper-list traffic-policy))
 (common-lisp:defun |make-traffic-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-policy-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or traffic-policy-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or rrtype common-lisp:null))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or traffic-policy-document common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export (common-lisp:list 'traffic-policy 'make-traffic-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition traffic-policy-already-exists
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       traffic-policy-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-already-exists
                    'traffic-policy-already-exists-message)))
(common-lisp:deftype traffic-policy-comment () 'common-lisp:string)
(common-lisp:deftype traffic-policy-document () 'common-lisp:string)
(common-lisp:deftype traffic-policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition traffic-policy-in-use
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       traffic-policy-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-in-use 'traffic-policy-in-use-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-policy-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-policy-instance-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-instance-id common-lisp:null))
   (hosted-zone-id (common-lisp:error ":hosted-zone-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or dnsname common-lisp:null))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or ttl common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or traffic-policy-instance-state common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or message common-lisp:null))
   (traffic-policy-id (common-lisp:error ":traffic-policy-id is required")
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error ":traffic-policy-version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null))
   (traffic-policy-type (common-lisp:error ":traffic-policy-type is required")
    :type (common-lisp:or rrtype common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-instance 'make-traffic-policy-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-policy-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-policy-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy-id))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-version))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy-type))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-policy-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition traffic-policy-instance-already-exists
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       traffic-policy-instance-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-instance-already-exists
                    'traffic-policy-instance-already-exists-message)))
(common-lisp:deftype traffic-policy-instance-count () 'common-lisp:integer)
(common-lisp:deftype traffic-policy-instance-id () 'common-lisp:string)
(common-lisp:deftype traffic-policy-instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype traffic-policy-instances ()
   '(trivial-types:proper-list traffic-policy-instance))
 (common-lisp:defun |make-traffic-policy-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-policy-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype traffic-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype traffic-policy-summaries ()
   '(trivial-types:proper-list traffic-policy-summary))
 (common-lisp:defun |make-traffic-policy-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-policy-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-policy-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or traffic-policy-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or rrtype common-lisp:null))
   (latest-version (common-lisp:error ":latest-version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null))
   (traffic-policy-count
    (common-lisp:error ":traffic-policy-count is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-summary 'make-traffic-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-count))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-policy-summary))
   common-lisp:nil))
(common-lisp:deftype traffic-policy-version () 'common-lisp:integer)
(common-lisp:deftype traffic-policy-version-marker () 'common-lisp:string)
(common-lisp:deftype transport-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-health-check-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-health-check-request-"))
   (health-check-id (common-lisp:error ":health-check-id is required") :type
    (common-lisp:or health-check-id common-lisp:null))
   (health-check-version common-lisp:nil :type
    (common-lisp:or health-check-version common-lisp:null))
   (ipaddress common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (resource-path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null))
   (fully-qualified-domain-name common-lisp:nil :type
    (common-lisp:or fully-qualified-domain-name common-lisp:null))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (failure-threshold common-lisp:nil :type
    (common-lisp:or failure-threshold common-lisp:null))
   (inverted common-lisp:nil :type (common-lisp:or inverted common-lisp:null))
   (health-threshold common-lisp:nil :type
    (common-lisp:or health-threshold common-lisp:null))
   (child-health-checks common-lisp:nil :type
    (common-lisp:or child-health-check-list common-lisp:null))
   (enable-sni common-lisp:nil :type
    (common-lisp:or enable-sni common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or health-check-region-list common-lisp:null))
   (alarm-identifier common-lisp:nil :type
    (common-lisp:or alarm-identifier common-lisp:null))
   (insufficient-data-health-status common-lisp:nil :type
    (common-lisp:or insufficient-data-health-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-health-check-request
                    'make-update-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-health-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-health-check-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-version))
      (common-lisp:list
       (common-lisp:cons "HealthCheckVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress))
      (common-lisp:list
       (common-lisp:cons "IPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-path))
      (common-lisp:list
       (common-lisp:cons "ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-domain-name))
      (common-lisp:list
       (common-lisp:cons "FullyQualifiedDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-threshold))
      (common-lisp:list
       (common-lisp:cons "FailureThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inverted))
      (common-lisp:list
       (common-lisp:cons "Inverted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-health-checks))
      (common-lisp:list
       (common-lisp:cons "ChildHealthChecks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-sni))
      (common-lisp:list
       (common-lisp:cons "EnableSNI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-identifier))
      (common-lisp:list
       (common-lisp:cons "AlarmIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insufficient-data-health-status))
      (common-lisp:list
       (common-lisp:cons "InsufficientDataHealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-health-check-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-health-check-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-health-check-response-"))
   (health-check (common-lisp:error ":health-check is required") :type
    (common-lisp:or health-check common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-health-check-response
                    'make-update-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-health-check-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-health-check-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-health-check-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-hosted-zone-comment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-hosted-zone-comment-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hosted-zone-comment-request
                    'make-update-hosted-zone-comment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hosted-zone-comment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hosted-zone-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hosted-zone-comment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-hosted-zone-comment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-hosted-zone-comment-response-"))
   (hosted-zone (common-lisp:error ":hosted-zone is required") :type
    (common-lisp:or hosted-zone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hosted-zone-comment-response
                    'make-update-hosted-zone-comment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-hosted-zone-comment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-hosted-zone-comment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone))
      (common-lisp:list
       (common-lisp:cons "HostedZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-hosted-zone-comment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-comment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-traffic-policy-comment-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null))
   (comment (common-lisp:error ":comment is required") :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-comment-request
                    'make-update-traffic-policy-comment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-comment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-comment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-comment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-comment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-traffic-policy-comment-response-"))
   (traffic-policy (common-lisp:error ":traffic-policy is required") :type
    (common-lisp:or traffic-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-comment-response
                    'make-update-traffic-policy-comment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-comment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-comment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-comment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-traffic-policy-instance-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or traffic-policy-instance-id common-lisp:null))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or ttl common-lisp:null))
   (traffic-policy-id (common-lisp:error ":traffic-policy-id is required")
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error ":traffic-policy-version is required") :type
    (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-instance-request
                    'make-update-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-policy-id))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-version))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-traffic-policy-instance-response-"))
   (traffic-policy-instance
    (common-lisp:error ":traffic-policy-instance is required") :type
    (common-lisp:or traffic-policy-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-instance-response
                    'make-update-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-policy-instance))
      (common-lisp:list
       (common-lisp:cons "TrafficPolicyInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-traffic-policy-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc (:copier common-lisp:nil) (:conc-name "struct-shape-vpc-"))
   (vpcregion common-lisp:nil :type
    (common-lisp:or vpcregion common-lisp:null))
   (vpcid common-lisp:nil :type (common-lisp:or vpcid common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc 'make-vpc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcregion))
      (common-lisp:list
       (common-lisp:cons "VPCRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition vpcassociation-authorization-not-found
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       vpcassociation-authorization-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'vpcassociation-authorization-not-found
                    'vpcassociation-authorization-not-found-message)))
(common-lisp:progn
 (common-lisp:define-condition vpcassociation-not-found
     (route53-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       vpcassociation-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'vpcassociation-not-found
                    'vpcassociation-not-found-message)))
(common-lisp:deftype vpcid () 'common-lisp:string)
(common-lisp:deftype vpcregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpcs () '(trivial-types:proper-list vpc))
 (common-lisp:defun |make-vpcs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-vpcwith-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc comment)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-vpcwith-hosted-zone-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/associatevpc"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateVPCWithHostedZone"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("NotAuthorizedException" . not-authorized-exception)
        ("InvalidVPCId" . invalid-vpcid) ("InvalidInput" . invalid-input)
        ("PublicZoneVPCAssociation" . public-zone-vpcassociation)
        ("ConflictingDomainExists" . conflicting-domain-exists)
        ("LimitsExceeded" . limits-exceeded)))))
 (common-lisp:export 'associate-vpcwith-hosted-zone))
(common-lisp:progn
 (common-lisp:defun change-resource-record-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id change-batch)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id change-batch))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-change-resource-record-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/rrset/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ChangeResourceRecordSets"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("NoSuchHealthCheck" . no-such-health-check)
        ("InvalidChangeBatch" . invalid-change-batch)
        ("InvalidInput" . invalid-input)
        ("PriorRequestNotComplete" . prior-request-not-complete)))))
 (common-lisp:export 'change-resource-record-sets))
(common-lisp:progn
 (common-lisp:defun change-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id add-tags
                     remove-tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-id add-tags remove-tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-change-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/tags/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "ChangeTagsForResource"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchHealthCheck" . no-such-health-check)
        ("NoSuchHostedZone" . no-such-hosted-zone)
        ("PriorRequestNotComplete" . prior-request-not-complete)
        ("ThrottlingException" . throttling-exception)))))
 (common-lisp:export 'change-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun create-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key caller-reference health-check-config)
   (common-lisp:declare
    (common-lisp:ignorable caller-reference health-check-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2013-04-01/healthcheck"
                                                        "CreateHealthCheck"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("TooManyHealthChecks" . too-many-health-checks)
        ("HealthCheckAlreadyExists" . health-check-already-exists)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'create-health-check))
(common-lisp:progn
 (common-lisp:defun create-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name vpc caller-reference
                     hosted-zone-config delegation-set-id)
   (common-lisp:declare
    (common-lisp:ignorable name vpc caller-reference hosted-zone-config
     delegation-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hosted-zone-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2013-04-01/hostedzone"
                                                        "CreateHostedZone"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidDomainName" . invalid-domain-name)
        ("HostedZoneAlreadyExists" . hosted-zone-already-exists)
        ("TooManyHostedZones" . too-many-hosted-zones)
        ("InvalidVPCId" . invalid-vpcid) ("InvalidInput" . invalid-input)
        ("DelegationSetNotAvailable" . delegation-set-not-available)
        ("ConflictingDomainExists" . conflicting-domain-exists)
        ("NoSuchDelegationSet" . no-such-delegation-set)
        ("DelegationSetNotReusable" . delegation-set-not-reusable)))))
 (common-lisp:export 'create-hosted-zone))
(common-lisp:progn
 (common-lisp:defun create-reusable-delegation-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key caller-reference hosted-zone-id)
   (common-lisp:declare
    (common-lisp:ignorable caller-reference hosted-zone-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-reusable-delegation-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2013-04-01/delegationset"
                                                        "CreateReusableDelegationSet"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("DelegationSetAlreadyCreated" . delegation-set-already-created)
        ("LimitsExceeded" . limits-exceeded)
        ("HostedZoneNotFound" . hosted-zone-not-found)
        ("InvalidArgument" . invalid-argument) ("InvalidInput" . invalid-input)
        ("DelegationSetNotAvailable" . delegation-set-not-available)
        ("DelegationSetAlreadyReusable" . delegation-set-already-reusable)))))
 (common-lisp:export 'create-reusable-delegation-set))
(common-lisp:progn
 (common-lisp:defun create-traffic-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document comment)
   (common-lisp:declare (common-lisp:ignorable name document comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-traffic-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2013-04-01/trafficpolicy"
                                                        "CreateTrafficPolicy"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("TooManyTrafficPolicies" . too-many-traffic-policies)
        ("TrafficPolicyAlreadyExists" . traffic-policy-already-exists)
        ("InvalidTrafficPolicyDocument" . invalid-traffic-policy-document)))))
 (common-lisp:export 'create-traffic-policy))
(common-lisp:progn
 (common-lisp:defun create-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id name ttl traffic-policy-id
                     traffic-policy-version)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id name ttl traffic-policy-id
     traffic-policy-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2013-04-01/trafficpolicyinstance"
                                                        "CreateTrafficPolicyInstance"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidInput" . invalid-input)
        ("TooManyTrafficPolicyInstances" . too-many-traffic-policy-instances)
        ("NoSuchTrafficPolicy" . no-such-traffic-policy)
        ("TrafficPolicyInstanceAlreadyExists"
         . traffic-policy-instance-already-exists)))))
 (common-lisp:export 'create-traffic-policy-instance))
(common-lisp:progn
 (common-lisp:defun create-traffic-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id document comment)
   (common-lisp:declare (common-lisp:ignorable id document comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-traffic-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CreateTrafficPolicyVersion"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchTrafficPolicy" . no-such-traffic-policy)
        ("InvalidInput" . invalid-input)
        ("ConcurrentModification" . concurrent-modification)
        ("InvalidTrafficPolicyDocument" . invalid-traffic-policy-document)))))
 (common-lisp:export 'create-traffic-policy-version))
(common-lisp:progn
 (common-lisp:defun create-vpcassociation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpcassociation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/authorizevpcassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CreateVPCAssociationAuthorization"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("ConcurrentModification" . concurrent-modification)
        ("TooManyVPCAssociationAuthorizations"
         . too-many-vpcassociation-authorizations)
        ("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidVPCId" . invalid-vpcid) ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'create-vpcassociation-authorization))
(common-lisp:progn
 (common-lisp:defun delete-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/healthcheck/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'health-check-id))))
                                                        "DeleteHealthCheck"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHealthCheck" . no-such-health-check)
        ("HealthCheckInUse" . health-check-in-use)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'delete-health-check))
(common-lisp:progn
 (common-lisp:defun delete-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hosted-zone-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteHostedZone"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("HostedZoneNotEmpty" . hosted-zone-not-empty)
        ("PriorRequestNotComplete" . prior-request-not-complete)
        ("InvalidInput" . invalid-input)
        ("InvalidDomainName" . invalid-domain-name)))))
 (common-lisp:export 'delete-hosted-zone))
(common-lisp:progn
 (common-lisp:defun delete-reusable-delegation-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-reusable-delegation-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/delegationset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteReusableDelegationSet"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchDelegationSet" . no-such-delegation-set)
        ("DelegationSetInUse" . delegation-set-in-use)
        ("DelegationSetNotReusable" . delegation-set-not-reusable)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'delete-reusable-delegation-set))
(common-lisp:progn
 (common-lisp:defun delete-traffic-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id version)
   (common-lisp:declare (common-lisp:ignorable id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-traffic-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicy/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "DeleteTrafficPolicy"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchTrafficPolicy" . no-such-traffic-policy)
        ("InvalidInput" . invalid-input)
        ("TrafficPolicyInUse" . traffic-policy-in-use)
        ("ConcurrentModification" . concurrent-modification)))))
 (common-lisp:export 'delete-traffic-policy))
(common-lisp:progn
 (common-lisp:defun delete-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicyinstance/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteTrafficPolicyInstance"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchTrafficPolicyInstance" . no-such-traffic-policy-instance)
        ("InvalidInput" . invalid-input)
        ("PriorRequestNotComplete" . prior-request-not-complete)))))
 (common-lisp:export 'delete-traffic-policy-instance))
(common-lisp:progn
 (common-lisp:defun delete-vpcassociation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpcassociation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/deauthorizevpcassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteVPCAssociationAuthorization"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("ConcurrentModification" . concurrent-modification)
        ("VPCAssociationAuthorizationNotFound"
         . vpcassociation-authorization-not-found)
        ("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidVPCId" . invalid-vpcid) ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'delete-vpcassociation-authorization))
(common-lisp:progn
 (common-lisp:defun disassociate-vpcfrom-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc comment)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-vpcfrom-hosted-zone-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/disassociatevpc"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DisassociateVPCFromHostedZone"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidVPCId" . invalid-vpcid)
        ("VPCAssociationNotFound" . vpcassociation-not-found)
        ("LastVPCAssociation" . last-vpcassociation)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'disassociate-vpcfrom-hosted-zone))
(common-lisp:progn
 (common-lisp:defun get-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-change-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/change/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetChange"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchChange" . no-such-change) ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-change))
(common-lisp:progn
 (common-lisp:defun get-checker-ip-ranges ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'route53-request :method "GET" :path
                                "/2013-04-01/checkeripranges" :params
                                `(("Action" ,@"GetCheckerIpRanges")
                                  ("Version" ,@"2013-04-01"))))
    common-lisp:nil common-lisp:nil 'common-lisp:nil))
 (common-lisp:export 'get-checker-ip-ranges))
(common-lisp:progn
 (common-lisp:defun get-geo-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key continent-code country-code
                     subdivision-code)
   (common-lisp:declare
    (common-lisp:ignorable continent-code country-code subdivision-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-geo-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/geolocation"
                                                        "GetGeoLocation"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchGeoLocation" . no-such-geo-location)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-geo-location))
(common-lisp:progn
 (common-lisp:defun get-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/healthcheck/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'health-check-id))))
                                                        "GetHealthCheck"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHealthCheck" . no-such-health-check)
        ("InvalidInput" . invalid-input)
        ("IncompatibleVersion" . incompatible-version)))))
 (common-lisp:export 'get-health-check))
(common-lisp:progn
 (common-lisp:defun get-health-check-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'route53-request :method "GET" :path
                                "/2013-04-01/healthcheckcount" :params
                                `(("Action" ,@"GetHealthCheckCount")
                                  ("Version" ,@"2013-04-01"))))
    common-lisp:nil common-lisp:nil 'common-lisp:nil))
 (common-lisp:export 'get-health-check-count))
(common-lisp:progn
 (common-lisp:defun get-health-check-last-failure-reason
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-health-check-last-failure-reason-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/healthcheck/~A/lastfailurereason"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'health-check-id))))
                                                        "GetHealthCheckLastFailureReason"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHealthCheck" . no-such-health-check)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-health-check-last-failure-reason))
(common-lisp:progn
 (common-lisp:defun get-health-check-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-health-check-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/healthcheck/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'health-check-id))))
                                                        "GetHealthCheckStatus"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHealthCheck" . no-such-health-check)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-health-check-status))
(common-lisp:progn
 (common-lisp:defun get-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-hosted-zone-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetHostedZone"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-hosted-zone))
(common-lisp:progn
 (common-lisp:defun get-hosted-zone-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'route53-request :method "GET" :path
                                "/2013-04-01/hostedzonecount" :params
                                `(("Action" ,@"GetHostedZoneCount")
                                  ("Version" ,@"2013-04-01"))))
    common-lisp:nil common-lisp:nil '(("InvalidInput" . invalid-input))))
 (common-lisp:export 'get-hosted-zone-count))
(common-lisp:progn
 (common-lisp:defun get-reusable-delegation-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reusable-delegation-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/delegationset/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetReusableDelegationSet"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchDelegationSet" . no-such-delegation-set)
        ("DelegationSetNotReusable" . delegation-set-not-reusable)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-reusable-delegation-set))
(common-lisp:progn
 (common-lisp:defun get-traffic-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id version)
   (common-lisp:declare (common-lisp:ignorable id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-traffic-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicy/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "GetTrafficPolicy"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchTrafficPolicy" . no-such-traffic-policy)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-traffic-policy))
(common-lisp:progn
 (common-lisp:defun get-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicyinstance/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetTrafficPolicyInstance"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchTrafficPolicyInstance" . no-such-traffic-policy-instance)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'get-traffic-policy-instance))
(common-lisp:progn
 (common-lisp:defun get-traffic-policy-instance-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'route53-request :method "GET" :path
                                "/2013-04-01/trafficpolicyinstancecount"
                                :params
                                `(("Action" ,@"GetTrafficPolicyInstanceCount")
                                  ("Version" ,@"2013-04-01"))))
    common-lisp:nil common-lisp:nil 'common-lisp:nil))
 (common-lisp:export 'get-traffic-policy-instance-count))
(common-lisp:progn
 (common-lisp:defun list-geo-locations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-continent-code start-country-code
                     start-subdivision-code max-items)
   (common-lisp:declare
    (common-lisp:ignorable start-continent-code start-country-code
     start-subdivision-code max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-geo-locations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/geolocations"
                                                        "ListGeoLocations"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil '(("InvalidInput" . invalid-input)))))
 (common-lisp:export 'list-geo-locations))
(common-lisp:progn
 (common-lisp:defun list-health-checks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-health-checks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/healthcheck"
                                                        "ListHealthChecks"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("IncompatibleVersion" . incompatible-version)))))
 (common-lisp:export 'list-health-checks))
(common-lisp:progn
 (common-lisp:defun list-hosted-zones
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items delegation-set-id)
   (common-lisp:declare
    (common-lisp:ignorable marker max-items delegation-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hosted-zones-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/hostedzone"
                                                        "ListHostedZones"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchDelegationSet" . no-such-delegation-set)
        ("DelegationSetNotReusable" . delegation-set-not-reusable)))))
 (common-lisp:export 'list-hosted-zones))
(common-lisp:progn
 (common-lisp:defun list-hosted-zones-by-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dnsname hosted-zone-id max-items)
   (common-lisp:declare
    (common-lisp:ignorable dnsname hosted-zone-id max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-hosted-zones-by-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/hostedzonesbyname"
                                                        "ListHostedZonesByName"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("InvalidDomainName" . invalid-domain-name)))))
 (common-lisp:export 'list-hosted-zones-by-name))
(common-lisp:progn
 (common-lisp:defun list-resource-record-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id start-record-name
                     start-record-type start-record-identifier max-items)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id start-record-name start-record-type
     start-record-identifier max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-record-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/rrset"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ListResourceRecordSets"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'list-resource-record-sets))
(common-lisp:progn
 (common-lisp:defun list-reusable-delegation-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-reusable-delegation-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/delegationset"
                                                        "ListReusableDelegationSets"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil '(("InvalidInput" . invalid-input)))))
 (common-lisp:export 'list-reusable-delegation-sets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/tags/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-id))))
                                                        "ListTagsForResource"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchHealthCheck" . no-such-health-check)
        ("NoSuchHostedZone" . no-such-hosted-zone)
        ("PriorRequestNotComplete" . prior-request-not-complete)
        ("ThrottlingException" . throttling-exception)))))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-ids)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-type))))
                                                        "ListTagsForResources"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchHealthCheck" . no-such-health-check)
        ("NoSuchHostedZone" . no-such-hosted-zone)
        ("PriorRequestNotComplete" . prior-request-not-complete)
        ("ThrottlingException" . throttling-exception)))))
 (common-lisp:export 'list-tags-for-resources))
(common-lisp:progn
 (common-lisp:defun list-traffic-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key traffic-policy-id-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable traffic-policy-id-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-traffic-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/trafficpolicies"
                                                        "ListTrafficPolicies"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil '(("InvalidInput" . invalid-input)))))
 (common-lisp:export 'list-traffic-policies))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id-marker
                     traffic-policy-instance-name-marker
                     traffic-policy-instance-type-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id-marker
     traffic-policy-instance-name-marker traffic-policy-instance-type-marker
     max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/trafficpolicyinstances"
                                                        "ListTrafficPolicyInstances"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchTrafficPolicyInstance" . no-such-traffic-policy-instance)))))
 (common-lisp:export 'list-traffic-policy-instances))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-instances-by-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id
                     traffic-policy-instance-name-marker
                     traffic-policy-instance-type-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id traffic-policy-instance-name-marker
     traffic-policy-instance-type-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-instances-by-hosted-zone-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/trafficpolicyinstances/hostedzone"
                                                        "ListTrafficPolicyInstancesByHostedZone"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchTrafficPolicyInstance" . no-such-traffic-policy-instance)
        ("NoSuchHostedZone" . no-such-hosted-zone)))))
 (common-lisp:export 'list-traffic-policy-instances-by-hosted-zone))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-instances-by-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key traffic-policy-id traffic-policy-version
                     hosted-zone-id-marker traffic-policy-instance-name-marker
                     traffic-policy-instance-type-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable traffic-policy-id traffic-policy-version
     hosted-zone-id-marker traffic-policy-instance-name-marker
     traffic-policy-instance-type-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-instances-by-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/trafficpolicyinstances/trafficpolicy"
                                                        "ListTrafficPolicyInstancesByPolicy"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchTrafficPolicyInstance" . no-such-traffic-policy-instance)
        ("NoSuchTrafficPolicy" . no-such-traffic-policy)))))
 (common-lisp:export 'list-traffic-policy-instances-by-policy))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id traffic-policy-version-marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable id traffic-policy-version-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicies/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ListTrafficPolicyVersions"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchTrafficPolicy" . no-such-traffic-policy)))))
 (common-lisp:export 'list-traffic-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-vpcassociation-authorizations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-vpcassociation-authorizations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A/authorizevpcassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ListVPCAssociationAuthorizations"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidInput" . invalid-input)
        ("InvalidPaginationToken" . invalid-pagination-token)))))
 (common-lisp:export 'list-vpcassociation-authorizations))
(common-lisp:progn
 (common-lisp:defun test-dnsanswer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id record-name record-type
                     resolver-ip edns0client-subnet-ip edns0client-subnet-mask)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id record-name record-type resolver-ip
     edns0client-subnet-ip edns0client-subnet-mask))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-dnsanswer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2013-04-01/testdnsanswer"
                                                        "TestDNSAnswer"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'test-dnsanswer))
(common-lisp:progn
 (common-lisp:defun update-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id health-check-version
                     ipaddress port resource-path fully-qualified-domain-name
                     search-string failure-threshold inverted health-threshold
                     child-health-checks enable-sni regions alarm-identifier
                     insufficient-data-health-status)
   (common-lisp:declare
    (common-lisp:ignorable health-check-id health-check-version ipaddress port
     resource-path fully-qualified-domain-name search-string failure-threshold
     inverted health-threshold child-health-checks enable-sni regions
     alarm-identifier insufficient-data-health-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/healthcheck/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'health-check-id))))
                                                        "UpdateHealthCheck"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHealthCheck" . no-such-health-check)
        ("InvalidInput" . invalid-input)
        ("HealthCheckVersionMismatch" . health-check-version-mismatch)))))
 (common-lisp:export 'update-health-check))
(common-lisp:progn
 (common-lisp:defun update-hosted-zone-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id comment)
   (common-lisp:declare (common-lisp:ignorable id comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-hosted-zone-comment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/hostedzone/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateHostedZoneComment"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("NoSuchHostedZone" . no-such-hosted-zone)
        ("InvalidInput" . invalid-input)))))
 (common-lisp:export 'update-hosted-zone-comment))
(common-lisp:progn
 (common-lisp:defun update-traffic-policy-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id version comment)
   (common-lisp:declare (common-lisp:ignorable id version comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-traffic-policy-comment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicy/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "UpdateTrafficPolicyComment"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchTrafficPolicy" . no-such-traffic-policy)
        ("ConcurrentModification" . concurrent-modification)))))
 (common-lisp:export 'update-traffic-policy-comment))
(common-lisp:progn
 (common-lisp:defun update-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id ttl traffic-policy-id
                     traffic-policy-version)
   (common-lisp:declare
    (common-lisp:ignorable id ttl traffic-policy-id traffic-policy-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2013-04-01/trafficpolicyinstance/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateTrafficPolicyInstance"
                                                        "2013-04-01"))
      common-lisp:nil common-lisp:nil
      '(("InvalidInput" . invalid-input)
        ("NoSuchTrafficPolicy" . no-such-traffic-policy)
        ("NoSuchTrafficPolicyInstance" . no-such-traffic-policy-instance)
        ("PriorRequestNotComplete" . prior-request-not-complete)
        ("ConflictingTypes" . conflicting-types)))))
 (common-lisp:export 'update-traffic-policy-instance))

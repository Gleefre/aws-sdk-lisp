;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sms/api
  (:use)
  (:nicknames #:aws/sms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sms/api)
(common-lisp:progn
 (common-lisp:defclass sms-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "sms"))
 (common-lisp:export 'sms-request))
(common-lisp:progn
 (common-lisp:define-condition sms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sms-error))
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-"))
   (connector-id common-lisp:nil :type
    (common-lisp:or connector-id common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or connector-version common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or connector-status common-lisp:null))
   (capability-list common-lisp:nil :type
    (common-lisp:or connector-capability-list common-lisp:null))
   (vm-manager-name common-lisp:nil :type
    (common-lisp:or vm-manager-name common-lisp:null))
   (vm-manager-type common-lisp:nil :type
    (common-lisp:or vm-manager-type common-lisp:null))
   (vm-manager-id common-lisp:nil :type
    (common-lisp:or vm-manager-id common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or mac-address common-lisp:null))
   (associated-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connector 'make-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-list))
      (common-lisp:list
       (common-lisp:cons "capabilityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-name))
      (common-lisp:list
       (common-lisp:cons "vmManagerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-type))
      (common-lisp:list
       (common-lisp:cons "vmManagerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-id))
      (common-lisp:list
       (common-lisp:cons "vmManagerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-on))
      (common-lisp:list
       (common-lisp:cons "associatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector))
   common-lisp:nil))
(common-lisp:deftype connector-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-capability-list ()
   '(trivial-types:proper-list connector-capability))
 (common-lisp:defun |make-connector-capability-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-list () '(trivial-types:proper-list connector))
 (common-lisp:defun |make-connector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-status () 'common-lisp:string)
(common-lisp:deftype connector-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-replication-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-replication-job-request-"))
   (server-id (common-lisp:error ":serverid is required") :type
    (common-lisp:or server-id common-lisp:null))
   (seed-replication-time
    (common-lisp:error ":seedreplicationtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (frequency (common-lisp:error ":frequency is required") :type
    (common-lisp:or frequency common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or license-type common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or role-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-replication-job-request
                    'make-create-replication-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seed-replication-time))
      (common-lisp:list
       (common-lisp:cons "seedReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-replication-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-replication-job-response-"))
   (replication-job-id common-lisp:nil :type
    (common-lisp:or replication-job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-replication-job-response
                    'make-create-replication-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-replication-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-replication-job-request-"))
   (replication-job-id (common-lisp:error ":replicationjobid is required")
    :type (common-lisp:or replication-job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-replication-job-request
                    'make-delete-replication-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-replication-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-replication-job-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-replication-job-response
                    'make-delete-replication-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-server-catalog-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-server-catalog-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-server-catalog-request
                    'make-delete-server-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-server-catalog-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-server-catalog-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-server-catalog-response
                    'make-delete-server-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-connector-request-"))
   (connector-id (common-lisp:error ":connectorid is required") :type
    (common-lisp:or connector-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-connector-request
                    'make-disassociate-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-connector-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-connector-response
                    'make-disassociate-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-response))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype frequency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connectors-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connectors-request 'make-get-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connectors-response-"))
   (connector-list common-lisp:nil :type
    (common-lisp:or connector-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connectors-response 'make-get-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-list))
      (common-lisp:list
       (common-lisp:cons "connectorList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-replication-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-replication-jobs-request-"))
   (replication-job-id common-lisp:nil :type
    (common-lisp:or replication-job-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-replication-jobs-request
                    'make-get-replication-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-replication-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-replication-jobs-response-"))
   (replication-job-list common-lisp:nil :type
    (common-lisp:or replication-job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-replication-jobs-response
                    'make-get-replication-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-job-list))
      (common-lisp:list
       (common-lisp:cons "replicationJobList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-replication-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-replication-runs-request-"))
   (replication-job-id (common-lisp:error ":replicationjobid is required")
    :type (common-lisp:or replication-job-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-replication-runs-request
                    'make-get-replication-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-replication-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-replication-runs-response-"))
   (replication-job common-lisp:nil :type
    (common-lisp:or replication-job common-lisp:null))
   (replication-run-list common-lisp:nil :type
    (common-lisp:or replication-run-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-replication-runs-response
                    'make-get-replication-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job))
      (common-lisp:list
       (common-lisp:cons "replicationJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-run-list))
      (common-lisp:list
       (common-lisp:cons "replicationRunList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-servers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-servers-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-servers-request 'make-get-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-servers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-servers-response-"))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (server-catalog-status common-lisp:nil :type
    (common-lisp:or server-catalog-status common-lisp:null))
   (server-list common-lisp:nil :type
    (common-lisp:or server-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-servers-response 'make-get-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "lastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-catalog-status))
      (common-lisp:list
       (common-lisp:cons "serverCatalogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-list))
      (common-lisp:list
       (common-lisp:cons "serverList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-server-catalog-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-server-catalog-request-")))
 (common-lisp:export
  (common-lisp:list 'import-server-catalog-request
                    'make-import-server-catalog-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-server-catalog-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-server-catalog-response-")))
 (common-lisp:export
  (common-lisp:list 'import-server-catalog-response
                    'make-import-server-catalog-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-error
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error 'internal-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype license-type () 'common-lisp:string)
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition missing-required-parameter-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-required-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'missing-required-parameter-exception
                    'missing-required-parameter-exception-message)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-connectors-available-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-connectors-available-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-connectors-available-exception
                    'no-connectors-available-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-not-permitted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-permitted-exception
                    'operation-not-permitted-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-job-"))
   (replication-job-id common-lisp:nil :type
    (common-lisp:or replication-job-id common-lisp:null))
   (server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (server-type common-lisp:nil :type
    (common-lisp:or server-type common-lisp:null))
   (vm-server common-lisp:nil :type
    (common-lisp:or vm-server common-lisp:null))
   (seed-replication-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (frequency common-lisp:nil :type
    (common-lisp:or frequency common-lisp:null))
   (next-replication-run-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or license-type common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or role-name common-lisp:null))
   (latest-ami-id common-lisp:nil :type
    (common-lisp:or ami-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or replication-job-state common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or replication-job-status-message common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (replication-run-list common-lisp:nil :type
    (common-lisp:or replication-run-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'replication-job 'make-replication-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-type))
      (common-lisp:list
       (common-lisp:cons "serverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-server))
      (common-lisp:list
       (common-lisp:cons "vmServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seed-replication-time))
      (common-lisp:list
       (common-lisp:cons "seedReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-replication-run-start-time))
      (common-lisp:list
       (common-lisp:cons "nextReplicationRunStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-ami-id))
      (common-lisp:list
       (common-lisp:cons "latestAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-run-list))
      (common-lisp:list
       (common-lisp:cons "replicationRunList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-job-already-exists-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       replication-job-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'replication-job-already-exists-exception
                    'replication-job-already-exists-exception-message)))
(common-lisp:deftype replication-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-job-list ()
   '(trivial-types:proper-list replication-job))
 (common-lisp:defun |make-replication-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition replication-job-not-found-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       replication-job-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'replication-job-not-found-exception
                    'replication-job-not-found-exception-message)))
(common-lisp:deftype replication-job-state () 'common-lisp:string)
(common-lisp:deftype replication-job-status-message () 'common-lisp:string)
(common-lisp:deftype replication-job-terminated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-run (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-run-"))
   (replication-run-id common-lisp:nil :type
    (common-lisp:or replication-run-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or replication-run-state common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or replication-run-type common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or replication-run-status-message common-lisp:null))
   (ami-id common-lisp:nil :type (common-lisp:or ami-id common-lisp:null))
   (scheduled-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'replication-run 'make-replication-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-run-id))
      (common-lisp:list
       (common-lisp:cons "replicationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "amiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-start-time))
      (common-lisp:list
       (common-lisp:cons "scheduledStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-time))
      (common-lisp:list
       (common-lisp:cons "completedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-run))
   common-lisp:nil))
(common-lisp:deftype replication-run-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition replication-run-limit-exceeded-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       replication-run-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'replication-run-limit-exceeded-exception
                    'replication-run-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype replication-run-list ()
   '(trivial-types:proper-list replication-run))
 (common-lisp:defun |make-replication-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-run-state () 'common-lisp:string)
(common-lisp:deftype replication-run-status-message () 'common-lisp:string)
(common-lisp:deftype replication-run-type () 'common-lisp:string)
(common-lisp:deftype role-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server (:copier common-lisp:nil) (:conc-name "struct-shape-server-"))
   (server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (server-type common-lisp:nil :type
    (common-lisp:or server-type common-lisp:null))
   (vm-server common-lisp:nil :type
    (common-lisp:or vm-server common-lisp:null))
   (replication-job-id common-lisp:nil :type
    (common-lisp:or replication-job-id common-lisp:null))
   (replication-job-terminated common-lisp:nil :type
    (common-lisp:or replication-job-terminated common-lisp:null)))
 (common-lisp:export (common-lisp:list 'server 'make-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-type))
      (common-lisp:list
       (common-lisp:cons "serverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-server))
      (common-lisp:list
       (common-lisp:cons "vmServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-job-terminated))
      (common-lisp:list
       (common-lisp:cons "replicationJobTerminated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition server-cannot-be-replicated-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-cannot-be-replicated-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-cannot-be-replicated-exception
                    'server-cannot-be-replicated-exception-message)))
(common-lisp:deftype server-catalog-status () 'common-lisp:string)
(common-lisp:deftype server-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype server-list () '(trivial-types:proper-list server))
 (common-lisp:defun |make-server-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-on-demand-replication-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-on-demand-replication-run-request-"))
   (replication-job-id (common-lisp:error ":replicationjobid is required")
    :type (common-lisp:or replication-job-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-replication-run-request
                    'make-start-on-demand-replication-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-on-demand-replication-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-on-demand-replication-run-response-"))
   (replication-run-id common-lisp:nil :type
    (common-lisp:or replication-run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-replication-run-response
                    'make-start-on-demand-replication-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-run-id))
      (common-lisp:list
       (common-lisp:cons "replicationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-operation-exception
     (sms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-operation-exception
                    'unauthorized-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-replication-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-replication-job-request-"))
   (replication-job-id (common-lisp:error ":replicationjobid is required")
    :type (common-lisp:or replication-job-id common-lisp:null))
   (frequency common-lisp:nil :type
    (common-lisp:or frequency common-lisp:null))
   (next-replication-run-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (license-type common-lisp:nil :type
    (common-lisp:or license-type common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or role-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-replication-job-request
                    'make-update-replication-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-replication-run-start-time))
      (common-lisp:list
       (common-lisp:cons "nextReplicationRunStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-replication-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-replication-job-response-")))
 (common-lisp:export
  (common-lisp:list 'update-replication-job-response
                    'make-update-replication-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-response))
   common-lisp:nil))
(common-lisp:deftype vm-id () 'common-lisp:string)
(common-lisp:deftype vm-manager-id () 'common-lisp:string)
(common-lisp:deftype vm-manager-name () 'common-lisp:string)
(common-lisp:deftype vm-manager-type () 'common-lisp:string)
(common-lisp:deftype vm-name () 'common-lisp:string)
(common-lisp:deftype vm-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vm-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-vm-server-"))
   (vm-server-address common-lisp:nil :type
    (common-lisp:or vm-server-address common-lisp:null))
   (vm-name common-lisp:nil :type (common-lisp:or vm-name common-lisp:null))
   (vm-manager-name common-lisp:nil :type
    (common-lisp:or vm-manager-name common-lisp:null))
   (vm-manager-type common-lisp:nil :type
    (common-lisp:or vm-manager-type common-lisp:null))
   (vm-path common-lisp:nil :type (common-lisp:or vm-path common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vm-server 'make-vm-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vm-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vm-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-server-address))
      (common-lisp:list
       (common-lisp:cons "vmServerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-name))
      (common-lisp:list
       (common-lisp:cons "vmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-name))
      (common-lisp:list
       (common-lisp:cons "vmManagerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-type))
      (common-lisp:list
       (common-lisp:cons "vmManagerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-path))
      (common-lisp:list
       (common-lisp:cons "vmPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vm-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vm-server-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-vm-server-address-"))
   (vm-manager-id common-lisp:nil :type
    (common-lisp:or vm-manager-id common-lisp:null))
   (vm-id common-lisp:nil :type (common-lisp:or vm-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vm-server-address 'make-vm-server-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vm-server-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vm-server-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-id))
      (common-lisp:list
       (common-lisp:cons "vmManagerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-id))
      (common-lisp:list
       (common-lisp:cons "vmId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vm-server-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id seed-replication-time frequency
                     license-type role-name description)
   (common-lisp:declare
    (common-lisp:ignorable server-id seed-replication-time frequency
     license-type role-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replication-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReplicationJob"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("UnauthorizedOperationException" . unauthorized-operation-exception)
        ("OperationNotPermittedException" . operation-not-permitted-exception)
        ("ServerCannotBeReplicatedException"
         . server-cannot-be-replicated-exception)
        ("ReplicationJobAlreadyExistsException"
         . replication-job-already-exists-exception)
        ("NoConnectorsAvailableException" . no-connectors-available-exception)
        ("InternalError" . internal-error)))))
 (common-lisp:export 'create-replication-job))
(common-lisp:progn
 (common-lisp:defun delete-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id)
   (common-lisp:declare (common-lisp:ignorable replication-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replication-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationJob"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("UnauthorizedOperationException" . unauthorized-operation-exception)
        ("OperationNotPermittedException" . operation-not-permitted-exception)
        ("ReplicationJobNotFoundException"
         . replication-job-not-found-exception)))))
 (common-lisp:export 'delete-replication-job))
(common-lisp:progn
 (common-lisp:defun delete-server-catalog ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sms-request :method "POST" :path "/" :params
                                `(("Action" ,@"DeleteServerCatalog")
                                  ("Version" ,@"2016-10-24"))))
    common-lisp:nil common-lisp:nil
    '(("UnauthorizedOperationException" . unauthorized-operation-exception)
      ("OperationNotPermittedException" . operation-not-permitted-exception)
      ("InvalidParameterException" . invalid-parameter-exception)
      ("MissingRequiredParameterException"
       . missing-required-parameter-exception))))
 (common-lisp:export 'delete-server-catalog))
(common-lisp:progn
 (common-lisp:defun disassociate-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateConnector"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("UnauthorizedOperationException" . unauthorized-operation-exception)
        ("OperationNotPermittedException" . operation-not-permitted-exception)
        ("InvalidParameterException" . invalid-parameter-exception)))))
 (common-lisp:export 'disassociate-connector))
(common-lisp:progn
 (common-lisp:defun get-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConnectors"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("UnauthorizedOperationException"
         . unauthorized-operation-exception)))))
 (common-lisp:export 'get-connectors))
(common-lisp:progn
 (common-lisp:defun get-replication-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable replication-job-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-replication-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReplicationJobs"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("UnauthorizedOperationException"
         . unauthorized-operation-exception)))))
 (common-lisp:export 'get-replication-jobs))
(common-lisp:progn
 (common-lisp:defun get-replication-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable replication-job-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-replication-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReplicationRuns"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("UnauthorizedOperationException"
         . unauthorized-operation-exception)))))
 (common-lisp:export 'get-replication-runs))
(common-lisp:progn
 (common-lisp:defun get-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetServers"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("UnauthorizedOperationException"
         . unauthorized-operation-exception)))))
 (common-lisp:export 'get-servers))
(common-lisp:progn
 (common-lisp:defun import-server-catalog ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sms-request :method "POST" :path "/" :params
                                `(("Action" ,@"ImportServerCatalog")
                                  ("Version" ,@"2016-10-24"))))
    common-lisp:nil common-lisp:nil
    '(("UnauthorizedOperationException" . unauthorized-operation-exception)
      ("OperationNotPermittedException" . operation-not-permitted-exception)
      ("InvalidParameterException" . invalid-parameter-exception)
      ("MissingRequiredParameterException"
       . missing-required-parameter-exception)
      ("NoConnectorsAvailableException" . no-connectors-available-exception))))
 (common-lisp:export 'import-server-catalog))
(common-lisp:progn
 (common-lisp:defun start-on-demand-replication-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id description)
   (common-lisp:declare (common-lisp:ignorable replication-job-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-on-demand-replication-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartOnDemandReplicationRun"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("UnauthorizedOperationException" . unauthorized-operation-exception)
        ("OperationNotPermittedException" . operation-not-permitted-exception)
        ("ReplicationRunLimitExceededException"
         . replication-run-limit-exceeded-exception)))))
 (common-lisp:export 'start-on-demand-replication-run))
(common-lisp:progn
 (common-lisp:defun update-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id frequency
                     next-replication-run-start-time license-type role-name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable replication-job-id frequency
     next-replication-run-start-time license-type role-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-replication-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateReplicationJob"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil
      '(("InvalidParameterException" . invalid-parameter-exception)
        ("MissingRequiredParameterException"
         . missing-required-parameter-exception)
        ("OperationNotPermittedException" . operation-not-permitted-exception)
        ("UnauthorizedOperationException" . unauthorized-operation-exception)
        ("ServerCannotBeReplicatedException"
         . server-cannot-be-replicated-exception)
        ("ReplicationJobNotFoundException"
         . replication-job-not-found-exception)
        ("InternalError" . internal-error)))))
 (common-lisp:export 'update-replication-job))

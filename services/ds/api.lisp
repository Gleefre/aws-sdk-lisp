;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ds/api
  (:use)
  (:nicknames #:aws/ds)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request))
(common-lisp:in-package #:aws-sdk/services/ds/api)
(common-lisp:progn
 (common-lisp:defclass ds-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "ds"))
 (common-lisp:export 'ds-request))
(common-lisp:deftype access-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-ip-routes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-ip-routes-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (ip-routes (common-lisp:error ":ip-routes is required") :type
    (common-lisp:or ip-routes common-lisp:null))
   (update-security-group-for-directory-controllers common-lisp:nil :type
    (common-lisp:or update-security-group-for-directory-controllers
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-ip-routes-request 'make-add-ip-routes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-ip-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-ip-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-routes))
      (common-lisp:list
       (common-lisp:cons "IpRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-security-group-for-directory-controllers))
      (common-lisp:list
       (common-lisp:cons "UpdateSecurityGroupForDirectoryControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-ip-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-ip-routes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-ip-routes-result-")))
 (common-lisp:export
  (common-lisp:list 'add-ip-routes-result 'make-add-ip-routes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-ip-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-resource-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-request
                    'make-add-tags-to-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-result
                    'make-add-tags-to-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   common-lisp:nil))
(common-lisp:deftype added-date-time () 'common-lisp:string)
(common-lisp:deftype alias-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-"))
   (name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (authentication-failed-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-authentication-failed-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authentication-failed-exception
                    'make-authentication-failed-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-failed-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-failed-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-failed-exception))
   common-lisp:nil))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-schema-extension-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-schema-extension-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (schema-extension-id (common-lisp:error ":schema-extension-id is required")
    :type (common-lisp:or schema-extension-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-schema-extension-request
                    'make-cancel-schema-extension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-extension-id))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-schema-extension-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-schema-extension-result-")))
 (common-lisp:export
  (common-lisp:list 'cancel-schema-extension-result
                    'make-cancel-schema-extension-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-result))
   common-lisp:nil))
(common-lisp:deftype cidr-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cidr-ips () '(trivial-types:proper-list cidr-ip))
 (common-lisp:defun |make-cidr-ips|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr-ip))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (client-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-client-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'make-client-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-exception))
   common-lisp:nil))
(common-lisp:deftype cloud-only-directories-limit-reached ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (computer (:copier common-lisp:nil) (:conc-name "struct-shape-computer-"))
   (computer-id common-lisp:nil :type (common-lisp:or sid common-lisp:null))
   (computer-name common-lisp:nil :type
    (common-lisp:or computer-name common-lisp:null))
   (computer-attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'computer 'make-computer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input computer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input computer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-id))
      (common-lisp:list
       (common-lisp:cons "ComputerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "ComputerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input computer))
   common-lisp:nil))
(common-lisp:deftype computer-name () 'common-lisp:string)
(common-lisp:deftype computer-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-forwarder (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-forwarder-"))
   (remote-domain-name common-lisp:nil :type
    (common-lisp:or remote-domain-name common-lisp:null))
   (dns-ip-addrs common-lisp:nil :type
    (common-lisp:or dns-ip-addrs common-lisp:null))
   (replication-scope common-lisp:nil :type
    (common-lisp:or replication-scope common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-forwarder 'make-conditional-forwarder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-forwarder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-forwarder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-scope))
      (common-lisp:list
       (common-lisp:cons "ReplicationScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-forwarder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conditional-forwarders ()
   '(trivial-types:proper-list conditional-forwarder))
 (common-lisp:defun |make-conditional-forwarders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conditional-forwarder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (connect-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-connect-directory-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or directory-name common-lisp:null))
   (short-name common-lisp:nil :type
    (common-lisp:or directory-short-name common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or connect-password common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or directory-size common-lisp:null))
   (connect-settings (common-lisp:error ":connect-settings is required") :type
    (common-lisp:or directory-connect-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connect-directory-request
                    'make-connect-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connect-directory-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-connect-directory-result-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connect-directory-result 'make-connect-directory-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-result))
   common-lisp:nil))
(common-lisp:deftype connect-password () 'common-lisp:string)
(common-lisp:deftype connected-directories-limit-reached ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (create-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-alias-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-alias-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-alias-result-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-alias-result 'make-create-alias-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-computer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-computer-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (computer-name (common-lisp:error ":computer-name is required") :type
    (common-lisp:or computer-name common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or computer-password common-lisp:null))
   (organizational-unit-distinguished-name common-lisp:nil :type
    (common-lisp:or organizational-unit-dn common-lisp:null))
   (computer-attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-computer-request 'make-create-computer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "ComputerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-computer-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-computer-result-"))
   (computer common-lisp:nil :type (common-lisp:or computer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-computer-result 'make-create-computer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer))
      (common-lisp:list
       (common-lisp:cons "Computer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-conditional-forwarder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-conditional-forwarder-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (remote-domain-name (common-lisp:error ":remote-domain-name is required")
    :type (common-lisp:or remote-domain-name common-lisp:null))
   (dns-ip-addrs (common-lisp:error ":dns-ip-addrs is required") :type
    (common-lisp:or dns-ip-addrs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-conditional-forwarder-request
                    'make-create-conditional-forwarder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-conditional-forwarder-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-conditional-forwarder-result-")))
 (common-lisp:export
  (common-lisp:list 'create-conditional-forwarder-result
                    'make-create-conditional-forwarder-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-directory-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or directory-name common-lisp:null))
   (short-name common-lisp:nil :type
    (common-lisp:or directory-short-name common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or directory-size common-lisp:null))
   (vpc-settings common-lisp:nil :type
    (common-lisp:or directory-vpc-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-directory-request 'make-create-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-directory-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-directory-result-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-directory-result 'make-create-directory-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-microsoft-adrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-microsoft-adrequest-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or directory-name common-lisp:null))
   (short-name common-lisp:nil :type
    (common-lisp:or directory-short-name common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (vpc-settings (common-lisp:error ":vpc-settings is required") :type
    (common-lisp:or directory-vpc-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-microsoft-adrequest
                    'make-create-microsoft-adrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-microsoft-adresult (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-microsoft-adresult-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-microsoft-adresult
                    'make-create-microsoft-adresult))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adresult))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adresult))
   common-lisp:nil))
(common-lisp:deftype create-snapshot-before-schema-extension ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or snapshot-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-request 'make-create-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-result-"))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or snapshot-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-result 'make-create-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trust-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trust-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (remote-domain-name (common-lisp:error ":remote-domain-name is required")
    :type (common-lisp:or remote-domain-name common-lisp:null))
   (trust-password (common-lisp:error ":trust-password is required") :type
    (common-lisp:or trust-password common-lisp:null))
   (trust-direction (common-lisp:error ":trust-direction is required") :type
    (common-lisp:or trust-direction common-lisp:null))
   (trust-type common-lisp:nil :type
    (common-lisp:or trust-type common-lisp:null))
   (conditional-forwarder-ip-addrs common-lisp:nil :type
    (common-lisp:or dns-ip-addrs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trust-request 'make-create-trust-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-password))
      (common-lisp:list
       (common-lisp:cons "TrustPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-direction))
      (common-lisp:list
       (common-lisp:cons "TrustDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-type))
      (common-lisp:list
       (common-lisp:cons "TrustType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-forwarder-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "ConditionalForwarderIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trust-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trust-result-"))
   (trust-id common-lisp:nil :type (common-lisp:or trust-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trust-result 'make-create-trust-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-trust-result))
   common-lisp:nil))
(common-lisp:deftype created-date-time () 'common-lisp:string)
(common-lisp:deftype delete-associated-conditional-forwarder ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-conditional-forwarder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-conditional-forwarder-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (remote-domain-name (common-lisp:error ":remote-domain-name is required")
    :type (common-lisp:or remote-domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-conditional-forwarder-request
                    'make-delete-conditional-forwarder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-conditional-forwarder-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-conditional-forwarder-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-conditional-forwarder-result
                    'make-delete-conditional-forwarder-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-directory-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-directory-request 'make-delete-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-directory-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-directory-result-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-directory-result 'make-delete-directory-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-request-"))
   (snapshot-id (common-lisp:error ":snapshot-id is required") :type
    (common-lisp:or snapshot-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-request 'make-delete-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-result-"))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or snapshot-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-result 'make-delete-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trust-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trust-request-"))
   (trust-id (common-lisp:error ":trust-id is required") :type
    (common-lisp:or trust-id common-lisp:null))
   (delete-associated-conditional-forwarder common-lisp:nil :type
    (common-lisp:or delete-associated-conditional-forwarder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trust-request 'make-delete-trust-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-associated-conditional-forwarder))
      (common-lisp:list
       (common-lisp:cons "DeleteAssociatedConditionalForwarder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trust-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trust-result-"))
   (trust-id common-lisp:nil :type (common-lisp:or trust-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trust-result 'make-delete-trust-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-trust-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-event-topic-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-event-topic-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (topic-name (common-lisp:error ":topic-name is required") :type
    (common-lisp:or topic-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-event-topic-request
                    'make-deregister-event-topic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-event-topic-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-event-topic-result-")))
 (common-lisp:export
  (common-lisp:list 'deregister-event-topic-result
                    'make-deregister-event-topic-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-conditional-forwarders-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-conditional-forwarders-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (remote-domain-names common-lisp:nil :type
    (common-lisp:or remote-domain-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-conditional-forwarders-request
                    'make-describe-conditional-forwarders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-names))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-conditional-forwarders-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-conditional-forwarders-result-"))
   (conditional-forwarders common-lisp:nil :type
    (common-lisp:or conditional-forwarders common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-conditional-forwarders-result
                    'make-describe-conditional-forwarders-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-forwarders))
      (common-lisp:list
       (common-lisp:cons "ConditionalForwarders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-directories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-directories-request-"))
   (directory-ids common-lisp:nil :type
    (common-lisp:or directory-ids common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-directories-request
                    'make-describe-directories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-ids))
      (common-lisp:list
       (common-lisp:cons "DirectoryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-directories-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-directories-result-"))
   (directory-descriptions common-lisp:nil :type
    (common-lisp:or directory-descriptions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-directories-result
                    'make-describe-directories-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-descriptions))
      (common-lisp:list
       (common-lisp:cons "DirectoryDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-controllers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-controllers-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (domain-controller-ids common-lisp:nil :type
    (common-lisp:or domain-controller-ids common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-controllers-request
                    'make-describe-domain-controllers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-controller-ids))
      (common-lisp:list
       (common-lisp:cons "DomainControllerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-controllers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-controllers-result-"))
   (domain-controllers common-lisp:nil :type
    (common-lisp:or domain-controllers common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-controllers-result
                    'make-describe-domain-controllers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-controllers))
      (common-lisp:list
       (common-lisp:cons "DomainControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-topics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-topics-request-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (topic-names common-lisp:nil :type
    (common-lisp:or topic-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-topics-request
                    'make-describe-event-topics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-names))
      (common-lisp:list
       (common-lisp:cons "TopicNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-topics-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-topics-result-"))
   (event-topics common-lisp:nil :type
    (common-lisp:or event-topics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-topics-result
                    'make-describe-event-topics-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-topics))
      (common-lisp:list
       (common-lisp:cons "EventTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshots-request-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (snapshot-ids common-lisp:nil :type
    (common-lisp:or snapshot-ids common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-request
                    'make-describe-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-ids))
      (common-lisp:list
       (common-lisp:cons "SnapshotIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-snapshots-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-snapshots-result-"))
   (snapshots common-lisp:nil :type
    (common-lisp:or snapshots common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-result
                    'make-describe-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trusts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trusts-request-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (trust-ids common-lisp:nil :type
    (common-lisp:or trust-ids common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trusts-request 'make-describe-trusts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-ids))
      (common-lisp:list
       (common-lisp:cons "TrustIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trusts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trusts-result-"))
   (trusts common-lisp:nil :type (common-lisp:or trusts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trusts-result 'make-describe-trusts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusts))
      (common-lisp:list
       (common-lisp:cons "Trusts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype desired-number-of-domain-controllers ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (directory-connect-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-connect-settings-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or vpc-id common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-ids common-lisp:null))
   (customer-dns-ips (common-lisp:error ":customer-dns-ips is required") :type
    (common-lisp:or dns-ip-addrs common-lisp:null))
   (customer-user-name (common-lisp:error ":customer-user-name is required")
    :type (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-connect-settings
                    'make-directory-connect-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-dns-ips))
      (common-lisp:list
       (common-lisp:cons "CustomerDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-user-name))
      (common-lisp:list
       (common-lisp:cons "CustomerUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (directory-connect-settings-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-connect-settings-description-"))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (customer-user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (security-group-id common-lisp:nil :type
    (common-lisp:or security-group-id common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (connect-ips common-lisp:nil :type
    (common-lisp:or ip-addrs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-connect-settings-description
                    'make-directory-connect-settings-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-user-name))
      (common-lisp:list
       (common-lisp:cons "CustomerUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-ips))
      (common-lisp:list
       (common-lisp:cons "ConnectIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (directory-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-description-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or directory-name common-lisp:null))
   (short-name common-lisp:nil :type
    (common-lisp:or directory-short-name common-lisp:null))
   (size common-lisp:nil :type
    (common-lisp:or directory-size common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias-name common-lisp:null))
   (access-url common-lisp:nil :type
    (common-lisp:or access-url common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (dns-ip-addrs common-lisp:nil :type
    (common-lisp:or dns-ip-addrs common-lisp:null))
   (stage common-lisp:nil :type
    (common-lisp:or directory-stage common-lisp:null))
   (launch-time common-lisp:nil :type
    (common-lisp:or launch-time common-lisp:null))
   (stage-last-updated-date-time common-lisp:nil :type
    (common-lisp:or last-updated-date-time common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or directory-type common-lisp:null))
   (vpc-settings common-lisp:nil :type
    (common-lisp:or directory-vpc-settings-description common-lisp:null))
   (connect-settings common-lisp:nil :type
    (common-lisp:or directory-connect-settings-description common-lisp:null))
   (radius-settings common-lisp:nil :type
    (common-lisp:or radius-settings common-lisp:null))
   (radius-status common-lisp:nil :type
    (common-lisp:or radius-status common-lisp:null))
   (stage-reason common-lisp:nil :type
    (common-lisp:or stage-reason common-lisp:null))
   (sso-enabled common-lisp:nil :type
    (common-lisp:or sso-enabled common-lisp:null))
   (desired-number-of-domain-controllers common-lisp:nil :type
    (common-lisp:or desired-number-of-domain-controllers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-description 'make-directory-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-url))
      (common-lisp:list
       (common-lisp:cons "AccessUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stage-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StageLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-status))
      (common-lisp:list
       (common-lisp:cons "RadiusStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-reason))
      (common-lisp:list
       (common-lisp:cons "StageReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-enabled))
      (common-lisp:list
       (common-lisp:cons "SsoEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-number-of-domain-controllers))
      (common-lisp:list
       (common-lisp:cons "DesiredNumberOfDomainControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype directory-descriptions ()
   '(trivial-types:proper-list directory-description))
 (common-lisp:defun |make-directory-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-ids ()
   '(trivial-types:proper-list directory-id))
 (common-lisp:defun |make-directory-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (directory-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-limit-exceeded-exception
                    'make-directory-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (directory-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-limits-"))
   (cloud-only-directories-limit common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (cloud-only-directories-current-count common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (cloud-only-directories-limit-reached common-lisp:nil :type
    (common-lisp:or cloud-only-directories-limit-reached common-lisp:null))
   (cloud-only-microsoft-adlimit common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (cloud-only-microsoft-adcurrent-count common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (cloud-only-microsoft-adlimit-reached common-lisp:nil :type
    (common-lisp:or cloud-only-directories-limit-reached common-lisp:null))
   (connected-directories-limit common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (connected-directories-current-count common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (connected-directories-limit-reached common-lisp:nil :type
    (common-lisp:or connected-directories-limit-reached common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-limits 'make-directory-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input directory-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input directory-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-directories-limit))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyDirectoriesLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-directories-current-count))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyDirectoriesCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-directories-limit-reached))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyDirectoriesLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-microsoft-adlimit))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyMicrosoftADLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-microsoft-adcurrent-count))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyMicrosoftADCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-microsoft-adlimit-reached))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyMicrosoftADLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-directories-limit))
      (common-lisp:list
       (common-lisp:cons "ConnectedDirectoriesLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-directories-current-count))
      (common-lisp:list
       (common-lisp:cons "ConnectedDirectoriesCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-directories-limit-reached))
      (common-lisp:list
       (common-lisp:cons "ConnectedDirectoriesLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input directory-limits))
   common-lisp:nil))
(common-lisp:deftype directory-name () 'common-lisp:string)
(common-lisp:deftype directory-short-name () 'common-lisp:string)
(common-lisp:deftype directory-size () 'common-lisp:string)
(common-lisp:deftype directory-stage () 'common-lisp:string)
(common-lisp:deftype directory-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (directory-unavailable-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-unavailable-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-unavailable-exception
                    'make-directory-unavailable-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-unavailable-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-unavailable-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-unavailable-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (directory-vpc-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-vpc-settings-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or vpc-id common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-vpc-settings 'make-directory-vpc-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (directory-vpc-settings-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-vpc-settings-description-"))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (security-group-id common-lisp:nil :type
    (common-lisp:or security-group-id common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-vpc-settings-description
                    'make-directory-vpc-settings-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-radius-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-radius-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-radius-request 'make-disable-radius-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-radius-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-radius-result-")))
 (common-lisp:export
  (common-lisp:list 'disable-radius-result 'make-disable-radius-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-sso-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-sso-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or connect-password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-sso-request 'make-disable-sso-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-sso-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-sso-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-sso-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-sso-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-sso-result-")))
 (common-lisp:export
  (common-lisp:list 'disable-sso-result 'make-disable-sso-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-sso-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dns-ip-addrs () '(trivial-types:proper-list ip-addr))
 (common-lisp:defun |make-dns-ip-addrs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-addr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-controller (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-controller-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (domain-controller-id common-lisp:nil :type
    (common-lisp:or domain-controller-id common-lisp:null))
   (dns-ip-addr common-lisp:nil :type
    (common-lisp:or ip-addr common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-controller-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or domain-controller-status-reason common-lisp:null))
   (launch-time common-lisp:nil :type
    (common-lisp:or launch-time common-lisp:null))
   (status-last-updated-date-time common-lisp:nil :type
    (common-lisp:or last-updated-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-controller 'make-domain-controller))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-controller))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-controller))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-controller-id))
      (common-lisp:list
       (common-lisp:cons "DomainControllerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addr))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StatusLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-controller))
   common-lisp:nil))
(common-lisp:deftype domain-controller-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-controller-ids ()
   '(trivial-types:proper-list domain-controller-id))
 (common-lisp:defun |make-domain-controller-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-controller-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-controller-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-controller-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-controller-limit-exceeded-exception
                    'make-domain-controller-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-controller-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-controller-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-controller-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:deftype domain-controller-status () 'common-lisp:string)
(common-lisp:deftype domain-controller-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-controllers ()
   '(trivial-types:proper-list domain-controller))
 (common-lisp:defun |make-domain-controllers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-controller))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-radius-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-radius-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (radius-settings (common-lisp:error ":radius-settings is required") :type
    (common-lisp:or radius-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-radius-request 'make-enable-radius-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-radius-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-radius-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-radius-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-radius-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-radius-result-")))
 (common-lisp:export
  (common-lisp:list 'enable-radius-result 'make-enable-radius-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-radius-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-sso-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-sso-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or connect-password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-sso-request 'make-enable-sso-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-sso-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-sso-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-sso-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-sso-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-sso-result-")))
 (common-lisp:export
  (common-lisp:list 'enable-sso-result 'make-enable-sso-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-sso-result))
   common-lisp:nil))
(common-lisp:deftype end-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entity-already-exists-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-already-exists-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'make-entity-already-exists-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          entity-already-exists-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          entity-already-exists-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          entity-already-exists-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-does-not-exist-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-does-not-exist-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-does-not-exist-exception
                    'make-entity-does-not-exist-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          entity-does-not-exist-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          entity-does-not-exist-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          entity-does-not-exist-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-topic (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-topic-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (topic-name common-lisp:nil :type
    (common-lisp:or topic-name common-lisp:null))
   (topic-arn common-lisp:nil :type
    (common-lisp:or topic-arn common-lisp:null))
   (created-date-time common-lisp:nil :type
    (common-lisp:or created-date-time common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or topic-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-topic 'make-event-topic))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-topic))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-topic))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date-time))
      (common-lisp:list
       (common-lisp:cons "CreatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-topic))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-topics () '(trivial-types:proper-list event-topic))
 (common-lisp:defun |make-event-topics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-topic))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-directory-limits-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-directory-limits-request-")))
 (common-lisp:export
  (common-lisp:list 'get-directory-limits-request
                    'make-get-directory-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-directory-limits-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-directory-limits-result-"))
   (directory-limits common-lisp:nil :type
    (common-lisp:or directory-limits common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-directory-limits-result
                    'make-get-directory-limits-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-limits))
      (common-lisp:list
       (common-lisp:cons "DirectoryLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snapshot-limits-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snapshot-limits-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-limits-request
                    'make-get-snapshot-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snapshot-limits-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snapshot-limits-result-"))
   (snapshot-limits common-lisp:nil :type
    (common-lisp:or snapshot-limits common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-limits-result
                    'make-get-snapshot-limits-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-limits))
      (common-lisp:list
       (common-lisp:cons "SnapshotLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (insufficient-permissions-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-insufficient-permissions-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insufficient-permissions-exception
                    'make-insufficient-permissions-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insufficient-permissions-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insufficient-permissions-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insufficient-permissions-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-next-token-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-next-token-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'make-invalid-next-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-parameter-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-parameter-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'make-invalid-parameter-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-parameter-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-parameter-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-parameter-exception))
   common-lisp:nil))
(common-lisp:deftype ip-addr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-addrs () '(trivial-types:proper-list ip-addr))
 (common-lisp:defun |make-ip-addrs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-addr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-route (:copier common-lisp:nil) (:conc-name "struct-shape-ip-route-"))
   (cidr-ip common-lisp:nil :type (common-lisp:or cidr-ip common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-route 'make-ip-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-route-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-route-info-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (cidr-ip common-lisp:nil :type (common-lisp:or cidr-ip common-lisp:null))
   (ip-route-status-msg common-lisp:nil :type
    (common-lisp:or ip-route-status-msg common-lisp:null))
   (added-date-time common-lisp:nil :type
    (common-lisp:or added-date-time common-lisp:null))
   (ip-route-status-reason common-lisp:nil :type
    (common-lisp:or ip-route-status-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-route-info 'make-ip-route-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-route-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-route-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-route-status-msg))
      (common-lisp:list
       (common-lisp:cons "IpRouteStatusMsg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'added-date-time))
      (common-lisp:list
       (common-lisp:cons "AddedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-route-status-reason))
      (common-lisp:list
       (common-lisp:cons "IpRouteStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-route-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-route-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-route-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ip-route-limit-exceeded-exception
                    'make-ip-route-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ip-route-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ip-route-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ip-route-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:deftype ip-route-status-msg () 'common-lisp:string)
(common-lisp:deftype ip-route-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-routes () '(trivial-types:proper-list ip-route))
 (common-lisp:defun |make-ip-routes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-route))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ip-routes-info ()
   '(trivial-types:proper-list ip-route-info))
 (common-lisp:defun |make-ip-routes-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-route-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype last-updated-date-time () 'common-lisp:string)
(common-lisp:deftype launch-time () 'common-lisp:string)
(common-lisp:deftype ldif-content () 'common-lisp:string)
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-ip-routes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ip-routes-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ip-routes-request 'make-list-ip-routes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ip-routes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ip-routes-result-"))
   (ip-routes-info common-lisp:nil :type
    (common-lisp:or ip-routes-info common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ip-routes-result 'make-list-ip-routes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-routes-info))
      (common-lisp:list
       (common-lisp:cons "IpRoutesInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schema-extensions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schema-extensions-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schema-extensions-request
                    'make-list-schema-extensions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schema-extensions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schema-extensions-result-"))
   (schema-extensions-info common-lisp:nil :type
    (common-lisp:or schema-extensions-info common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schema-extensions-result
                    'make-list-schema-extensions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-extensions-info))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-result-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype manual-snapshots-limit-reached () 'common-lisp:boolean)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype organizational-unit-dn () 'common-lisp:string)
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype radius-authentication-protocol () 'common-lisp:string)
(common-lisp:deftype radius-display-label () 'common-lisp:string)
(common-lisp:deftype radius-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (radius-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-radius-settings-"))
   (radius-servers common-lisp:nil :type
    (common-lisp:or servers common-lisp:null))
   (radius-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null))
   (radius-timeout common-lisp:nil :type
    (common-lisp:or radius-timeout common-lisp:null))
   (radius-retries common-lisp:nil :type
    (common-lisp:or radius-retries common-lisp:null))
   (shared-secret common-lisp:nil :type
    (common-lisp:or radius-shared-secret common-lisp:null))
   (authentication-protocol common-lisp:nil :type
    (common-lisp:or radius-authentication-protocol common-lisp:null))
   (display-label common-lisp:nil :type
    (common-lisp:or radius-display-label common-lisp:null))
   (use-same-username common-lisp:nil :type
    (common-lisp:or use-same-username common-lisp:null)))
 (common-lisp:export (common-lisp:list 'radius-settings 'make-radius-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input radius-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input radius-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-servers))
      (common-lisp:list
       (common-lisp:cons "RadiusServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-port))
      (common-lisp:list
       (common-lisp:cons "RadiusPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-timeout))
      (common-lisp:list
       (common-lisp:cons "RadiusTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-retries))
      (common-lisp:list
       (common-lisp:cons "RadiusRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-secret))
      (common-lisp:list
       (common-lisp:cons "SharedSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-protocol))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-label))
      (common-lisp:list
       (common-lisp:cons "DisplayLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-same-username))
      (common-lisp:list
       (common-lisp:cons "UseSameUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input radius-settings))
   common-lisp:nil))
(common-lisp:deftype radius-shared-secret () 'common-lisp:string)
(common-lisp:deftype radius-status () 'common-lisp:string)
(common-lisp:deftype radius-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (register-event-topic-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-event-topic-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (topic-name (common-lisp:error ":topic-name is required") :type
    (common-lisp:or topic-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-event-topic-request
                    'make-register-event-topic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-event-topic-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-event-topic-result-")))
 (common-lisp:export
  (common-lisp:list 'register-event-topic-result
                    'make-register-event-topic-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-result))
   common-lisp:nil))
(common-lisp:deftype remote-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype remote-domain-names ()
   '(trivial-types:proper-list remote-domain-name))
 (common-lisp:defun |make-remote-domain-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list remote-domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-ip-routes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-ip-routes-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (cidr-ips (common-lisp:error ":cidr-ips is required") :type
    (common-lisp:or cidr-ips common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-ip-routes-request 'make-remove-ip-routes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ips))
      (common-lisp:list
       (common-lisp:cons "CidrIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-ip-routes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-ip-routes-result-")))
 (common-lisp:export
  (common-lisp:list 'remove-ip-routes-result 'make-remove-ip-routes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-from-resource-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-request
                    'make-remove-tags-from-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-from-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-result
                    'make-remove-tags-from-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   common-lisp:nil))
(common-lisp:deftype replication-scope () 'common-lisp:string)
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-snapshot-request-"))
   (snapshot-id (common-lisp:error ":snapshot-id is required") :type
    (common-lisp:or snapshot-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-snapshot-request
                    'make-restore-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-snapshot-result-")))
 (common-lisp:export
  (common-lisp:list 'restore-from-snapshot-result
                    'make-restore-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-result))
   common-lisp:nil))
(common-lisp:deftype sid () 'common-lisp:string)
(common-lisp:deftype schema-extension-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-extension-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-extension-info-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (schema-extension-id common-lisp:nil :type
    (common-lisp:or schema-extension-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (schema-extension-status common-lisp:nil :type
    (common-lisp:or schema-extension-status common-lisp:null))
   (schema-extension-status-reason common-lisp:nil :type
    (common-lisp:or schema-extension-status-reason common-lisp:null))
   (start-date-time common-lisp:nil :type
    (common-lisp:or start-date-time common-lisp:null))
   (end-date-time common-lisp:nil :type
    (common-lisp:or end-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-extension-info 'make-schema-extension-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-extension-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-extension-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-extension-id))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-extension-status))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-extension-status-reason))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-extension-info))
   common-lisp:nil))
(common-lisp:deftype schema-extension-status () 'common-lisp:string)
(common-lisp:deftype schema-extension-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-extensions-info ()
   '(trivial-types:proper-list schema-extension-info))
 (common-lisp:defun |make-schema-extensions-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-extension-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype server () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype servers () '(trivial-types:proper-list server))
 (common-lisp:defun |make-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'make-service-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot (:copier common-lisp:nil) (:conc-name "struct-shape-snapshot-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or snapshot-id common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or snapshot-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or snapshot-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or snapshot-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or start-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:deftype snapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshot-ids () '(trivial-types:proper-list snapshot-id))
 (common-lisp:defun |make-snapshot-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-limit-exceeded-exception
                    'make-snapshot-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-limits-"))
   (manual-snapshots-limit common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (manual-snapshots-current-count common-lisp:nil :type
    (common-lisp:or limit common-lisp:null))
   (manual-snapshots-limit-reached common-lisp:nil :type
    (common-lisp:or manual-snapshots-limit-reached common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot-limits 'make-snapshot-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshots-limit))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshots-current-count))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotsCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshots-limit-reached))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotsLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-limits))
   common-lisp:nil))
(common-lisp:deftype snapshot-name () 'common-lisp:string)
(common-lisp:deftype snapshot-status () 'common-lisp:string)
(common-lisp:deftype snapshot-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshots () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshots|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sso-enabled () 'common-lisp:boolean)
(common-lisp:deftype stage-reason () 'common-lisp:string)
(common-lisp:deftype start-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-schema-extension-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-schema-extension-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (create-snapshot-before-schema-extension
    (common-lisp:error ":create-snapshot-before-schema-extension is required")
    :type
    (common-lisp:or create-snapshot-before-schema-extension common-lisp:null))
   (ldif-content (common-lisp:error ":ldif-content is required") :type
    (common-lisp:or ldif-content common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-schema-extension-request
                    'make-start-schema-extension-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-snapshot-before-schema-extension))
      (common-lisp:list
       (common-lisp:cons "CreateSnapshotBeforeSchemaExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ldif-content))
      (common-lisp:list
       (common-lisp:cons "LdifContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-schema-extension-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-schema-extension-result-"))
   (schema-extension-id common-lisp:nil :type
    (common-lisp:or schema-extension-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-schema-extension-result
                    'make-start-schema-extension-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-extension-id))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-result))
   common-lisp:nil))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype state-last-updated-date-time () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-limit-exceeded-exception
                    'make-tag-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype topic-arn () 'common-lisp:string)
(common-lisp:deftype topic-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topic-names () '(trivial-types:proper-list topic-name))
 (common-lisp:defun |make-topic-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype topic-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trust (:copier common-lisp:nil) (:conc-name "struct-shape-trust-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (trust-id common-lisp:nil :type (common-lisp:or trust-id common-lisp:null))
   (remote-domain-name common-lisp:nil :type
    (common-lisp:or remote-domain-name common-lisp:null))
   (trust-type common-lisp:nil :type
    (common-lisp:or trust-type common-lisp:null))
   (trust-direction common-lisp:nil :type
    (common-lisp:or trust-direction common-lisp:null))
   (trust-state common-lisp:nil :type
    (common-lisp:or trust-state common-lisp:null))
   (created-date-time common-lisp:nil :type
    (common-lisp:or created-date-time common-lisp:null))
   (last-updated-date-time common-lisp:nil :type
    (common-lisp:or last-updated-date-time common-lisp:null))
   (state-last-updated-date-time common-lisp:nil :type
    (common-lisp:or state-last-updated-date-time common-lisp:null))
   (trust-state-reason common-lisp:nil :type
    (common-lisp:or trust-state-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trust 'make-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-type))
      (common-lisp:list
       (common-lisp:cons "TrustType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-direction))
      (common-lisp:list
       (common-lisp:cons "TrustDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-state))
      (common-lisp:list
       (common-lisp:cons "TrustState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date-time))
      (common-lisp:list
       (common-lisp:cons "CreatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StateLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-state-reason))
      (common-lisp:list
       (common-lisp:cons "TrustStateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust))
   common-lisp:nil))
(common-lisp:deftype trust-direction () 'common-lisp:string)
(common-lisp:deftype trust-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-ids () '(trivial-types:proper-list trust-id))
 (common-lisp:defun |make-trust-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trust-password () 'common-lisp:string)
(common-lisp:deftype trust-state () 'common-lisp:string)
(common-lisp:deftype trust-state-reason () 'common-lisp:string)
(common-lisp:deftype trust-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trusts () '(trivial-types:proper-list trust))
 (common-lisp:defun |make-trusts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (unsupported-operation-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsupported-operation-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'make-unsupported-operation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-operation-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-operation-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-operation-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-conditional-forwarder-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-conditional-forwarder-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (remote-domain-name (common-lisp:error ":remote-domain-name is required")
    :type (common-lisp:or remote-domain-name common-lisp:null))
   (dns-ip-addrs (common-lisp:error ":dns-ip-addrs is required") :type
    (common-lisp:or dns-ip-addrs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-conditional-forwarder-request
                    'make-update-conditional-forwarder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-conditional-forwarder-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-conditional-forwarder-result-")))
 (common-lisp:export
  (common-lisp:list 'update-conditional-forwarder-result
                    'make-update-conditional-forwarder-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-number-of-domain-controllers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-number-of-domain-controllers-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (desired-number (common-lisp:error ":desired-number is required") :type
    (common-lisp:or desired-number-of-domain-controllers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-number-of-domain-controllers-request
                    'make-update-number-of-domain-controllers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-number))
      (common-lisp:list
       (common-lisp:cons "DesiredNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-number-of-domain-controllers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-number-of-domain-controllers-result-")))
 (common-lisp:export
  (common-lisp:list 'update-number-of-domain-controllers-result
                    'make-update-number-of-domain-controllers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-radius-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-radius-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (radius-settings (common-lisp:error ":radius-settings is required") :type
    (common-lisp:or radius-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-radius-request 'make-update-radius-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-radius-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-radius-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-radius-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-radius-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-radius-result-")))
 (common-lisp:export
  (common-lisp:list 'update-radius-result 'make-update-radius-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-radius-result))
   common-lisp:nil))
(common-lisp:deftype update-security-group-for-directory-controllers ()
  'common-lisp:boolean)
(common-lisp:deftype use-same-username () 'common-lisp:boolean)
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (verify-trust-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-trust-request-"))
   (trust-id (common-lisp:error ":trust-id is required") :type
    (common-lisp:or trust-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-trust-request 'make-verify-trust-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-trust-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-trust-result-"))
   (trust-id common-lisp:nil :type (common-lisp:or trust-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-trust-result 'make-verify-trust-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-trust-result))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-ip-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id ip-routes
                     update-security-group-for-directory-controllers)
   (common-lisp:declare
    (common-lisp:ignorable directory-id ip-routes
     update-security-group-for-directory-controllers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-ip-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddIpRoutes"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-ip-routes))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToResource"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun cancel-schema-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id schema-extension-id)
   (common-lisp:declare
    (common-lisp:ignorable directory-id schema-extension-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-schema-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelSchemaExtension"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-schema-extension))
(common-lisp:progn
 (common-lisp:defun connect-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name short-name password description size
                     connect-settings)
   (common-lisp:declare
    (common-lisp:ignorable name short-name password description size
     connect-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-connect-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConnectDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'connect-directory))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id alias)
   (common-lisp:declare (common-lisp:ignorable directory-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAlias"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-computer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id computer-name password
                     organizational-unit-distinguished-name
                     computer-attributes)
   (common-lisp:declare
    (common-lisp:ignorable directory-id computer-name password
     organizational-unit-distinguished-name computer-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-computer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateComputer"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-computer))
(common-lisp:progn
 (common-lisp:defun create-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name
                     dns-ip-addrs)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name dns-ip-addrs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-conditional-forwarder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConditionalForwarder"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-conditional-forwarder))
(common-lisp:progn
 (common-lisp:defun create-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name short-name password description size
                     vpc-settings)
   (common-lisp:declare
    (common-lisp:ignorable name short-name password description size
     vpc-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-directory))
(common-lisp:progn
 (common-lisp:defun create-microsoft-ad
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name short-name password description
                     vpc-settings)
   (common-lisp:declare
    (common-lisp:ignorable name short-name password description vpc-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-microsoft-adrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMicrosoftAD"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-microsoft-ad))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id name)
   (common-lisp:declare (common-lisp:ignorable directory-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSnapshot"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name
                     trust-password trust-direction trust-type
                     conditional-forwarder-ip-addrs)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name trust-password
     trust-direction trust-type conditional-forwarder-ip-addrs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-trust))
(common-lisp:progn
 (common-lisp:defun delete-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-conditional-forwarder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConditionalForwarder"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-conditional-forwarder))
(common-lisp:progn
 (common-lisp:defun delete-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-directory))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id)
   (common-lisp:declare (common-lisp:ignorable snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSnapshot"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-id
                     delete-associated-conditional-forwarder)
   (common-lisp:declare
    (common-lisp:ignorable trust-id delete-associated-conditional-forwarder))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-trust))
(common-lisp:progn
 (common-lisp:defun deregister-event-topic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id topic-name)
   (common-lisp:declare (common-lisp:ignorable directory-id topic-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-event-topic-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterEventTopic"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'deregister-event-topic))
(common-lisp:progn
 (common-lisp:defun describe-conditional-forwarders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-names)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conditional-forwarders-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConditionalForwarders"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-conditional-forwarders))
(common-lisp:progn
 (common-lisp:defun describe-directories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-ids next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-ids next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-directories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDirectories"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-directories))
(common-lisp:progn
 (common-lisp:defun describe-domain-controllers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id domain-controller-ids
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id domain-controller-ids next-token
     limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-controllers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDomainControllers"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-domain-controllers))
(common-lisp:progn
 (common-lisp:defun describe-event-topics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id topic-names)
   (common-lisp:declare (common-lisp:ignorable directory-id topic-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-event-topics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventTopics"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-event-topics))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id snapshot-ids next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id snapshot-ids next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSnapshots"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-trusts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id trust-ids next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id trust-ids next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-trusts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTrusts"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-trusts))
(common-lisp:progn
 (common-lisp:defun disable-radius
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-radius-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableRadius"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-radius))
(common-lisp:progn
 (common-lisp:defun disable-sso
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id user-name password)
   (common-lisp:declare
    (common-lisp:ignorable directory-id user-name password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-sso-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DisableSso"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-sso))
(common-lisp:progn
 (common-lisp:defun enable-radius
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id radius-settings)
   (common-lisp:declare (common-lisp:ignorable directory-id radius-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-radius-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableRadius"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-radius))
(common-lisp:progn
 (common-lisp:defun enable-sso
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id user-name password)
   (common-lisp:declare
    (common-lisp:ignorable directory-id user-name password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-sso-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "EnableSso"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-sso))
(common-lisp:progn
 (common-lisp:defun get-directory-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ds-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetDirectoryLimits")
                                  ("Version" ,@"2015-04-16"))))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'get-directory-limits))
(common-lisp:progn
 (common-lisp:defun get-snapshot-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-snapshot-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSnapshotLimits"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'get-snapshot-limits))
(common-lisp:progn
 (common-lisp:defun list-ip-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ip-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListIpRoutes"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-ip-routes))
(common-lisp:progn
 (common-lisp:defun list-schema-extensions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schema-extensions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSchemaExtensions"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-schema-extensions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable resource-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-event-topic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id topic-name)
   (common-lisp:declare (common-lisp:ignorable directory-id topic-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-event-topic-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterEventTopic"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'register-event-topic))
(common-lisp:progn
 (common-lisp:defun remove-ip-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id cidr-ips)
   (common-lisp:declare (common-lisp:ignorable directory-id cidr-ips))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-ip-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveIpRoutes"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'remove-ip-routes))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromResource"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun restore-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id)
   (common-lisp:declare (common-lisp:ignorable snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-from-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreFromSnapshot"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'restore-from-snapshot))
(common-lisp:progn
 (common-lisp:defun start-schema-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id
                     create-snapshot-before-schema-extension ldif-content
                     description)
   (common-lisp:declare
    (common-lisp:ignorable directory-id create-snapshot-before-schema-extension
     ldif-content description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-schema-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartSchemaExtension"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'start-schema-extension))
(common-lisp:progn
 (common-lisp:defun update-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name
                     dns-ip-addrs)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name dns-ip-addrs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-conditional-forwarder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConditionalForwarder"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-conditional-forwarder))
(common-lisp:progn
 (common-lisp:defun update-number-of-domain-controllers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id desired-number)
   (common-lisp:declare (common-lisp:ignorable directory-id desired-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-number-of-domain-controllers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNumberOfDomainControllers"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-number-of-domain-controllers))
(common-lisp:progn
 (common-lisp:defun update-radius
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id radius-settings)
   (common-lisp:declare (common-lisp:ignorable directory-id radius-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-radius-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRadius"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-radius))
(common-lisp:progn
 (common-lisp:defun verify-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-id)
   (common-lisp:declare (common-lisp:ignorable trust-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'verify-trust))

;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/workspaces/api
  (:use)
  (:nicknames #:aws/workspaces)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workspaces/api)
(common-lisp:progn
 (common-lisp:defclass workspaces-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "workspaces"))
 (common-lisp:export 'workspaces-request))
(common-lisp:progn
 (common-lisp:define-condition workspaces-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workspaces-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InvalidParameterValuesException" . invalid-parameter-values-exception)
    ("InvalidResourceStateException" . invalid-resource-state-exception)
    ("OperationInProgressException" . operation-in-progress-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("UnsupportedWorkspaceConfigurationException"
     . unsupported-workspace-configuration-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype alias () 'common-lisp:string)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:deftype bundle-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bundle-id-list () '(trivial-types:proper-list bundle-id))
 (common-lisp:defun |make-bundle-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype bundle-list ()
   '(trivial-types:proper-list workspace-bundle))
 (common-lisp:defun |make-bundle-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bundle-owner () 'common-lisp:string)
(common-lisp:deftype compute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (compute-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-compute-type-"))
   (name common-lisp:nil :type (common-lisp:or compute common-lisp:null)))
 (common-lisp:export (common-lisp:list 'compute-type 'make-compute-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-type))
   common-lisp:nil))
(common-lisp:deftype computer-name () 'common-lisp:string)
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-result-")))
 (common-lisp:export
  (common-lisp:list 'create-tags-result 'make-create-tags-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workspaces-request-"))
   (workspaces (common-lisp:error ":workspaces is required") :type
    (common-lisp:or workspace-request-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workspaces-request
                    'make-create-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspaces))
      (common-lisp:list
       (common-lisp:cons "Workspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workspaces-result-"))
   (failed-requests common-lisp:nil :type
    (common-lisp:or failed-create-workspace-requests common-lisp:null))
   (pending-requests common-lisp:nil :type
    (common-lisp:or workspace-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workspaces-result 'make-create-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-requests))
      (common-lisp:list
       (common-lisp:cons "PendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype default-ou () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (default-workspace-creation-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-workspace-creation-properties-"))
   (enable-work-docs common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (enable-internet-access common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (default-ou common-lisp:nil :type
    (common-lisp:or default-ou common-lisp:null))
   (custom-security-group-id common-lisp:nil :type
    (common-lisp:or security-group-id common-lisp:null))
   (user-enabled-as-local-administrator common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-workspace-creation-properties
                    'make-default-workspace-creation-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-workspace-creation-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-workspace-creation-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-work-docs))
      (common-lisp:list
       (common-lisp:cons "EnableWorkDocs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ou))
      (common-lisp:list
       (common-lisp:cons "DefaultOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-security-group-id))
      (common-lisp:list
       (common-lisp:cons "CustomSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-enabled-as-local-administrator))
      (common-lisp:list
       (common-lisp:cons "UserEnabledAsLocalAdministrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-workspace-creation-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-tags-result 'make-delete-tags-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-result-"))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-result 'make-describe-tags-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspace-bundles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workspace-bundles-request-"))
   (bundle-ids common-lisp:nil :type
    (common-lisp:or bundle-id-list common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or bundle-owner common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-bundles-request
                    'make-describe-workspace-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-ids))
      (common-lisp:list
       (common-lisp:cons "BundleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspace-bundles-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workspace-bundles-result-"))
   (bundles common-lisp:nil :type
    (common-lisp:or bundle-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-bundles-result
                    'make-describe-workspace-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "Bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspace-directories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workspace-directories-request-"))
   (directory-ids common-lisp:nil :type
    (common-lisp:or directory-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-directories-request
                    'make-describe-workspace-directories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-ids))
      (common-lisp:list
       (common-lisp:cons "DirectoryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspace-directories-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workspace-directories-result-"))
   (directories common-lisp:nil :type
    (common-lisp:or directory-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-directories-result
                    'make-describe-workspace-directories-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directories))
      (common-lisp:list
       (common-lisp:cons "Directories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspaces-connection-status-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-workspaces-connection-status-request-"))
   (workspace-ids common-lisp:nil :type
    (common-lisp:or workspace-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-connection-status-request
                    'make-describe-workspaces-connection-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-ids))
      (common-lisp:list
       (common-lisp:cons "WorkspaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspaces-connection-status-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-workspaces-connection-status-result-"))
   (workspaces-connection-status common-lisp:nil :type
    (common-lisp:or workspace-connection-status-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-connection-status-result
                    'make-describe-workspaces-connection-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspaces-connection-status))
      (common-lisp:list
       (common-lisp:cons "WorkspacesConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workspaces-request-"))
   (workspace-ids common-lisp:nil :type
    (common-lisp:or workspace-id-list common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or bundle-id common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or limit common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-request
                    'make-describe-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-ids))
      (common-lisp:list
       (common-lisp:cons "WorkspaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workspaces-result-"))
   (workspaces common-lisp:nil :type
    (common-lisp:or workspace-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-result
                    'make-describe-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspaces))
      (common-lisp:list
       (common-lisp:cons "Workspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-id-list ()
   '(trivial-types:proper-list directory-id))
 (common-lisp:defun |make-directory-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype directory-list ()
   '(trivial-types:proper-list workspace-directory))
 (common-lisp:defun |make-directory-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-directory))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dns-ip-addresses ()
   '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-dns-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-type () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (failed-create-workspace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-create-workspace-request-"))
   (workspace-request common-lisp:nil :type
    (common-lisp:or workspace-request common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-type common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failed-create-workspace-request
                    'make-failed-create-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-request))
      (common-lisp:list
       (common-lisp:cons "WorkspaceRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-create-workspace-requests ()
   '(trivial-types:proper-list failed-create-workspace-request))
 (common-lisp:defun |make-failed-create-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-create-workspace-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-reboot-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-reboot-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-rebuild-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-rebuild-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-start-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-start-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-stop-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-stop-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-terminate-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-terminate-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-workspace-change-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-workspace-change-request-"))
   (workspace-id common-lisp:nil :type
    (common-lisp:or workspace-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-type common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failed-workspace-change-request
                    'make-failed-workspace-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-workspace-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-workspace-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-workspace-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-values-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-values-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-values-exception
                    'invalid-parameter-values-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-state-exception
                    'invalid-resource-state-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (modify-workspace-properties-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-workspace-properties-request-"))
   (workspace-id (common-lisp:error ":workspace-id is required") :type
    (common-lisp:or workspace-id common-lisp:null))
   (workspace-properties
    (common-lisp:error ":workspace-properties is required") :type
    (common-lisp:or workspace-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-workspace-properties-request
                    'make-modify-workspace-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-workspace-properties-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-workspace-properties-result-")))
 (common-lisp:export
  (common-lisp:list 'modify-workspace-properties-result
                    'make-modify-workspace-properties-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-result))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-in-progress-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-in-progress-exception
                    'operation-in-progress-exception-message)))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-request-"))
   (workspace-id (common-lisp:error ":workspace-id is required") :type
    (common-lisp:or workspace-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reboot-request 'make-reboot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reboot-workspace-requests ()
   '(trivial-types:proper-list reboot-request))
 (common-lisp:defun |make-reboot-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reboot-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-workspaces-request-"))
   (reboot-workspace-requests
    (common-lisp:error ":reboot-workspace-requests is required") :type
    (common-lisp:or reboot-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-workspaces-request
                    'make-reboot-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reboot-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "RebootWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-workspaces-result-"))
   (failed-requests common-lisp:nil :type
    (common-lisp:or failed-reboot-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-workspaces-result 'make-reboot-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rebuild-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-rebuild-request-"))
   (workspace-id (common-lisp:error ":workspace-id is required") :type
    (common-lisp:or workspace-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rebuild-request 'make-rebuild-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rebuild-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rebuild-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rebuild-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rebuild-workspace-requests ()
   '(trivial-types:proper-list rebuild-request))
 (common-lisp:defun |make-rebuild-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rebuild-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rebuild-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-rebuild-workspaces-request-"))
   (rebuild-workspace-requests
    (common-lisp:error ":rebuild-workspace-requests is required") :type
    (common-lisp:or rebuild-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rebuild-workspaces-request
                    'make-rebuild-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rebuild-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "RebuildWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rebuild-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-rebuild-workspaces-result-"))
   (failed-requests common-lisp:nil :type
    (common-lisp:or failed-rebuild-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rebuild-workspaces-result
                    'make-rebuild-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype registration-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-unavailable-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message
                    'resource-unavailable-exception-resource-id)))
(common-lisp:deftype running-mode () 'common-lisp:string)
(common-lisp:deftype running-mode-auto-stop-timeout-in-minutes ()
  'common-lisp:integer)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-request-"))
   (workspace-id common-lisp:nil :type
    (common-lisp:or workspace-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'start-request 'make-start-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-workspace-requests ()
   '(trivial-types:proper-list start-request))
 (common-lisp:defun |make-start-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list start-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-workspaces-request-"))
   (start-workspace-requests
    (common-lisp:error ":start-workspace-requests is required") :type
    (common-lisp:or start-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-workspaces-request 'make-start-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "StartWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-workspaces-result-"))
   (failed-requests common-lisp:nil :type
    (common-lisp:or failed-start-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-workspaces-result 'make-start-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-request-"))
   (workspace-id common-lisp:nil :type
    (common-lisp:or workspace-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stop-request 'make-stop-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stop-workspace-requests ()
   '(trivial-types:proper-list stop-request))
 (common-lisp:defun |make-stop-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stop-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-workspaces-request-"))
   (stop-workspace-requests
    (common-lisp:error ":stop-workspace-requests is required") :type
    (common-lisp:or stop-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-workspaces-request 'make-stop-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "StopWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-workspaces-result-"))
   (failed-requests common-lisp:nil :type
    (common-lisp:or failed-stop-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-workspaces-result 'make-stop-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-request-"))
   (workspace-id (common-lisp:error ":workspace-id is required") :type
    (common-lisp:or workspace-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-request 'make-terminate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terminate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terminate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terminate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype terminate-workspace-requests ()
   '(trivial-types:proper-list terminate-request))
 (common-lisp:defun |make-terminate-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list terminate-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-workspaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-workspaces-request-"))
   (terminate-workspace-requests
    (common-lisp:error ":terminate-workspace-requests is required") :type
    (common-lisp:or terminate-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-workspaces-request
                    'make-terminate-workspaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "TerminateWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-workspaces-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-workspaces-result-"))
   (failed-requests common-lisp:nil :type
    (common-lisp:or failed-terminate-workspace-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-workspaces-result
                    'make-terminate-workspaces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-workspace-configuration-exception
     (workspaces-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-workspace-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-workspace-configuration-exception
                    'unsupported-workspace-configuration-exception-message)))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-storage-"))
   (capacity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-storage 'make-user-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-storage))
   common-lisp:nil))
(common-lisp:deftype volume-encryption-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workspace (:copier common-lisp:nil)
      (:conc-name "struct-shape-workspace-"))
   (workspace-id common-lisp:nil :type
    (common-lisp:or workspace-id common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or workspace-state common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or bundle-id common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or workspace-error-code common-lisp:null))
   (computer-name common-lisp:nil :type
    (common-lisp:or computer-name common-lisp:null))
   (volume-encryption-key common-lisp:nil :type
    (common-lisp:or volume-encryption-key common-lisp:null))
   (user-volume-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (root-volume-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (workspace-properties common-lisp:nil :type
    (common-lisp:or workspace-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workspace 'make-workspace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-key))
      (common-lisp:list
       (common-lisp:cons "VolumeEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "UserVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "RootVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workspace-bundle (:copier common-lisp:nil)
      (:conc-name "struct-shape-workspace-bundle-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or bundle-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or bundle-owner common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (user-storage common-lisp:nil :type
    (common-lisp:or user-storage common-lisp:null))
   (compute-type common-lisp:nil :type
    (common-lisp:or compute-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workspace-bundle 'make-workspace-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-storage))
      (common-lisp:list
       (common-lisp:cons "UserStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workspace-connection-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-workspace-connection-status-"))
   (workspace-id common-lisp:nil :type
    (common-lisp:or workspace-id common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or connection-state common-lisp:null))
   (connection-state-check-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-known-user-connection-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workspace-connection-status
                    'make-workspace-connection-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workspace-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workspace-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-state-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "ConnectionStateCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-known-user-connection-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastKnownUserConnectionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workspace-connection-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workspace-connection-status-list ()
   '(trivial-types:proper-list workspace-connection-status))
 (common-lisp:defun |make-workspace-connection-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workspace-connection-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workspace-directory (:copier common-lisp:nil)
      (:conc-name "struct-shape-workspace-directory-"))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (alias common-lisp:nil :type (common-lisp:or alias common-lisp:null))
   (directory-name common-lisp:nil :type
    (common-lisp:or directory-name common-lisp:null))
   (registration-code common-lisp:nil :type
    (common-lisp:or registration-code common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (dns-ip-addresses common-lisp:nil :type
    (common-lisp:or dns-ip-addresses common-lisp:null))
   (customer-user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null))
   (iam-role-id common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (directory-type common-lisp:nil :type
    (common-lisp:or workspace-directory-type common-lisp:null))
   (workspace-security-group-id common-lisp:nil :type
    (common-lisp:or security-group-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or workspace-directory-state common-lisp:null))
   (workspace-creation-properties common-lisp:nil :type
    (common-lisp:or default-workspace-creation-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workspace-directory 'make-workspace-directory))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-code))
      (common-lisp:list
       (common-lisp:cons "RegistrationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-user-name))
      (common-lisp:list
       (common-lisp:cons "CustomerUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-id))
      (common-lisp:list
       (common-lisp:cons "IamRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-type))
      (common-lisp:list
       (common-lisp:cons "DirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-security-group-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-creation-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceCreationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-directory))
   common-lisp:nil))
(common-lisp:deftype workspace-directory-state () 'common-lisp:string)
(common-lisp:deftype workspace-directory-type () 'common-lisp:string)
(common-lisp:deftype workspace-error-code () 'common-lisp:string)
(common-lisp:deftype workspace-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-id-list ()
   '(trivial-types:proper-list workspace-id))
 (common-lisp:defun |make-workspace-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workspace-list () '(trivial-types:proper-list workspace))
 (common-lisp:defun |make-workspace-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workspace-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-workspace-properties-"))
   (running-mode common-lisp:nil :type
    (common-lisp:or running-mode common-lisp:null))
   (running-mode-auto-stop-timeout-in-minutes common-lisp:nil :type
    (common-lisp:or running-mode-auto-stop-timeout-in-minutes
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workspace-properties 'make-workspace-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-mode))
      (common-lisp:list
       (common-lisp:cons "RunningMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'running-mode-auto-stop-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "RunningModeAutoStopTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workspace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-workspace-request-"))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (bundle-id (common-lisp:error ":bundle-id is required") :type
    (common-lisp:or bundle-id common-lisp:null))
   (volume-encryption-key common-lisp:nil :type
    (common-lisp:or volume-encryption-key common-lisp:null))
   (user-volume-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (root-volume-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean-object common-lisp:null))
   (workspace-properties common-lisp:nil :type
    (common-lisp:or workspace-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workspace-request 'make-workspace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-key))
      (common-lisp:list
       (common-lisp:cons "VolumeEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "UserVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "RootVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workspace-request-list ()
   '(trivial-types:proper-list workspace-request))
 (common-lisp:defun |make-workspace-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workspace-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateTags"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun create-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspaces)
   (common-lisp:declare (common-lisp:ignorable workspaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workspaces))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteTags"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-workspace-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-ids owner next-token)
   (common-lisp:declare (common-lisp:ignorable bundle-ids owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-bundles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkspaceBundles"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-bundles))
(common-lisp:progn
 (common-lisp:defun describe-workspace-directories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-ids next-token)
   (common-lisp:declare (common-lisp:ignorable directory-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-directories-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkspaceDirectories"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-directories))
(common-lisp:progn
 (common-lisp:defun describe-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-ids directory-id user-name
                     bundle-id limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-ids directory-id user-name bundle-id limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspaces))
(common-lisp:progn
 (common-lisp:defun describe-workspaces-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-ids next-token)
   (common-lisp:declare (common-lisp:ignorable workspace-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspaces-connection-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkspacesConnectionStatus"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspaces-connection-status))
(common-lisp:progn
 (common-lisp:defun modify-workspace-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id workspace-properties)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id workspace-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-workspace-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyWorkspaceProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-workspace-properties))
(common-lisp:progn
 (common-lisp:defun reboot-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reboot-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable reboot-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-workspaces))
(common-lisp:progn
 (common-lisp:defun rebuild-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rebuild-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable rebuild-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rebuild-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebuildWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rebuild-workspaces))
(common-lisp:progn
 (common-lisp:defun start-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable start-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-workspaces))
(common-lisp:progn
 (common-lisp:defun stop-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stop-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable stop-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-workspaces))
(common-lisp:progn
 (common-lisp:defun terminate-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key terminate-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable terminate-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TerminateWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-workspaces))

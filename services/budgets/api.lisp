;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/budgets/api
  (:use)
  (:nicknames #:aws/budgets)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request))
(common-lisp:in-package #:aws-sdk/services/budgets/api)
(common-lisp:progn
 (common-lisp:defclass budgets-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "budgets"))
 (common-lisp:export 'budgets-request))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (budget (:copier common-lisp:nil) (:conc-name "struct-shape-budget-"))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (budget-limit (common-lisp:error ":budget-limit is required") :type
    (common-lisp:or spend common-lisp:null))
   (cost-filters common-lisp:nil :type
    (common-lisp:or cost-filters common-lisp:null))
   (cost-types (common-lisp:error ":cost-types is required") :type
    (common-lisp:or cost-types common-lisp:null))
   (time-unit (common-lisp:error ":time-unit is required") :type
    (common-lisp:or time-unit common-lisp:null))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or time-period common-lisp:null))
   (calculated-spend common-lisp:nil :type
    (common-lisp:or calculated-spend common-lisp:null))
   (budget-type (common-lisp:error ":budget-type is required") :type
    (common-lisp:or budget-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'budget 'make-budget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input budget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input budget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-limit))
      (common-lisp:list
       (common-lisp:cons "BudgetLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-filters))
      (common-lisp:list
       (common-lisp:cons "CostFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-types))
      (common-lisp:list
       (common-lisp:cons "CostTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-unit))
      (common-lisp:list
       (common-lisp:cons "TimeUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calculated-spend))
      (common-lisp:list
       (common-lisp:cons "CalculatedSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-type))
      (common-lisp:list
       (common-lisp:cons "BudgetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input budget))
   common-lisp:nil))
(common-lisp:deftype budget-name () 'common-lisp:string)
(common-lisp:deftype budget-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype budgets () '(trivial-types:proper-list budget))
 (common-lisp:defun |make-budgets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list budget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (calculated-spend (:copier common-lisp:nil)
      (:conc-name "struct-shape-calculated-spend-"))
   (actual-spend (common-lisp:error ":actual-spend is required") :type
    (common-lisp:or spend common-lisp:null))
   (forecasted-spend common-lisp:nil :type
    (common-lisp:or spend common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'calculated-spend 'make-calculated-spend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input calculated-spend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input calculated-spend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-spend))
      (common-lisp:list
       (common-lisp:cons "ActualSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecasted-spend))
      (common-lisp:list
       (common-lisp:cons "ForecastedSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input calculated-spend))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-cost-filters| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-types (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-types-"))
   (include-tax (common-lisp:error ":include-tax is required") :type
    (common-lisp:or generic-boolean common-lisp:null))
   (include-subscription
    (common-lisp:error ":include-subscription is required") :type
    (common-lisp:or generic-boolean common-lisp:null))
   (use-blended (common-lisp:error ":use-blended is required") :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cost-types 'make-cost-types))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-types))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-types))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-tax))
      (common-lisp:list
       (common-lisp:cons "IncludeTax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-subscription))
      (common-lisp:list
       (common-lisp:cons "IncludeSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-blended))
      (common-lisp:list
       (common-lisp:cons "UseBlended"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-types))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-budget-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-budget-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget (common-lisp:error ":budget is required") :type
    (common-lisp:or budget common-lisp:null))
   (notifications-with-subscribers common-lisp:nil :type
    (common-lisp:or notification-with-subscribers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-budget-request 'make-create-budget-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-budget-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-budget-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget))
      (common-lisp:list
       (common-lisp:cons "Budget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notifications-with-subscribers))
      (common-lisp:list
       (common-lisp:cons "NotificationsWithSubscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-budget-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-budget-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-budget-response-")))
 (common-lisp:export
  (common-lisp:list 'create-budget-response 'make-create-budget-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-budget-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notification-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-notification-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (subscribers (common-lisp:error ":subscribers is required") :type
    (common-lisp:or subscribers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notification-request
                    'make-create-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notification-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-notification-response-")))
 (common-lisp:export
  (common-lisp:list 'create-notification-response
                    'make-create-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscriber-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (subscriber (common-lisp:error ":subscriber is required") :type
    (common-lisp:or subscriber common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-request
                    'make-create-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "Subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscriber-response-")))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-response
                    'make-create-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (creation-limit-exceeded-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-creation-limit-exceeded-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'creation-limit-exceeded-exception
                    'make-creation-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          creation-limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          creation-limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          creation-limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-budget-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-budget-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-budget-request 'make-delete-budget-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-budget-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-budget-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-budget-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-budget-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-budget-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-budget-response 'make-delete-budget-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-budget-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notification-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-notification-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-notification-request
                    'make-delete-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notification-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-notification-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-notification-response
                    'make-delete-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscriber-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (subscriber (common-lisp:error ":subscriber is required") :type
    (common-lisp:or subscriber common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-request
                    'make-delete-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "Subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscriber-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-response
                    'make-delete-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-budget-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-budget-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-budget-request 'make-describe-budget-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-budget-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-budget-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-budget-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-budget-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-budget-response-"))
   (budget common-lisp:nil :type (common-lisp:or budget common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-budget-response 'make-describe-budget-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-budget-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget))
      (common-lisp:list
       (common-lisp:cons "Budget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-budget-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-budgets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-budgets-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-budgets-request 'make-describe-budgets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-budgets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-budgets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-budgets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-budgets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-budgets-response-"))
   (budgets common-lisp:nil :type (common-lisp:or budgets common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-budgets-response
                    'make-describe-budgets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-budgets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-budgets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budgets))
      (common-lisp:list
       (common-lisp:cons "Budgets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-budgets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notifications-for-budget-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notifications-for-budget-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notifications-for-budget-request
                    'make-describe-notifications-for-budget-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notifications-for-budget-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notifications-for-budget-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notifications-for-budget-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notifications-for-budget-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notifications-for-budget-response-"))
   (notifications common-lisp:nil :type
    (common-lisp:or notifications common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notifications-for-budget-response
                    'make-describe-notifications-for-budget-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notifications-for-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notifications-for-budget-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notifications-for-budget-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subscribers-for-notification-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-subscribers-for-notification-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subscribers-for-notification-request
                    'make-describe-subscribers-for-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribers-for-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribers-for-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribers-for-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subscribers-for-notification-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-subscribers-for-notification-response-"))
   (subscribers common-lisp:nil :type
    (common-lisp:or subscribers common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subscribers-for-notification-response
                    'make-describe-subscribers-for-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribers-for-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribers-for-notification-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribers-for-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-values ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-dimension-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (duplicate-record-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-duplicate-record-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'duplicate-record-exception
                    'make-duplicate-record-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          duplicate-record-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          duplicate-record-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          duplicate-record-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (expired-next-token-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-expired-next-token-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expired-next-token-exception
                    'make-expired-next-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          expired-next-token-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          expired-next-token-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          expired-next-token-exception))
   common-lisp:nil))
(common-lisp:deftype generic-boolean () 'common-lisp:boolean)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:deftype generic-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (internal-error-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-internal-error-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-error-exception 'make-internal-error-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-error-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-error-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-error-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-next-token-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-next-token-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'make-invalid-next-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-next-token-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-parameter-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-parameter-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'make-invalid-parameter-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-parameter-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-parameter-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-parameter-exception))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (not-found-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-not-found-exception-"))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'make-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input not-found-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input not-found-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input not-found-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notification (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-"))
   (notification-type (common-lisp:error ":notification-type is required")
    :type (common-lisp:or notification-type common-lisp:null))
   (comparison-operator (common-lisp:error ":comparison-operator is required")
    :type (common-lisp:or comparison-operator common-lisp:null))
   (threshold (common-lisp:error ":threshold is required") :type
    (common-lisp:or notification-threshold common-lisp:null)))
 (common-lisp:export (common-lisp:list 'notification 'make-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-type))
      (common-lisp:list
       (common-lisp:cons "NotificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification))
   common-lisp:nil))
(common-lisp:deftype notification-threshold () 'common-lisp:double-float)
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-with-subscribers (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-with-subscribers-"))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (subscribers (common-lisp:error ":subscribers is required") :type
    (common-lisp:or subscribers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-with-subscribers
                    'make-notification-with-subscribers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-with-subscribers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-with-subscribers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-with-subscribers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notification-with-subscribers-list ()
   '(trivial-types:proper-list notification-with-subscribers))
 (common-lisp:defun |make-notification-with-subscribers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-with-subscribers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype notifications ()
   '(trivial-types:proper-list notification))
 (common-lisp:defun |make-notifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype numeric-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (spend (:copier common-lisp:nil) (:conc-name "struct-shape-spend-"))
   (amount (common-lisp:error ":amount is required") :type
    (common-lisp:or numeric-value common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or unit-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spend 'make-spend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscriber (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscriber-"))
   (subscription-type (common-lisp:error ":subscription-type is required")
    :type (common-lisp:or subscription-type common-lisp:null))
   (address (common-lisp:error ":address is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subscriber 'make-subscriber))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscriber))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscriber))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-type))
      (common-lisp:list
       (common-lisp:cons "SubscriptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscriber))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribers () '(trivial-types:proper-list subscriber))
 (common-lisp:defun |make-subscribers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscriber))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-period (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-period-"))
   (start (common-lisp:error ":start is required") :type
    (common-lisp:or generic-timestamp common-lisp:null))
   (end (common-lisp:error ":end is required") :type
    (common-lisp:or generic-timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-period 'make-time-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-period))
   common-lisp:nil))
(common-lisp:deftype time-unit () 'common-lisp:string)
(common-lisp:deftype unit-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-budget-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-budget-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (new-budget (common-lisp:error ":new-budget is required") :type
    (common-lisp:or budget common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-budget-request 'make-update-budget-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-budget-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-budget-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-budget))
      (common-lisp:list
       (common-lisp:cons "NewBudget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-budget-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-budget-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-budget-response-")))
 (common-lisp:export
  (common-lisp:list 'update-budget-response 'make-update-budget-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-budget-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-budget-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-notification-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-notification-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (old-notification (common-lisp:error ":old-notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (new-notification (common-lisp:error ":new-notification is required") :type
    (common-lisp:or notification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-notification-request
                    'make-update-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-notification))
      (common-lisp:list
       (common-lisp:cons "OldNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-notification))
      (common-lisp:list
       (common-lisp:cons "NewNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-notification-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-notification-response-")))
 (common-lisp:export
  (common-lisp:list 'update-notification-response
                    'make-update-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscriber-request-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (budget-name (common-lisp:error ":budget-name is required") :type
    (common-lisp:or budget-name common-lisp:null))
   (notification (common-lisp:error ":notification is required") :type
    (common-lisp:or notification common-lisp:null))
   (old-subscriber (common-lisp:error ":old-subscriber is required") :type
    (common-lisp:or subscriber common-lisp:null))
   (new-subscriber (common-lisp:error ":new-subscriber is required") :type
    (common-lisp:or subscriber common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-request
                    'make-update-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'budget-name))
      (common-lisp:list
       (common-lisp:cons "BudgetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "Notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-subscriber))
      (common-lisp:list
       (common-lisp:cons "OldSubscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-subscriber))
      (common-lisp:list
       (common-lisp:cons "NewSubscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscriber-response-")))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-response
                    'make-update-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   common-lisp:nil))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-budget
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget
                     notifications-with-subscribers)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget notifications-with-subscribers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-budget-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBudget"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-budget))
(common-lisp:progn
 (common-lisp:defun create-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name notification
                     subscribers)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name notification subscribers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-notification-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNotification"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-notification))
(common-lisp:progn
 (common-lisp:defun create-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name notification
                     subscriber)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name notification subscriber))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSubscriber"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-subscriber))
(common-lisp:progn
 (common-lisp:defun delete-budget
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name)
   (common-lisp:declare (common-lisp:ignorable account-id budget-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-budget-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBudget"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-budget))
(common-lisp:progn
 (common-lisp:defun delete-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name notification)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name notification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-notification-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNotification"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-notification))
(common-lisp:progn
 (common-lisp:defun delete-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name notification
                     subscriber)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name notification subscriber))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSubscriber"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-subscriber))
(common-lisp:progn
 (common-lisp:defun describe-budget
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name)
   (common-lisp:declare (common-lisp:ignorable account-id budget-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-budget-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBudget"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-budget))
(common-lisp:progn
 (common-lisp:defun describe-budgets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-budgets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBudgets"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-budgets))
(common-lisp:progn
 (common-lisp:defun describe-notifications-for-budget
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notifications-for-budget-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNotificationsForBudget"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-notifications-for-budget))
(common-lisp:progn
 (common-lisp:defun describe-subscribers-for-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name notification
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name notification max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-subscribers-for-notification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSubscribersForNotification"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'describe-subscribers-for-notification))
(common-lisp:progn
 (common-lisp:defun update-budget
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id new-budget)
   (common-lisp:declare (common-lisp:ignorable account-id new-budget))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-budget-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBudget"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-budget))
(common-lisp:progn
 (common-lisp:defun update-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name old-notification
                     new-notification)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name old-notification
     new-notification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notification-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNotification"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-notification))
(common-lisp:progn
 (common-lisp:defun update-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id budget-name notification
                     old-subscriber new-subscriber)
   (common-lisp:declare
    (common-lisp:ignorable account-id budget-name notification old-subscriber
     new-subscriber))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'budgets-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSubscriber"
                                                        "2016-10-20"))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-subscriber))

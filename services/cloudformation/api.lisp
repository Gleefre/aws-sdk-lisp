;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudformation/api
  (:use)
  (:nicknames #:aws/cloudformation)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudformation/api)
(common-lisp:progn
 (common-lisp:defclass cloudformation-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cloudformation"))
 (common-lisp:export 'cloudformation-request))
(common-lisp:progn
 (common-lisp:define-condition cloudformation-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudformation-error))
(common-lisp:deftype account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-gate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-gate-result-"))
   (status common-lisp:nil :type
    (common-lisp:or account-gate-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or account-gate-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-gate-result 'make-account-gate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-gate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-gate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-gate-result))
   common-lisp:nil))
(common-lisp:deftype account-gate-status () 'common-lisp:string)
(common-lisp:deftype account-gate-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-limit-"))
   (name common-lisp:nil :type (common-lisp:or limit-name common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or limit-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-limit 'make-account-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-limit-list ()
   '(trivial-types:proper-list account-limit))
 (common-lisp:defun |make-account-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list account))
 (common-lisp:defun |make-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-values ()
   '(trivial-types:proper-list allowed-value))
 (common-lisp:defun |make-allowed-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'already-exists-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-update-stack-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-update-stack-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-update-stack-input
                    'make-cancel-update-stack-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-update-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-update-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-update-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype capabilities () '(trivial-types:proper-list capability))
 (common-lisp:defun |make-capabilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capabilities-reason () 'common-lisp:string)
(common-lisp:deftype capability () 'common-lisp:string)
(common-lisp:deftype causing-entity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (change (:copier common-lisp:nil) (:conc-name "struct-shape-change-"))
   (type common-lisp:nil :type (common-lisp:or change-type common-lisp:null))
   (resource-change common-lisp:nil :type
    (common-lisp:or resource-change common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-change))
      (common-lisp:list
       (common-lisp:cons "ResourceChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change))
   common-lisp:nil))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:deftype change-set-id () 'common-lisp:string)
(common-lisp:deftype change-set-name () 'common-lisp:string)
(common-lisp:deftype change-set-name-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition change-set-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'change-set-not-found-exception)))
(common-lisp:deftype change-set-status () 'common-lisp:string)
(common-lisp:deftype change-set-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-summaries ()
   '(trivial-types:proper-list change-set-summary))
 (common-lisp:defun |make-change-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (change-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-set-summary-"))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or change-set-id common-lisp:null))
   (change-set-name common-lisp:nil :type
    (common-lisp:or change-set-name common-lisp:null))
   (execution-status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or change-set-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or change-set-status-reason common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-set-summary 'make-change-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-set-summary))
   common-lisp:nil))
(common-lisp:deftype change-set-type () 'common-lisp:string)
(common-lisp:deftype change-source () 'common-lisp:string)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype changes () '(trivial-types:proper-list change))
 (common-lisp:defun |make-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (continue-update-rollback-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-continue-update-rollback-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (resources-to-skip common-lisp:nil :type
    (common-lisp:or resources-to-skip common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continue-update-rollback-input
                    'make-continue-update-rollback-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-to-skip))
      (common-lisp:list
       (common-lisp:cons "ResourcesToSkip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (continue-update-rollback-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-continue-update-rollback-output-")))
 (common-lisp:export
  (common-lisp:list 'continue-update-rollback-output
                    'make-continue-update-rollback-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-change-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-change-set-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (use-previous-template common-lisp:nil :type
    (common-lisp:or use-previous-template common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-types common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (notification-arns common-lisp:nil :type
    (common-lisp:or notification-arns common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (change-set-name (common-lisp:error ":change-set-name is required") :type
    (common-lisp:or change-set-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (change-set-type common-lisp:nil :type
    (common-lisp:or change-set-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-change-set-input 'make-create-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-previous-template))
      (common-lisp:list
       (common-lisp:cons "UsePreviousTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-type))
      (common-lisp:list
       (common-lisp:cons "ChangeSetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-change-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-change-set-output-"))
   (id common-lisp:nil :type (common-lisp:or change-set-id common-lisp:null))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-change-set-output 'make-create-change-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stack-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stack-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (disable-rollback common-lisp:nil :type
    (common-lisp:or disable-rollback common-lisp:null))
   (timeout-in-minutes common-lisp:nil :type
    (common-lisp:or timeout-minutes common-lisp:null))
   (notification-arns common-lisp:nil :type
    (common-lisp:or notification-arns common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-types common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (on-failure common-lisp:nil :type
    (common-lisp:or on-failure common-lisp:null))
   (stack-policy-body common-lisp:nil :type
    (common-lisp:or stack-policy-body common-lisp:null))
   (stack-policy-url common-lisp:nil :type
    (common-lisp:or stack-policy-url common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stack-input 'make-create-stack-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-failure))
      (common-lisp:list
       (common-lisp:cons "OnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stack-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stack-instances-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (accounts (common-lisp:error ":accounts is required") :type
    (common-lisp:or account-list common-lisp:null))
   (regions (common-lisp:error ":regions is required") :type
    (common-lisp:or region-list common-lisp:null))
   (operation-preferences common-lisp:nil :type
    (common-lisp:or stack-set-operation-preferences common-lisp:null))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stack-instances-input
                    'make-create-stack-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stack-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stack-instances-output-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stack-instances-output
                    'make-create-stack-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stack-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stack-output-"))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stack-output 'make-create-stack-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stack-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stack-set-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stack-set-input 'make-create-stack-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-stack-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-stack-set-output-"))
   (stack-set-id common-lisp:nil :type
    (common-lisp:or stack-set-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stack-set-output 'make-create-stack-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition created-but-modified-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'created-but-modified-exception)))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-change-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-change-set-input-"))
   (change-set-name (common-lisp:error ":change-set-name is required") :type
    (common-lisp:or change-set-name-or-id common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name-or-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-change-set-input 'make-delete-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-change-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-change-set-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-change-set-output 'make-delete-change-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stack-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stack-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (retain-resources common-lisp:nil :type
    (common-lisp:or retain-resources common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-stack-input 'make-delete-stack-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-resources))
      (common-lisp:list
       (common-lisp:cons "RetainResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stack-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stack-instances-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (accounts (common-lisp:error ":accounts is required") :type
    (common-lisp:or account-list common-lisp:null))
   (regions (common-lisp:error ":regions is required") :type
    (common-lisp:or region-list common-lisp:null))
   (operation-preferences common-lisp:nil :type
    (common-lisp:or stack-set-operation-preferences common-lisp:null))
   (retain-stacks (common-lisp:error ":retain-stacks is required") :type
    (common-lisp:or retain-stacks common-lisp:null))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-stack-instances-input
                    'make-delete-stack-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-stacks))
      (common-lisp:list
       (common-lisp:cons "RetainStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stack-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stack-instances-output-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-stack-instances-output
                    'make-delete-stack-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stack-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stack-set-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-stack-set-input 'make-delete-stack-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-stack-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-stack-set-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-stack-set-output 'make-delete-stack-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-output))
   common-lisp:nil))
(common-lisp:deftype deletion-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-input
                    'make-describe-account-limits-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-output-"))
   (account-limits common-lisp:nil :type
    (common-lisp:or account-limit-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-output
                    'make-describe-account-limits-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-limits))
      (common-lisp:list
       (common-lisp:cons "AccountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-change-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-change-set-input-"))
   (change-set-name (common-lisp:error ":change-set-name is required") :type
    (common-lisp:or change-set-name-or-id common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-input
                    'make-describe-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-change-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-change-set-output-"))
   (change-set-name common-lisp:nil :type
    (common-lisp:or change-set-name common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or change-set-id common-lisp:null))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (execution-status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or change-set-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or change-set-status-reason common-lisp:null))
   (notification-arns common-lisp:nil :type
    (common-lisp:or notification-arns common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (changes common-lisp:nil :type (common-lisp:or changes common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-output
                    'make-describe-change-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changes))
      (common-lisp:list
       (common-lisp:cons "Changes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-events-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-events-input-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-events-input
                    'make-describe-stack-events-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-events-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-events-output-"))
   (stack-events common-lisp:nil :type
    (common-lisp:or stack-events common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-events-output
                    'make-describe-stack-events-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-events))
      (common-lisp:list
       (common-lisp:cons "StackEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-instance-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (stack-instance-account
    (common-lisp:error ":stack-instance-account is required") :type
    (common-lisp:or account common-lisp:null))
   (stack-instance-region
    (common-lisp:error ":stack-instance-region is required") :type
    (common-lisp:or region common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-instance-input
                    'make-describe-stack-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-account))
      (common-lisp:list
       (common-lisp:cons "StackInstanceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-region))
      (common-lisp:list
       (common-lisp:cons "StackInstanceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-instance-output-"))
   (stack-instance common-lisp:nil :type
    (common-lisp:or stack-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-instance-output
                    'make-describe-stack-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-instance))
      (common-lisp:list
       (common-lisp:cons "StackInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-resource-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (logical-resource-id (common-lisp:error ":logical-resource-id is required")
    :type (common-lisp:or logical-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resource-input
                    'make-describe-stack-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-resource-output-"))
   (stack-resource-detail common-lisp:nil :type
    (common-lisp:or stack-resource-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resource-output
                    'make-describe-stack-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-detail))
      (common-lisp:list
       (common-lisp:cons "StackResourceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-resources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-resources-input-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or physical-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resources-input
                    'make-describe-stack-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-resources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-resources-output-"))
   (stack-resources common-lisp:nil :type
    (common-lisp:or stack-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resources-output
                    'make-describe-stack-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-resources))
      (common-lisp:list
       (common-lisp:cons "StackResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-set-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-input 'make-describe-stack-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-set-operation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-set-operation-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-operation-input
                    'make-describe-stack-set-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-set-operation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-set-operation-output-"))
   (stack-set-operation common-lisp:nil :type
    (common-lisp:or stack-set-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-operation-output
                    'make-describe-stack-set-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-operation))
      (common-lisp:list
       (common-lisp:cons "StackSetOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stack-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stack-set-output-"))
   (stack-set common-lisp:nil :type
    (common-lisp:or stack-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-output
                    'make-describe-stack-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set))
      (common-lisp:list
       (common-lisp:cons "StackSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stacks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stacks-input-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-input 'make-describe-stacks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-stacks-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-stacks-output-"))
   (stacks common-lisp:nil :type (common-lisp:or stacks common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-output 'make-describe-stacks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stacks))
      (common-lisp:list
       (common-lisp:cons "Stacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype disable-rollback () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (estimate-template-cost-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-estimate-template-cost-input-"))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'estimate-template-cost-input
                    'make-estimate-template-cost-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (estimate-template-cost-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-estimate-template-cost-output-"))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'estimate-template-cost-output
                    'make-estimate-template-cost-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-output))
   common-lisp:nil))
(common-lisp:deftype evaluation-type () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execute-change-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-execute-change-set-input-"))
   (change-set-name (common-lisp:error ":change-set-name is required") :type
    (common-lisp:or change-set-name-or-id common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execute-change-set-input 'make-execute-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execute-change-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-execute-change-set-output-")))
 (common-lisp:export
  (common-lisp:list 'execute-change-set-output
                    'make-execute-change-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-output))
   common-lisp:nil))
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export (:copier common-lisp:nil) (:conc-name "struct-shape-export-"))
   (exporting-stack-id common-lisp:nil :type
    (common-lisp:or stack-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or export-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or export-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'export 'make-export))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-stack-id))
      (common-lisp:list
       (common-lisp:cons "ExportingStackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export))
   common-lisp:nil))
(common-lisp:deftype export-name () 'common-lisp:string)
(common-lisp:deftype export-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exports () '(trivial-types:proper-list export))
 (common-lisp:defun |make-exports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-tolerance-count () 'common-lisp:integer)
(common-lisp:deftype failure-tolerance-percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-stack-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-stack-policy-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-stack-policy-input 'make-get-stack-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-stack-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-stack-policy-output-"))
   (stack-policy-body common-lisp:nil :type
    (common-lisp:or stack-policy-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-stack-policy-output 'make-get-stack-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-input-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (change-set-name common-lisp:nil :type
    (common-lisp:or change-set-name-or-id common-lisp:null))
   (template-stage common-lisp:nil :type
    (common-lisp:or template-stage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-input 'make-get-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-stage))
      (common-lisp:list
       (common-lisp:cons "TemplateStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-output-"))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (stages-available common-lisp:nil :type
    (common-lisp:or stage-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-output 'make-get-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages-available))
      (common-lisp:list
       (common-lisp:cons "StagesAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-summary-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-summary-input-"))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (stack-set-name common-lisp:nil :type
    (common-lisp:or stack-set-name-or-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-summary-input
                    'make-get-template-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-summary-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-summary-output-"))
   (parameters common-lisp:nil :type
    (common-lisp:or parameter-declarations common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (capabilities-reason common-lisp:nil :type
    (common-lisp:or capabilities-reason common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-types common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (declared-transforms common-lisp:nil :type
    (common-lisp:or transforms-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-summary-output
                    'make-get-template-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities-reason))
      (common-lisp:list
       (common-lisp:cons "CapabilitiesReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'declared-transforms))
      (common-lisp:list
       (common-lisp:cons "DeclaredTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype imports () '(trivial-types:proper-list stack-name))
 (common-lisp:defun |make-imports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition insufficient-capabilities-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-capabilities-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-change-set-status-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-change-set-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-operation-exception)))
(common-lisp:deftype last-updated-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-name () 'common-lisp:string)
(common-lisp:deftype limit-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-change-sets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-change-sets-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-input 'make-list-change-sets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-change-sets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-change-sets-output-"))
   (summaries common-lisp:nil :type
    (common-lisp:or change-set-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-output 'make-list-change-sets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-exports-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-exports-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-exports-input 'make-list-exports-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-exports-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-exports-output-"))
   (exports common-lisp:nil :type (common-lisp:or exports common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-exports-output 'make-list-exports-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exports))
      (common-lisp:list
       (common-lisp:cons "Exports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-imports-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-imports-input-"))
   (export-name (common-lisp:error ":export-name is required") :type
    (common-lisp:or export-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-imports-input 'make-list-imports-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-name))
      (common-lisp:list
       (common-lisp:cons "ExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-imports-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-imports-output-"))
   (imports common-lisp:nil :type (common-lisp:or imports common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-imports-output 'make-list-imports-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "Imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-instances-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (stack-instance-account common-lisp:nil :type
    (common-lisp:or account common-lisp:null))
   (stack-instance-region common-lisp:nil :type
    (common-lisp:or region common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-instances-input
                    'make-list-stack-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-account))
      (common-lisp:list
       (common-lisp:cons "StackInstanceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-region))
      (common-lisp:list
       (common-lisp:cons "StackInstanceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-instances-output-"))
   (summaries common-lisp:nil :type
    (common-lisp:or stack-instance-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-instances-output
                    'make-list-stack-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-resources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-resources-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-resources-input
                    'make-list-stack-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-resources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-resources-output-"))
   (stack-resource-summaries common-lisp:nil :type
    (common-lisp:or stack-resource-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-resources-output
                    'make-list-stack-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-summaries))
      (common-lisp:list
       (common-lisp:cons "StackResourceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-set-operation-results-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-set-operation-results-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operation-results-input
                    'make-list-stack-set-operation-results-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-set-operation-results-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-set-operation-results-output-"))
   (summaries common-lisp:nil :type
    (common-lisp:or stack-set-operation-result-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operation-results-output
                    'make-list-stack-set-operation-results-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-set-operations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-set-operations-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operations-input
                    'make-list-stack-set-operations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-set-operations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-set-operations-output-"))
   (summaries common-lisp:nil :type
    (common-lisp:or stack-set-operation-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operations-output
                    'make-list-stack-set-operations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-sets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-sets-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-set-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-sets-input 'make-list-stack-sets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stack-sets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stack-sets-output-"))
   (summaries common-lisp:nil :type
    (common-lisp:or stack-set-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stack-sets-output 'make-list-stack-sets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stacks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stacks-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (stack-status-filter common-lisp:nil :type
    (common-lisp:or stack-status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stacks-input 'make-list-stacks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-stacks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-stacks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-filter))
      (common-lisp:list
       (common-lisp:cons "StackStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-stacks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stacks-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stacks-output-"))
   (stack-summaries common-lisp:nil :type
    (common-lisp:or stack-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stacks-output 'make-list-stacks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-stacks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-stacks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-summaries))
      (common-lisp:list
       (common-lisp:cons "StackSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-stacks-output))
   common-lisp:nil))
(common-lisp:deftype logical-resource-id () 'common-lisp:string)
(common-lisp:deftype max-concurrent-count () 'common-lisp:integer)
(common-lisp:deftype max-concurrent-percentage () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition name-already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'name-already-exists-exception)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype no-echo () 'common-lisp:boolean)
(common-lisp:deftype notification-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-arns ()
   '(trivial-types:proper-list notification-arn))
 (common-lisp:defun |make-notification-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype on-failure () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-id-already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-id-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition operation-in-progress-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-in-progress-exception)))
(common-lisp:progn
 (common-lisp:define-condition operation-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (output (:copier common-lisp:nil) (:conc-name "struct-shape-output-"))
   (output-key common-lisp:nil :type
    (common-lisp:or output-key common-lisp:null))
   (output-value common-lisp:nil :type
    (common-lisp:or output-value common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (export-name common-lisp:nil :type
    (common-lisp:or export-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-value))
      (common-lisp:list
       (common-lisp:cons "OutputValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-name))
      (common-lisp:list
       (common-lisp:cons "ExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:deftype output-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype outputs () '(trivial-types:proper-list output))
 (common-lisp:defun |make-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (parameter-key common-lisp:nil :type
    (common-lisp:or parameter-key common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or parameter-value common-lisp:null))
   (use-previous-value common-lisp:nil :type
    (common-lisp:or use-previous-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-previous-value))
      (common-lisp:list
       (common-lisp:cons "UsePreviousValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-constraints (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-constraints-"))
   (allowed-values common-lisp:nil :type
    (common-lisp:or allowed-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-constraints 'make-parameter-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-declaration-"))
   (parameter-key common-lisp:nil :type
    (common-lisp:or parameter-key common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or parameter-value common-lisp:null))
   (parameter-type common-lisp:nil :type
    (common-lisp:or parameter-type common-lisp:null))
   (no-echo common-lisp:nil :type (common-lisp:or no-echo common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parameter-constraints common-lisp:nil :type
    (common-lisp:or parameter-constraints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-declaration 'make-parameter-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-type))
      (common-lisp:list
       (common-lisp:cons "ParameterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "NoEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-constraints))
      (common-lisp:list
       (common-lisp:cons "ParameterConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-declarations ()
   '(trivial-types:proper-list parameter-declaration))
 (common-lisp:defun |make-parameter-declarations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype physical-resource-id () 'common-lisp:string)
(common-lisp:deftype property-name () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replacement () 'common-lisp:string)
(common-lisp:deftype requires-recreation () 'common-lisp:string)
(common-lisp:deftype resource-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-change-"))
   (action common-lisp:nil :type
    (common-lisp:or change-action common-lisp:null))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or physical-resource-id common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (replacement common-lisp:nil :type
    (common-lisp:or replacement common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or scope common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or resource-change-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-change 'make-resource-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement))
      (common-lisp:list
       (common-lisp:cons "Replacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-change-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-change-detail-"))
   (target common-lisp:nil :type
    (common-lisp:or resource-target-definition common-lisp:null))
   (evaluation common-lisp:nil :type
    (common-lisp:or evaluation-type common-lisp:null))
   (change-source common-lisp:nil :type
    (common-lisp:or change-source common-lisp:null))
   (causing-entity common-lisp:nil :type
    (common-lisp:or causing-entity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-change-detail 'make-resource-change-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation))
      (common-lisp:list
       (common-lisp:cons "Evaluation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-source))
      (common-lisp:list
       (common-lisp:cons "ChangeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causing-entity))
      (common-lisp:list
       (common-lisp:cons "CausingEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-change-details ()
   '(trivial-types:proper-list resource-change-detail))
 (common-lisp:defun |make-resource-change-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-change-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-properties () 'common-lisp:string)
(common-lisp:deftype resource-signal-status () 'common-lisp:string)
(common-lisp:deftype resource-signal-unique-id () 'common-lisp:string)
(common-lisp:deftype resource-status () 'common-lisp:string)
(common-lisp:deftype resource-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-target-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-target-definition-"))
   (attribute common-lisp:nil :type
    (common-lisp:or resource-attribute common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or property-name common-lisp:null))
   (requires-recreation common-lisp:nil :type
    (common-lisp:or requires-recreation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-target-definition
                    'make-resource-target-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires-recreation))
      (common-lisp:list
       (common-lisp:cons "RequiresRecreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   common-lisp:nil))
(common-lisp:deftype resource-to-skip () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-types ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun |make-resource-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resources-to-skip ()
   '(trivial-types:proper-list resource-to-skip))
 (common-lisp:defun |make-resources-to-skip|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-to-skip))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype retain-resources ()
   '(trivial-types:proper-list logical-resource-id))
 (common-lisp:defun |make-retain-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logical-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retain-stacks () 'common-lisp:boolean)
(common-lisp:deftype retain-stacks-nullable () 'common-lisp:boolean)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scope () '(trivial-types:proper-list resource-attribute))
 (common-lisp:defun |make-scope|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (set-stack-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-stack-policy-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (stack-policy-body common-lisp:nil :type
    (common-lisp:or stack-policy-body common-lisp:null))
   (stack-policy-url common-lisp:nil :type
    (common-lisp:or stack-policy-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-stack-policy-input 'make-set-stack-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-stack-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-stack-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-stack-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (signal-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-signal-resource-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name-or-id common-lisp:null))
   (logical-resource-id (common-lisp:error ":logical-resource-id is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (unique-id (common-lisp:error ":unique-id is required") :type
    (common-lisp:or resource-signal-unique-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or resource-signal-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signal-resource-input 'make-signal-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-id))
      (common-lisp:list
       (common-lisp:cons "UniqueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stack (:copier common-lisp:nil) (:conc-name "struct-shape-stack-"))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or change-set-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or last-updated-time common-lisp:null))
   (stack-status (common-lisp:error ":stack-status is required") :type
    (common-lisp:or stack-status common-lisp:null))
   (stack-status-reason common-lisp:nil :type
    (common-lisp:or stack-status-reason common-lisp:null))
   (disable-rollback common-lisp:nil :type
    (common-lisp:or disable-rollback common-lisp:null))
   (notification-arns common-lisp:nil :type
    (common-lisp:or notification-arns common-lisp:null))
   (timeout-in-minutes common-lisp:nil :type
    (common-lisp:or timeout-minutes common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (outputs common-lisp:nil :type (common-lisp:or outputs common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stack 'make-stack))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status))
      (common-lisp:list
       (common-lisp:cons "StackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-reason))
      (common-lisp:list
       (common-lisp:cons "StackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-event-"))
   (stack-id (common-lisp:error ":stack-id is required") :type
    (common-lisp:or stack-id common-lisp:null))
   (event-id (common-lisp:error ":event-id is required") :type
    (common-lisp:or event-id common-lisp:null))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (logical-resource-id common-lisp:nil :type
    (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or physical-resource-id common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (timestamp (common-lisp:error ":timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-status common-lisp:nil :type
    (common-lisp:or resource-status common-lisp:null))
   (resource-status-reason common-lisp:nil :type
    (common-lisp:or resource-status-reason common-lisp:null))
   (resource-properties common-lisp:nil :type
    (common-lisp:or resource-properties common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stack-event 'make-stack-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-properties))
      (common-lisp:list
       (common-lisp:cons "ResourceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stack-events () '(trivial-types:proper-list stack-event))
 (common-lisp:defun |make-stack-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stack-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stack-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-instance-"))
   (stack-set-id common-lisp:nil :type
    (common-lisp:or stack-set-id common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (account common-lisp:nil :type (common-lisp:or account common-lisp:null))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-instance-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stack-instance 'make-stack-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition stack-instance-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-instance-not-found-exception)))
(common-lisp:deftype stack-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-instance-summaries ()
   '(trivial-types:proper-list stack-instance-summary))
 (common-lisp:defun |make-stack-instance-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-instance-summary-"))
   (stack-set-id common-lisp:nil :type
    (common-lisp:or stack-set-id common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (account common-lisp:nil :type (common-lisp:or account common-lisp:null))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-instance-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-instance-summary 'make-stack-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-summary))
   common-lisp:nil))
(common-lisp:deftype stack-name () 'common-lisp:string)
(common-lisp:deftype stack-name-or-id () 'common-lisp:string)
(common-lisp:deftype stack-policy-body () 'common-lisp:string)
(common-lisp:deftype stack-policy-during-update-body () 'common-lisp:string)
(common-lisp:deftype stack-policy-during-update-url () 'common-lisp:string)
(common-lisp:deftype stack-policy-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stack-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-resource-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (logical-resource-id (common-lisp:error ":logical-resource-id is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or physical-resource-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (timestamp (common-lisp:error ":timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-status (common-lisp:error ":resource-status is required") :type
    (common-lisp:or resource-status common-lisp:null))
   (resource-status-reason common-lisp:nil :type
    (common-lisp:or resource-status-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stack-resource 'make-stack-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-resource-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-resource-detail-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (logical-resource-id (common-lisp:error ":logical-resource-id is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or physical-resource-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (last-updated-timestamp
    (common-lisp:error ":last-updated-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-status (common-lisp:error ":resource-status is required") :type
    (common-lisp:or resource-status common-lisp:null))
   (resource-status-reason common-lisp:nil :type
    (common-lisp:or resource-status-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-resource-detail 'make-stack-resource-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stack-resource-summaries ()
   '(trivial-types:proper-list stack-resource-summary))
 (common-lisp:defun |make-stack-resource-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-resource-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-resource-summary-"))
   (logical-resource-id (common-lisp:error ":logical-resource-id is required")
    :type (common-lisp:or logical-resource-id common-lisp:null))
   (physical-resource-id common-lisp:nil :type
    (common-lisp:or physical-resource-id common-lisp:null))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (last-updated-timestamp
    (common-lisp:error ":last-updated-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-status (common-lisp:error ":resource-status is required") :type
    (common-lisp:or resource-status common-lisp:null))
   (resource-status-reason common-lisp:nil :type
    (common-lisp:or resource-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-resource-summary 'make-stack-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stack-resources ()
   '(trivial-types:proper-list stack-resource))
 (common-lisp:defun |make-stack-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-set-"))
   (stack-set-name common-lisp:nil :type
    (common-lisp:or stack-set-name common-lisp:null))
   (stack-set-id common-lisp:nil :type
    (common-lisp:or stack-set-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-set-status common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stack-set 'make-stack-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-set))
   common-lisp:nil))
(common-lisp:deftype stack-set-id () 'common-lisp:string)
(common-lisp:deftype stack-set-name () 'common-lisp:string)
(common-lisp:deftype stack-set-name-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition stack-set-not-empty-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-set-not-empty-exception)))
(common-lisp:progn
 (common-lisp:define-condition stack-set-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-set-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-set-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-set-operation-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (stack-set-id common-lisp:nil :type
    (common-lisp:or stack-set-id common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or stack-set-operation-action common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-set-operation-status common-lisp:null))
   (operation-preferences common-lisp:nil :type
    (common-lisp:or stack-set-operation-preferences common-lisp:null))
   (retain-stacks common-lisp:nil :type
    (common-lisp:or retain-stacks-nullable common-lisp:null))
   (creation-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation 'make-stack-set-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-set-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-set-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-stacks))
      (common-lisp:list
       (common-lisp:cons "RetainStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-set-operation))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stack-set-operation-preferences (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-set-operation-preferences-"))
   (region-order common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null))
   (failure-tolerance-count common-lisp:nil :type
    (common-lisp:or failure-tolerance-count common-lisp:null))
   (failure-tolerance-percentage common-lisp:nil :type
    (common-lisp:or failure-tolerance-percentage common-lisp:null))
   (max-concurrent-count common-lisp:nil :type
    (common-lisp:or max-concurrent-count common-lisp:null))
   (max-concurrent-percentage common-lisp:nil :type
    (common-lisp:or max-concurrent-percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-preferences
                    'make-stack-set-operation-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-order))
      (common-lisp:list
       (common-lisp:cons "RegionOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-tolerance-count))
      (common-lisp:list
       (common-lisp:cons "FailureToleranceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-tolerance-percentage))
      (common-lisp:list
       (common-lisp:cons "FailureTolerancePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-count))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-preferences))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-result-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-operation-result-summaries ()
   '(trivial-types:proper-list stack-set-operation-result-summary))
 (common-lisp:defun |make-stack-set-operation-result-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stack-set-operation-result-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-set-operation-result-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-set-operation-result-summary-"))
   (account common-lisp:nil :type (common-lisp:or account common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-set-operation-result-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or reason common-lisp:null))
   (account-gate-result common-lisp:nil :type
    (common-lisp:or account-gate-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-result-summary
                    'make-stack-set-operation-result-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-result-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-result-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-gate-result))
      (common-lisp:list
       (common-lisp:cons "AccountGateResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-result-summary))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-operation-summaries ()
   '(trivial-types:proper-list stack-set-operation-summary))
 (common-lisp:defun |make-stack-set-operation-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stack-set-operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-set-operation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-set-operation-summary-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or stack-set-operation-action common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-set-operation-status common-lisp:null))
   (creation-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-summary
                    'make-stack-set-operation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-summary))
   common-lisp:nil))
(common-lisp:deftype stack-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-summaries ()
   '(trivial-types:proper-list stack-set-summary))
 (common-lisp:defun |make-stack-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-set-summary-"))
   (stack-set-name common-lisp:nil :type
    (common-lisp:or stack-set-name common-lisp:null))
   (stack-set-id common-lisp:nil :type
    (common-lisp:or stack-set-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or stack-set-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stack-set-summary 'make-stack-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-set-summary))
   common-lisp:nil))
(common-lisp:deftype stack-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-status-filter ()
   '(trivial-types:proper-list stack-status))
 (common-lisp:defun |make-stack-status-filter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stack-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-summaries ()
   '(trivial-types:proper-list stack-summary))
 (common-lisp:defun |make-stack-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stack-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-stack-summary-"))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or template-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or last-updated-time common-lisp:null))
   (deletion-time common-lisp:nil :type
    (common-lisp:or deletion-time common-lisp:null))
   (stack-status (common-lisp:error ":stack-status is required") :type
    (common-lisp:or stack-status common-lisp:null))
   (stack-status-reason common-lisp:nil :type
    (common-lisp:or stack-status-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stack-summary 'make-stack-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-time))
      (common-lisp:list
       (common-lisp:cons "DeletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status))
      (common-lisp:list
       (common-lisp:cons "StackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-reason))
      (common-lisp:list
       (common-lisp:cons "StackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stacks () '(trivial-types:proper-list stack))
 (common-lisp:defun |make-stacks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stage-list ()
   '(trivial-types:proper-list template-stage))
 (common-lisp:defun |make-stage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-stage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition stale-request-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stale-request-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-stack-set-operation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-stack-set-operation-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-stack-set-operation-input
                    'make-stop-stack-set-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-stack-set-operation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-stack-set-operation-output-")))
 (common-lisp:export
  (common-lisp:list 'stop-stack-set-operation-output
                    'make-stop-stack-set-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-body () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-parameter-"))
   (parameter-key common-lisp:nil :type
    (common-lisp:or parameter-key common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or parameter-value common-lisp:null))
   (no-echo common-lisp:nil :type (common-lisp:or no-echo common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-parameter 'make-template-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "NoEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-parameters ()
   '(trivial-types:proper-list template-parameter))
 (common-lisp:defun |make-template-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-stage () 'common-lisp:string)
(common-lisp:deftype template-url () 'common-lisp:string)
(common-lisp:deftype timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition token-already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'token-already-exists-exception)))
(common-lisp:deftype transform-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transforms-list ()
   '(trivial-types:proper-list transform-name))
 (common-lisp:defun |make-transforms-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transform-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-stack-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-stack-input-"))
   (stack-name (common-lisp:error ":stack-name is required") :type
    (common-lisp:or stack-name common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (use-previous-template common-lisp:nil :type
    (common-lisp:or use-previous-template common-lisp:null))
   (stack-policy-during-update-body common-lisp:nil :type
    (common-lisp:or stack-policy-during-update-body common-lisp:null))
   (stack-policy-during-update-url common-lisp:nil :type
    (common-lisp:or stack-policy-during-update-url common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-types common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (stack-policy-body common-lisp:nil :type
    (common-lisp:or stack-policy-body common-lisp:null))
   (stack-policy-url common-lisp:nil :type
    (common-lisp:or stack-policy-url common-lisp:null))
   (notification-arns common-lisp:nil :type
    (common-lisp:or notification-arns common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-stack-input 'make-update-stack-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-previous-template))
      (common-lisp:list
       (common-lisp:cons "UsePreviousTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-policy-during-update-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyDuringUpdateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-policy-during-update-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyDuringUpdateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-stack-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-stack-output-"))
   (stack-id common-lisp:nil :type (common-lisp:or stack-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-stack-output 'make-update-stack-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-stack-set-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-stack-set-input-"))
   (stack-set-name (common-lisp:error ":stack-set-name is required") :type
    (common-lisp:or stack-set-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null))
   (use-previous-template common-lisp:nil :type
    (common-lisp:or use-previous-template common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (operation-preferences common-lisp:nil :type
    (common-lisp:or stack-set-operation-preferences common-lisp:null))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-stack-set-input 'make-update-stack-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-previous-template))
      (common-lisp:list
       (common-lisp:cons "UsePreviousTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-stack-set-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-stack-set-output-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-stack-set-output 'make-update-stack-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype use-previous-template () 'common-lisp:boolean)
(common-lisp:deftype use-previous-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-template-input-"))
   (template-body common-lisp:nil :type
    (common-lisp:or template-body common-lisp:null))
   (template-url common-lisp:nil :type
    (common-lisp:or template-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-template-input 'make-validate-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-template-output-"))
   (parameters common-lisp:nil :type
    (common-lisp:or template-parameters common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (capabilities common-lisp:nil :type
    (common-lisp:or capabilities common-lisp:null))
   (capabilities-reason common-lisp:nil :type
    (common-lisp:or capabilities-reason common-lisp:null))
   (declared-transforms common-lisp:nil :type
    (common-lisp:or transforms-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-template-output 'make-validate-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities-reason))
      (common-lisp:list
       (common-lisp:cons "CapabilitiesReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'declared-transforms))
      (common-lisp:list
       (common-lisp:cons "DeclaredTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-output))
   common-lisp:nil))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-update-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-update-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelUpdateStack"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'cancel-update-stack))
(common-lisp:progn
 (common-lisp:defun continue-update-rollback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name role-arn resources-to-skip
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name role-arn resources-to-skip
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-continue-update-rollback-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ContinueUpdateRollback"
                                                        "2010-05-15"))
      common-lisp:nil "ContinueUpdateRollbackResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'continue-update-rollback))
(common-lisp:progn
 (common-lisp:defun create-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name template-body template-url
                     use-previous-template parameters capabilities
                     resource-types role-arn notification-arns tags
                     change-set-name client-token description change-set-type)
   (common-lisp:declare
    (common-lisp:ignorable stack-name template-body template-url
     use-previous-template parameters capabilities resource-types role-arn
     notification-arns tags change-set-name client-token description
     change-set-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "CreateChangeSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'create-change-set))
(common-lisp:progn
 (common-lisp:defun create-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name template-body template-url
                     parameters disable-rollback timeout-in-minutes
                     notification-arns capabilities resource-types role-arn
                     on-failure stack-policy-body stack-policy-url tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name template-body template-url parameters
     disable-rollback timeout-in-minutes notification-arns capabilities
     resource-types role-arn on-failure stack-policy-body stack-policy-url tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStack"
                                                        "2010-05-15"))
      common-lisp:nil "CreateStackResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'create-stack))
(common-lisp:progn
 (common-lisp:defun create-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name accounts regions
                     operation-preferences operation-id)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name accounts regions
     operation-preferences operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "CreateStackInstancesResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'create-stack-instances))
(common-lisp:progn
 (common-lisp:defun create-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name description template-body
                     template-url parameters capabilities tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name description template-body
     template-url parameters capabilities tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "CreateStackSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'create-stack-set))
(common-lisp:progn
 (common-lisp:defun delete-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name)
   (common-lisp:declare (common-lisp:ignorable change-set-name stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "DeleteChangeSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'delete-change-set))
(common-lisp:progn
 (common-lisp:defun delete-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name retain-resources role-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name retain-resources role-arn
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStack"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'delete-stack))
(common-lisp:progn
 (common-lisp:defun delete-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name accounts regions
                     operation-preferences retain-stacks operation-id)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name accounts regions
     operation-preferences retain-stacks operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "DeleteStackInstancesResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'delete-stack-instances))
(common-lisp:progn
 (common-lisp:defun delete-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name)
   (common-lisp:declare (common-lisp:ignorable stack-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "DeleteStackSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'delete-stack-set))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAccountLimits"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeAccountLimitsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable change-set-name stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeChangeSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-change-set))
(common-lisp:progn
 (common-lisp:defun describe-stack-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackEvents"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackEventsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stack-events))
(common-lisp:progn
 (common-lisp:defun describe-stack-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name stack-instance-account
                     stack-instance-region)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name stack-instance-account
     stack-instance-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackInstance"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackInstanceResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stack-instance))
(common-lisp:progn
 (common-lisp:defun describe-stack-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id)
   (common-lisp:declare (common-lisp:ignorable stack-name logical-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackResource"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackResourceResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stack-resource))
(common-lisp:progn
 (common-lisp:defun describe-stack-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id
                     physical-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable stack-name logical-resource-id
     physical-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-resources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackResources"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackResourcesResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stack-resources))
(common-lisp:progn
 (common-lisp:defun describe-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name)
   (common-lisp:declare (common-lisp:ignorable stack-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stack-set))
(common-lisp:progn
 (common-lisp:defun describe-stack-set-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-id)
   (common-lisp:declare (common-lisp:ignorable stack-set-name operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stack-set-operation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackSetOperation"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackSetOperationResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stack-set-operation))
(common-lisp:progn
 (common-lisp:defun describe-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stacks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStacks"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStacksResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'describe-stacks))
(common-lisp:progn
 (common-lisp:defun estimate-template-cost
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body template-url parameters)
   (common-lisp:declare
    (common-lisp:ignorable template-body template-url parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-estimate-template-cost-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EstimateTemplateCost"
                                                        "2010-05-15"))
      common-lisp:nil "EstimateTemplateCostResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'estimate-template-cost))
(common-lisp:progn
 (common-lisp:defun execute-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable change-set-name stack-name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExecuteChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "ExecuteChangeSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'execute-change-set))
(common-lisp:progn
 (common-lisp:defun get-stack-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name)
   (common-lisp:declare (common-lisp:ignorable stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-stack-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStackPolicy"
                                                        "2010-05-15"))
      common-lisp:nil "GetStackPolicyResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'get-stack-policy))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name change-set-name
                     template-stage)
   (common-lisp:declare
    (common-lisp:ignorable stack-name change-set-name template-stage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplate"
                                                        "2010-05-15"))
      common-lisp:nil "GetTemplateResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun get-template-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body template-url stack-name
                     stack-set-name)
   (common-lisp:declare
    (common-lisp:ignorable template-body template-url stack-name
     stack-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-summary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplateSummary"
                                                        "2010-05-15"))
      common-lisp:nil "GetTemplateSummaryResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'get-template-summary))
(common-lisp:progn
 (common-lisp:defun list-change-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-change-sets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListChangeSets"
                                                        "2010-05-15"))
      common-lisp:nil "ListChangeSetsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-change-sets))
(common-lisp:progn
 (common-lisp:defun list-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exports-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExports"
                                                        "2010-05-15"))
      common-lisp:nil "ListExportsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-exports))
(common-lisp:progn
 (common-lisp:defun list-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-name next-token)
   (common-lisp:declare (common-lisp:ignorable export-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-imports-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImports"
                                                        "2010-05-15"))
      common-lisp:nil "ListImportsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-imports))
(common-lisp:progn
 (common-lisp:defun list-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name next-token max-results
                     stack-instance-account stack-instance-region)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name next-token max-results
     stack-instance-account stack-instance-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackInstancesResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-stack-instances))
(common-lisp:progn
 (common-lisp:defun list-stack-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-resources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStackResources"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackResourcesResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-stack-resources))
(common-lisp:progn
 (common-lisp:defun list-stack-set-operation-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name operation-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-stack-set-operation-results-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStackSetOperationResults"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackSetOperationResultsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-stack-set-operation-results))
(common-lisp:progn
 (common-lisp:defun list-stack-set-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-set-operations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStackSetOperations"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackSetOperationsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-stack-set-operations))
(common-lisp:progn
 (common-lisp:defun list-stack-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-sets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStackSets"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackSetsResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-stack-sets))
(common-lisp:progn
 (common-lisp:defun list-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token stack-status-filter)
   (common-lisp:declare (common-lisp:ignorable next-token stack-status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stacks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListStacks"
                                                        "2010-05-15"))
      common-lisp:nil "ListStacksResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'list-stacks))
(common-lisp:progn
 (common-lisp:defun set-stack-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name stack-policy-body
                     stack-policy-url)
   (common-lisp:declare
    (common-lisp:ignorable stack-name stack-policy-body stack-policy-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-stack-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetStackPolicy"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'set-stack-policy))
(common-lisp:progn
 (common-lisp:defun signal-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id unique-id
                     status)
   (common-lisp:declare
    (common-lisp:ignorable stack-name logical-resource-id unique-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-signal-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SignalResource"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'signal-resource))
(common-lisp:progn
 (common-lisp:defun stop-stack-set-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-id)
   (common-lisp:declare (common-lisp:ignorable stack-set-name operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-stack-set-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopStackSetOperation"
                                                        "2010-05-15"))
      common-lisp:nil "StopStackSetOperationResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'stop-stack-set-operation))
(common-lisp:progn
 (common-lisp:defun update-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name template-body template-url
                     use-previous-template stack-policy-during-update-body
                     stack-policy-during-update-url parameters capabilities
                     resource-types role-arn stack-policy-body stack-policy-url
                     notification-arns tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name template-body template-url
     use-previous-template stack-policy-during-update-body
     stack-policy-during-update-url parameters capabilities resource-types
     role-arn stack-policy-body stack-policy-url notification-arns tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStack"
                                                        "2010-05-15"))
      common-lisp:nil "UpdateStackResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'update-stack))
(common-lisp:progn
 (common-lisp:defun update-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name description template-body
                     template-url use-previous-template parameters capabilities
                     tags operation-preferences operation-id)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name description template-body
     template-url use-previous-template parameters capabilities tags
     operation-preferences operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "UpdateStackSetResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'update-stack-set))
(common-lisp:progn
 (common-lisp:defun validate-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body template-url)
   (common-lisp:declare (common-lisp:ignorable template-body template-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ValidateTemplate"
                                                        "2010-05-15"))
      common-lisp:nil "ValidateTemplateResult"
      '(("AlreadyExistsException" . already-exists-exception)
        ("ChangeSetNotFoundException" . change-set-not-found-exception)
        ("CreatedButModifiedException" . created-but-modified-exception)
        ("InsufficientCapabilitiesException"
         . insufficient-capabilities-exception)
        ("InvalidChangeSetStatusException"
         . invalid-change-set-status-exception)
        ("InvalidOperationException" . invalid-operation-exception)
        ("LimitExceededException" . limit-exceeded-exception)
        ("NameAlreadyExistsException" . name-already-exists-exception)
        ("OperationIdAlreadyExistsException"
         . operation-id-already-exists-exception)
        ("OperationInProgressException" . operation-in-progress-exception)
        ("OperationNotFoundException" . operation-not-found-exception)
        ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
        ("StackSetNotEmptyException" . stack-set-not-empty-exception)
        ("StackSetNotFoundException" . stack-set-not-found-exception)
        ("StaleRequestException" . stale-request-exception)
        ("TokenAlreadyExistsException" . token-already-exists-exception)))))
 (common-lisp:export 'validate-template))

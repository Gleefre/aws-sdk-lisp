;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/states/api
  (:use)
  (:nicknames #:aws/states)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/states/api)
(common-lisp:progn
 (common-lisp:defclass states-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "states"))
 (common-lisp:export 'states-request))
(common-lisp:progn
 (common-lisp:define-condition states-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'states-error))
(common-lisp:defvar *error-map*
  '(("ActivityDoesNotExist" . activity-does-not-exist)
    ("ActivityLimitExceeded" . activity-limit-exceeded)
    ("ActivityWorkerLimitExceeded" . activity-worker-limit-exceeded)
    ("ExecutionAlreadyExists" . execution-already-exists)
    ("ExecutionDoesNotExist" . execution-does-not-exist)
    ("ExecutionLimitExceeded" . execution-limit-exceeded)
    ("InvalidArn" . invalid-arn) ("InvalidDefinition" . invalid-definition)
    ("InvalidExecutionInput" . invalid-execution-input)
    ("InvalidName" . invalid-name) ("InvalidOutput" . invalid-output)
    ("InvalidToken" . invalid-token)
    ("StateMachineAlreadyExists" . state-machine-already-exists)
    ("StateMachineDeleting" . state-machine-deleting)
    ("StateMachineDoesNotExist" . state-machine-does-not-exist)
    ("StateMachineLimitExceeded" . state-machine-limit-exceeded)
    ("TaskDoesNotExist" . task-does-not-exist)
    ("TaskTimedOut" . task-timed-out)))
(common-lisp:progn
 (common-lisp:define-condition activity-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       activity-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'activity-does-not-exist 'activity-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-failed-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-failed-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-failed-event-details
                    'make-activity-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition activity-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       activity-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'activity-limit-exceeded 'activity-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype activity-list ()
   '(trivial-types:proper-list activity-list-item))
 (common-lisp:defun |make-activity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-list-item-"))
   (activity-arn (common-lisp:error ":activityarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-list-item 'make-activity-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-schedule-failed-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-schedule-failed-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-schedule-failed-event-details
                    'make-activity-schedule-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-schedule-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-schedule-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-schedule-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-scheduled-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-scheduled-event-details-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or arn common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (timeout-in-seconds common-lisp:nil :type
    (common-lisp:or timeout-in-seconds common-lisp:null))
   (heartbeat-in-seconds common-lisp:nil :type
    (common-lisp:or timeout-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-scheduled-event-details
                    'make-activity-scheduled-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-scheduled-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-scheduled-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'heartbeat-in-seconds))
      (common-lisp:list
       (common-lisp:cons "heartbeatInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-scheduled-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-started-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-started-event-details-"))
   (worker-name common-lisp:nil :type
    (common-lisp:or identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-started-event-details
                    'make-activity-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-name))
      (common-lisp:list
       (common-lisp:cons "workerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-started-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-succeeded-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-succeeded-event-details-"))
   (output common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-succeeded-event-details
                    'make-activity-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-timed-out-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-timed-out-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-timed-out-event-details
                    'make-activity-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activity-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activity-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activity-timed-out-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition activity-worker-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       activity-worker-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'activity-worker-limit-exceeded
                    'activity-worker-limit-exceeded-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype cause () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-activity-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-activity-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-activity-input 'make-create-activity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-activity-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-activity-output-"))
   (activity-arn (common-lisp:error ":activityarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-activity-output 'make-create-activity-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-activity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-state-machine-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-state-machine-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or definition common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-state-machine-input
                    'make-create-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-state-machine-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-state-machine-output-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-state-machine-output
                    'make-create-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-state-machine-output))
   common-lisp:nil))
(common-lisp:deftype data () 'common-lisp:string)
(common-lisp:deftype definition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-activity-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-activity-input-"))
   (activity-arn (common-lisp:error ":activityarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-activity-input 'make-delete-activity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-activity-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-activity-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-activity-output 'make-delete-activity-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-activity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-state-machine-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-state-machine-input-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-input
                    'make-delete-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-state-machine-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-state-machine-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-state-machine-output
                    'make-delete-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-state-machine-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-activity-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-activity-input-"))
   (activity-arn (common-lisp:error ":activityarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-activity-input 'make-describe-activity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-activity-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-activity-output-"))
   (activity-arn (common-lisp:error ":activityarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-activity-output 'make-describe-activity-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-execution-input-"))
   (execution-arn (common-lisp:error ":executionarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-execution-input 'make-describe-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-execution-output-"))
   (execution-arn (common-lisp:error ":executionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or execution-status common-lisp:null))
   (start-date (common-lisp:error ":startdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (stop-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (input (common-lisp:error ":input is required") :type
    (common-lisp:or data common-lisp:null))
   (output common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-execution-output
                    'make-describe-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-state-machine-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-state-machine-input-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-input
                    'make-describe-state-machine-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-state-machine-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-state-machine-output-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or state-machine-status common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or definition common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-state-machine-output
                    'make-describe-state-machine-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-state-machine-output))
   common-lisp:nil))
(common-lisp:deftype error () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-aborted-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-aborted-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-aborted-event-details
                    'make-execution-aborted-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-aborted-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-aborted-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-aborted-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition execution-already-exists
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'execution-already-exists
                    'execution-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition execution-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'execution-does-not-exist
                    'execution-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-failed-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-failed-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-failed-event-details
                    'make-execution-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition execution-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execution-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'execution-limit-exceeded
                    'execution-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype execution-list ()
   '(trivial-types:proper-list execution-list-item))
 (common-lisp:defun |make-execution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-list-item-"))
   (execution-arn (common-lisp:error ":executionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or execution-status common-lisp:null))
   (start-date (common-lisp:error ":startdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (stop-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-list-item 'make-execution-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-started-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-started-event-details-"))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-started-event-details
                    'make-execution-started-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-started-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-started-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-started-event-details))
   common-lisp:nil))
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-succeeded-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-succeeded-event-details-"))
   (output common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-succeeded-event-details
                    'make-execution-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-timed-out-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-timed-out-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-timed-out-event-details
                    'make-execution-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-timed-out-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-activity-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-activity-task-input-"))
   (activity-arn (common-lisp:error ":activityarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (worker-name common-lisp:nil :type (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-activity-task-input 'make-get-activity-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-arn))
      (common-lisp:list
       (common-lisp:cons "activityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-name))
      (common-lisp:list
       (common-lisp:cons "workerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-activity-task-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-activity-task-output-"))
   (task-token common-lisp:nil :type
    (common-lisp:or task-token common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-activity-task-output 'make-get-activity-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-activity-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-execution-history-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-execution-history-input-"))
   (execution-arn (common-lisp:error ":executionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (reverse-order common-lisp:nil :type
    (common-lisp:or reverse-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-execution-history-input
                    'make-get-execution-history-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "reverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-execution-history-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-execution-history-output-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or history-event-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-execution-history-output
                    'make-get-execution-history-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-execution-history-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (history-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-history-event-"))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or history-event-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or event-id common-lisp:null))
   (previous-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null))
   (activity-failed-event-details common-lisp:nil :type
    (common-lisp:or activity-failed-event-details common-lisp:null))
   (activity-schedule-failed-event-details common-lisp:nil :type
    (common-lisp:or activity-schedule-failed-event-details common-lisp:null))
   (activity-scheduled-event-details common-lisp:nil :type
    (common-lisp:or activity-scheduled-event-details common-lisp:null))
   (activity-started-event-details common-lisp:nil :type
    (common-lisp:or activity-started-event-details common-lisp:null))
   (activity-succeeded-event-details common-lisp:nil :type
    (common-lisp:or activity-succeeded-event-details common-lisp:null))
   (activity-timed-out-event-details common-lisp:nil :type
    (common-lisp:or activity-timed-out-event-details common-lisp:null))
   (execution-failed-event-details common-lisp:nil :type
    (common-lisp:or execution-failed-event-details common-lisp:null))
   (execution-started-event-details common-lisp:nil :type
    (common-lisp:or execution-started-event-details common-lisp:null))
   (execution-succeeded-event-details common-lisp:nil :type
    (common-lisp:or execution-succeeded-event-details common-lisp:null))
   (execution-aborted-event-details common-lisp:nil :type
    (common-lisp:or execution-aborted-event-details common-lisp:null))
   (execution-timed-out-event-details common-lisp:nil :type
    (common-lisp:or execution-timed-out-event-details common-lisp:null))
   (lambda-function-failed-event-details common-lisp:nil :type
    (common-lisp:or lambda-function-failed-event-details common-lisp:null))
   (lambda-function-schedule-failed-event-details common-lisp:nil :type
    (common-lisp:or lambda-function-schedule-failed-event-details
                    common-lisp:null))
   (lambda-function-scheduled-event-details common-lisp:nil :type
    (common-lisp:or lambda-function-scheduled-event-details common-lisp:null))
   (lambda-function-start-failed-event-details common-lisp:nil :type
    (common-lisp:or lambda-function-start-failed-event-details
                    common-lisp:null))
   (lambda-function-succeeded-event-details common-lisp:nil :type
    (common-lisp:or lambda-function-succeeded-event-details common-lisp:null))
   (lambda-function-timed-out-event-details common-lisp:nil :type
    (common-lisp:or lambda-function-timed-out-event-details common-lisp:null))
   (state-entered-event-details common-lisp:nil :type
    (common-lisp:or state-entered-event-details common-lisp:null))
   (state-exited-event-details common-lisp:nil :type
    (common-lisp:or state-exited-event-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'history-event 'make-history-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-event-id))
      (common-lisp:list
       (common-lisp:cons "previousEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "activityFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-schedule-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "activityScheduleFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-scheduled-event-details))
      (common-lisp:list
       (common-lisp:cons "activityScheduledEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-started-event-details))
      (common-lisp:list
       (common-lisp:cons "activityStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "activitySucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "activityTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "executionFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-started-event-details))
      (common-lisp:list
       (common-lisp:cons "executionStartedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "executionSucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-aborted-event-details))
      (common-lisp:list
       (common-lisp:cons "executionAbortedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "executionTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-schedule-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionScheduleFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-scheduled-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionScheduledEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-start-failed-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionStartFailedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-succeeded-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionSucceededEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-timed-out-event-details))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionTimedOutEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-entered-event-details))
      (common-lisp:list
       (common-lisp:cons "stateEnteredEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-exited-event-details))
      (common-lisp:list
       (common-lisp:cons "stateExitedEventDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input history-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype history-event-list ()
   '(trivial-types:proper-list history-event))
 (common-lisp:defun |make-history-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list history-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype history-event-type () 'common-lisp:string)
(common-lisp:deftype identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-arn
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-message)))
 (common-lisp:export (common-lisp:list 'invalid-arn 'invalid-arn-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-definition
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-definition-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-definition 'invalid-definition-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-execution-input
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-execution-input-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-execution-input 'invalid-execution-input-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-name
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-name-message)))
 (common-lisp:export (common-lisp:list 'invalid-name 'invalid-name-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-output
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-output-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-output 'invalid-output-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-token
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-token-message)))
 (common-lisp:export (common-lisp:list 'invalid-token 'invalid-token-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-failed-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-failed-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-failed-event-details
                    'make-lambda-function-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-schedule-failed-event-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-lambda-function-schedule-failed-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-schedule-failed-event-details
                    'make-lambda-function-schedule-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-schedule-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-schedule-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-schedule-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-scheduled-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-scheduled-event-details-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or arn common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null))
   (timeout-in-seconds common-lisp:nil :type
    (common-lisp:or timeout-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-scheduled-event-details
                    'make-lambda-function-scheduled-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-scheduled-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-start-failed-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-start-failed-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-start-failed-event-details
                    'make-lambda-function-start-failed-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-start-failed-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-start-failed-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-start-failed-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-succeeded-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-succeeded-event-details-"))
   (output common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-succeeded-event-details
                    'make-lambda-function-succeeded-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-succeeded-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-succeeded-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-succeeded-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-timed-out-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-timed-out-event-details-"))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-timed-out-event-details
                    'make-lambda-function-timed-out-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-timed-out-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-activities-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-activities-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-activities-input 'make-list-activities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-activities-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-activities-output-"))
   (activities (common-lisp:error ":activities is required") :type
    (common-lisp:or activity-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-activities-output 'make-list-activities-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-executions-input-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (status-filter common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-executions-input 'make-list-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "statusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-executions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-executions-output-"))
   (executions (common-lisp:error ":executions is required") :type
    (common-lisp:or execution-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-executions-output 'make-list-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executions))
      (common-lisp:list
       (common-lisp:cons "executions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-state-machines-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-state-machines-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-state-machines-input
                    'make-list-state-machines-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-state-machines-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-state-machines-output-"))
   (state-machines (common-lisp:error ":statemachines is required") :type
    (common-lisp:or state-machine-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-state-machines-output
                    'make-list-state-machines-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machines))
      (common-lisp:list
       (common-lisp:cons "stateMachines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-state-machines-output))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:deftype reverse-order () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (send-task-failure-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-task-failure-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-task-failure-input 'make-send-task-failure-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-task-failure-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-task-failure-output-")))
 (common-lisp:export
  (common-lisp:list 'send-task-failure-output 'make-send-task-failure-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-failure-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-task-heartbeat-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-task-heartbeat-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-task-heartbeat-input
                    'make-send-task-heartbeat-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-task-heartbeat-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-task-heartbeat-output-")))
 (common-lisp:export
  (common-lisp:list 'send-task-heartbeat-output
                    'make-send-task-heartbeat-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-heartbeat-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-task-success-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-task-success-input-"))
   (task-token (common-lisp:error ":tasktoken is required") :type
    (common-lisp:or task-token common-lisp:null))
   (output (common-lisp:error ":output is required") :type
    (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-task-success-input 'make-send-task-success-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-token))
      (common-lisp:list
       (common-lisp:cons "taskToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-task-success-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-task-success-output-")))
 (common-lisp:export
  (common-lisp:list 'send-task-success-output 'make-send-task-success-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-task-success-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-execution-input-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-execution-input 'make-start-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-execution-output-"))
   (execution-arn (common-lisp:error ":executionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (start-date (common-lisp:error ":startdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-execution-output 'make-start-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (state-entered-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-state-entered-event-details-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (input common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'state-entered-event-details
                    'make-state-entered-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-entered-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-entered-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-entered-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (state-exited-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-state-exited-event-details-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (output common-lisp:nil :type (common-lisp:or data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'state-exited-event-details
                    'make-state-exited-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-exited-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-exited-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-exited-event-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition state-machine-already-exists
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-already-exists
                    'state-machine-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition state-machine-deleting
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-deleting-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-deleting 'state-machine-deleting-message)))
(common-lisp:progn
 (common-lisp:define-condition state-machine-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-does-not-exist
                    'state-machine-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:define-condition state-machine-limit-exceeded
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       state-machine-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'state-machine-limit-exceeded
                    'state-machine-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype state-machine-list ()
   '(trivial-types:proper-list state-machine-list-item))
 (common-lisp:defun |make-state-machine-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list state-machine-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (state-machine-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-state-machine-list-item-"))
   (state-machine-arn (common-lisp:error ":statemachinearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'state-machine-list-item 'make-state-machine-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-machine-arn))
      (common-lisp:list
       (common-lisp:cons "stateMachineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          state-machine-list-item))
   common-lisp:nil))
(common-lisp:deftype state-machine-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-execution-input-"))
   (execution-arn (common-lisp:error ":executionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or error common-lisp:null))
   (cause common-lisp:nil :type (common-lisp:or cause common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-execution-input 'make-stop-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-arn))
      (common-lisp:list
       (common-lisp:cons "executionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-execution-output-"))
   (stop-date (common-lisp:error ":stopdate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-execution-output 'make-stop-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "stopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition task-does-not-exist
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       task-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'task-does-not-exist 'task-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:define-condition task-timed-out
     (states-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       task-timed-out-message)))
 (common-lisp:export
  (common-lisp:list 'task-timed-out 'task-timed-out-message)))
(common-lisp:deftype task-token () 'common-lisp:string)
(common-lisp:deftype timeout-in-seconds () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-activity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateActivity"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-activity))
(common-lisp:progn
 (common-lisp:defun create-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name definition role-arn)
   (common-lisp:declare (common-lisp:ignorable name definition role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStateMachine"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-state-machine))
(common-lisp:progn
 (common-lisp:defun delete-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-arn)
   (common-lisp:declare (common-lisp:ignorable activity-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-activity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteActivity"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-activity))
(common-lisp:progn
 (common-lisp:defun delete-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStateMachine"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-state-machine))
(common-lisp:progn
 (common-lisp:defun describe-activity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-arn)
   (common-lisp:declare (common-lisp:ignorable activity-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-activity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeActivity"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-activity))
(common-lisp:progn
 (common-lisp:defun describe-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn)
   (common-lisp:declare (common-lisp:ignorable execution-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExecution"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-execution))
(common-lisp:progn
 (common-lisp:defun describe-state-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn)
   (common-lisp:declare (common-lisp:ignorable state-machine-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-state-machine-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStateMachine"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-state-machine))
(common-lisp:progn
 (common-lisp:defun get-activity-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activity-arn worker-name)
   (common-lisp:declare (common-lisp:ignorable activity-arn worker-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-activity-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetActivityTask"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-activity-task))
(common-lisp:progn
 (common-lisp:defun get-execution-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn max-results reverse-order
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable execution-arn max-results reverse-order next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-execution-history-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetExecutionHistory"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-execution-history))
(common-lisp:progn
 (common-lisp:defun list-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-activities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActivities"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-activities))
(common-lisp:progn
 (common-lisp:defun list-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn status-filter
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable state-machine-arn status-filter max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExecutions"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-executions))
(common-lisp:progn
 (common-lisp:defun list-state-machines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-state-machines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStateMachines"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-state-machines))
(common-lisp:progn
 (common-lisp:defun send-task-failure
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token error cause)
   (common-lisp:declare (common-lisp:ignorable task-token error cause))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-task-failure-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTaskFailure"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-task-failure))
(common-lisp:progn
 (common-lisp:defun send-task-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token)
   (common-lisp:declare (common-lisp:ignorable task-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-task-heartbeat-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTaskHeartbeat"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-task-heartbeat))
(common-lisp:progn
 (common-lisp:defun send-task-success
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-token output)
   (common-lisp:declare (common-lisp:ignorable task-token output))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-task-success-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTaskSuccess"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-task-success))
(common-lisp:progn
 (common-lisp:defun start-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state-machine-arn name input)
   (common-lisp:declare (common-lisp:ignorable state-machine-arn name input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExecution"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-execution))
(common-lisp:progn
 (common-lisp:defun stop-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-arn error cause)
   (common-lisp:declare (common-lisp:ignorable execution-arn error cause))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'states-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopExecution"
                                                        "2016-11-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-execution))
